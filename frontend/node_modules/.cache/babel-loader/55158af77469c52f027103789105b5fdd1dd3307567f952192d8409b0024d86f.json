{"ast":null,"code":"// src/services/courseService.ts\n\n// Add Course type definition at the top\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst courseService = {\n  getAllCourses: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/courses`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch courses');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching courses:', error);\n      // Return mock data\n      return [{\n        course_id: \"COURSE-001\",\n        department_id: \"DEPT-001\",\n        course_name: \"Introduction to Programming\",\n        duration_minutes: 55,\n        is_core: true,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }];\n    }\n  },\n  getCourseById: async id => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/courses/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch course');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching course ${id}:`, error);\n      // Return mock data\n      return {\n        course_id: id,\n        department_id: \"DEPT-001\",\n        course_name: \"Sample Course\",\n        duration_minutes: 60,\n        is_core: true,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n    }\n  },\n  getCoursesByProfessor: async professorId => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/courses/professor/${professorId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch courses by professor');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching courses for professor ${professorId}:`, error);\n      // Return mock data\n      return [{\n        course_id: \"COURSE-001\",\n        department_id: \"DEPT-001\",\n        course_name: \"Introduction to Programming\",\n        duration_minutes: 55,\n        is_core: true,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }];\n    }\n  }\n};\nexport default courseService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","courseService","getAllCourses","token","localStorage","getItem","response","fetch","headers","ok","Error","json","error","console","course_id","department_id","course_name","duration_minutes","is_core","created_at","Date","toISOString","updated_at","getCourseById","id","getCoursesByProfessor","professorId"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/courseService.ts"],"sourcesContent":["// src/services/courseService.ts\r\n\r\n// Add Course type definition at the top\r\nexport interface Course {\r\n  course_id: string;\r\n  department_id: string;\r\n  course_name: string;\r\n  duration_minutes: number;\r\n  is_core: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\nconst courseService = {\r\n  getAllCourses: async (): Promise<Course[]> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`${API_URL}/courses`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch courses');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      // Return mock data\r\n      return [\r\n        {\r\n          course_id: \"COURSE-001\",\r\n          department_id: \"DEPT-001\",\r\n          course_name: \"Introduction to Programming\",\r\n          duration_minutes: 55,\r\n          is_core: true,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        }\r\n      ];\r\n    }\r\n  },\r\n\r\n  getCourseById: async (id: string): Promise<Course> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`${API_URL}/courses/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch course');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching course ${id}:`, error);\r\n      // Return mock data\r\n      return {\r\n        course_id: id,\r\n        department_id: \"DEPT-001\",\r\n        course_name: \"Sample Course\",\r\n        duration_minutes: 60,\r\n        is_core: true,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n    }\r\n  },\r\n\r\n  getCoursesByProfessor: async (professorId: string): Promise<Course[]> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`${API_URL}/courses/professor/${professorId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch courses by professor');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching courses for professor ${professorId}:`, error);\r\n      // Return mock data\r\n      return [\r\n        {\r\n          course_id: \"COURSE-001\",\r\n          department_id: \"DEPT-001\",\r\n          course_name: \"Introduction to Programming\",\r\n          duration_minutes: 55,\r\n          is_core: true,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        }\r\n      ];\r\n    }\r\n  }\r\n};\r\n\r\nexport default courseService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}