{"ast":null,"code":"// src/services/authService.ts\n\n// API base URL - points to our backend server\n//const API_URL = 'http://localhost:8000/api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Type definitions\n\nconst authService = {\n  login: async (email, password, role) => {\n    try {\n      // Endpoint depends on the role\n      const endpoint = role === 'admin' ? 'auth/admin/login' : 'auth/professor/login';\n      const response = await fetch(`${API_URL}/${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n\n      // If login was successful, store the token and user info\n      /*if (data.success && data.token) {\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n      }*/\n\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        return {\n          success: true,\n          message: data.message,\n          token: data.token,\n          user: data.user\n        };\n      }\n      return {\n        success: false,\n        message: data.message || 'Login failed'\n      };\n\n      //return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: 'Network error. Please check your connection and try again.'\n      };\n    }\n  },\n  tempLogin: async email => {\n    try {\n      const response = await fetch(`${API_URL}/auth/temp-login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      if (data.success && data.token) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n      }\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: 'Network error. Please check your connection and try again.'\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await fetch(`${API_URL}/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch user data');\n      }\n      const data = await response.json();\n      return data.user;\n    } catch (error) {\n      console.error('Get current user error:', error);\n      return null;\n    }\n  },\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  }\n};\nexport default authService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","authService","login","email","password","role","endpoint","response","fetch","method","headers","body","JSON","stringify","data","json","token","localStorage","setItem","user","success","message","error","console","tempLogin","logout","removeItem","getCurrentUser","getItem","Error","ok","getToken","isAuthenticated"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/authService.ts"],"sourcesContent":["// src/services/authService.ts\r\n\r\n// API base URL - points to our backend server\r\n//const API_URL = 'http://localhost:8000/api';\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Type definitions\r\ninterface LoginResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  token?: string;\r\n  user?: any;\r\n}\r\n\r\nconst authService = {\r\n  login: async (email: string, password: string, role: string): Promise<LoginResponse> => {\r\n    try {\r\n      // Endpoint depends on the role\r\n      const endpoint = role === 'admin' ? 'auth/admin/login' : 'auth/professor/login';\r\n      \r\n      const response = await fetch(`${API_URL}/${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      // If login was successful, store the token and user info\r\n      /*if (data.success && data.token) {\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n      }*/\r\n\r\n      if (data.token) {\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n        return { success: true, message: data.message, token: data.token, user: data.user };\r\n      }\r\n      return { success: false, message: data.message || 'Login failed' };\r\n      \r\n      //return data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Network error. Please check your connection and try again.'\r\n      };\r\n    }\r\n  },\r\n  \r\n  tempLogin: async (email: string): Promise<LoginResponse> => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/auth/temp-login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.success && data.token) {\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Network error. Please check your connection and try again.'\r\n      };\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n  \r\n  getCurrentUser: async (): Promise<any> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n      \r\n      const response = await fetch(`${API_URL}/auth/me`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      return data.user;\r\n    } catch (error) {\r\n      console.error('Get current user error:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  getToken: () => {\r\n    return localStorage.getItem('token');\r\n  },\r\n  \r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}