{"ast":null,"code":"// src/services/scheduleService.ts\n//import { v4 as uuidv4 } from 'uuid';\n\n// Define the base API URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Types\n\n// Get active schedule for a semester\nexport const getActiveSchedule = async semesterId => {\n  try {\n    var _schedule$ScheduledCo, _schedule$ScheduledCo2, _schedule$Semester;\n    const token = localStorage.getItem('token');\n    console.log(`Fetching active schedule for semester: ${semesterId}`);\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}/active`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      // If no active schedule exists, throw an error to be handled by caller\n      if (response.status === 404) {\n        console.error('No active schedule found for this semester');\n        throw new Error('No active schedule found for this semester');\n      }\n      console.error(`Failed to fetch active schedule: ${response.status} ${response.statusText}`);\n      throw new Error('Failed to fetch active schedule');\n    }\n    const schedule = await response.json();\n    console.log(`Retrieved active schedule: ${schedule.schedule_id} with ${((_schedule$ScheduledCo = schedule.ScheduledCourses) === null || _schedule$ScheduledCo === void 0 ? void 0 : _schedule$ScheduledCo.length) || 0} courses`);\n\n    // Process the scheduled courses to match our frontend model\n    const formattedCourses = ((_schedule$ScheduledCo2 = schedule.ScheduledCourses) === null || _schedule$ScheduledCo2 === void 0 ? void 0 : _schedule$ScheduledCo2.map(sc => {\n      var _sc$Course, _sc$Course2, _sc$Professor, _sc$Professor2, _sc$Professor3, _sc$Course3, _sc$Course4;\n      return {\n        scheduled_course_id: sc.scheduled_course_id,\n        schedule_id: sc.schedule_id,\n        course_id: (_sc$Course = sc.Course) === null || _sc$Course === void 0 ? void 0 : _sc$Course.course_id,\n        course_name: (_sc$Course2 = sc.Course) === null || _sc$Course2 === void 0 ? void 0 : _sc$Course2.course_name,\n        professor_id: (_sc$Professor = sc.Professor) === null || _sc$Professor === void 0 ? void 0 : _sc$Professor.professor_id,\n        professor_name: `${((_sc$Professor2 = sc.Professor) === null || _sc$Professor2 === void 0 ? void 0 : _sc$Professor2.first_name) || ''} ${((_sc$Professor3 = sc.Professor) === null || _sc$Professor3 === void 0 ? void 0 : _sc$Professor3.last_name) || ''}`.trim(),\n        timeslot_id: sc.timeslot_id,\n        day_of_week: sc.day_of_week,\n        time_slot_id: sc.timeslot_id,\n        is_core: ((_sc$Course3 = sc.Course) === null || _sc$Course3 === void 0 ? void 0 : _sc$Course3.is_core) || false,\n        is_override: sc.is_override || false,\n        override_reason: sc.override_reason,\n        created_at: sc.created_at,\n        updated_at: sc.updated_at,\n        department_id: (_sc$Course4 = sc.Course) === null || _sc$Course4 === void 0 ? void 0 : _sc$Course4.department_id\n      };\n    })) || [];\n    return {\n      ...schedule,\n      schedule_id: schedule.schedule_id,\n      // Ensure this is explicitly set\n      semester_id: schedule.semester_id,\n      semester_name: ((_schedule$Semester = schedule.Semester) === null || _schedule$Semester === void 0 ? void 0 : _schedule$Semester.name) || 'Unknown',\n      name: schedule.name,\n      is_final: schedule.is_final,\n      courses: formattedCourses,\n      // This is crucial\n      conflicts: [],\n      // Conflicts will be fetched separately\n      created_at: schedule.created_at,\n      updated_at: schedule.updated_at\n    };\n  } catch (error) {\n    console.error(`Error in getActiveSchedule for semester ${semesterId}:`, error);\n    throw error;\n  }\n};\n\n// Get all schedules for a semester\nexport const getSchedulesBySemester = async semesterId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedules by semester');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getSchedulesBySemester for semester ${semesterId}:`, error);\n    throw error;\n  }\n};\n\n// Get schedule by ID with courses\nexport const getScheduleById = async id => {\n  try {\n    var _data$ScheduledCourse, _data$Semester;\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedule');\n    }\n    const data = await response.json();\n\n    // Format the data to match the expected structure\n    const formattedCourses = ((_data$ScheduledCourse = data.ScheduledCourses) === null || _data$ScheduledCourse === void 0 ? void 0 : _data$ScheduledCourse.map(sc => {\n      var _sc$Course5, _sc$Course6, _sc$Professor4, _sc$Professor5, _sc$Professor6, _sc$Course7, _sc$Course8;\n      return {\n        scheduled_course_id: sc.scheduled_course_id,\n        schedule_id: sc.schedule_id,\n        course_id: (_sc$Course5 = sc.Course) === null || _sc$Course5 === void 0 ? void 0 : _sc$Course5.course_id,\n        course_name: (_sc$Course6 = sc.Course) === null || _sc$Course6 === void 0 ? void 0 : _sc$Course6.course_name,\n        professor_id: (_sc$Professor4 = sc.Professor) === null || _sc$Professor4 === void 0 ? void 0 : _sc$Professor4.professor_id,\n        professor_name: `${(_sc$Professor5 = sc.Professor) === null || _sc$Professor5 === void 0 ? void 0 : _sc$Professor5.first_name} ${(_sc$Professor6 = sc.Professor) === null || _sc$Professor6 === void 0 ? void 0 : _sc$Professor6.last_name}`,\n        timeslot_id: sc.timeslot_id,\n        day_of_week: sc.day_of_week,\n        time_slot_id: sc.timeslot_id,\n        room: sc.room || \"TBA\",\n        is_core: ((_sc$Course7 = sc.Course) === null || _sc$Course7 === void 0 ? void 0 : _sc$Course7.is_core) || false,\n        is_override: sc.is_override,\n        override_reason: sc.override_reason,\n        created_at: sc.created_at,\n        updated_at: sc.updated_at,\n        department_id: (_sc$Course8 = sc.Course) === null || _sc$Course8 === void 0 ? void 0 : _sc$Course8.department_id\n      };\n    })) || [];\n    return {\n      ...data,\n      semester_name: ((_data$Semester = data.Semester) === null || _data$Semester === void 0 ? void 0 : _data$Semester.name) || \"Unknown Semester\",\n      courses: formattedCourses\n    };\n  } catch (error) {\n    console.error(`Error in getScheduleById for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Get conflicts for a schedule\nexport const getScheduleConflicts = async scheduleId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/conflicts`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedule conflicts');\n    }\n    const conflicts = await response.json();\n\n    // Format conflicts to match the expected structure\n    return conflicts.map(conflict => {\n      var _conflict$ScheduledCo, _conflict$TimeSlot, _conflict$TimeSlot2, _conflict$TimeSlot3;\n      const courses = ((_conflict$ScheduledCo = conflict.ScheduledCourses) === null || _conflict$ScheduledCo === void 0 ? void 0 : _conflict$ScheduledCo.map(sc => {\n        var _sc$Course9, _sc$Course10, _sc$Professor7, _sc$Professor8, _sc$Professor9;\n        return {\n          scheduled_course_id: sc.scheduled_course_id,\n          course_id: (_sc$Course9 = sc.Course) === null || _sc$Course9 === void 0 ? void 0 : _sc$Course9.course_id,\n          course_name: (_sc$Course10 = sc.Course) === null || _sc$Course10 === void 0 ? void 0 : _sc$Course10.course_name,\n          professor_id: (_sc$Professor7 = sc.Professor) === null || _sc$Professor7 === void 0 ? void 0 : _sc$Professor7.professor_id,\n          professor_name: `${(_sc$Professor8 = sc.Professor) === null || _sc$Professor8 === void 0 ? void 0 : _sc$Professor8.first_name} ${(_sc$Professor9 = sc.Professor) === null || _sc$Professor9 === void 0 ? void 0 : _sc$Professor9.last_name}`\n        };\n      })) || [];\n      const timeSlot = {\n        name: ((_conflict$TimeSlot = conflict.TimeSlot) === null || _conflict$TimeSlot === void 0 ? void 0 : _conflict$TimeSlot.name) || '',\n        start_time: ((_conflict$TimeSlot2 = conflict.TimeSlot) === null || _conflict$TimeSlot2 === void 0 ? void 0 : _conflict$TimeSlot2.start_time) || '',\n        end_time: ((_conflict$TimeSlot3 = conflict.TimeSlot) === null || _conflict$TimeSlot3 === void 0 ? void 0 : _conflict$TimeSlot3.end_time) || ''\n      };\n      return {\n        conflict_id: conflict.conflict_id,\n        schedule_id: conflict.schedule_id,\n        timeslot_id: conflict.timeslot_id,\n        day_of_week: conflict.day_of_week,\n        conflict_type: conflict.conflict_type,\n        description: conflict.description,\n        is_resolved: conflict.is_resolved,\n        resolution_notes: conflict.resolution_notes,\n        time_slot: timeSlot,\n        courses: courses\n      };\n    });\n  } catch (error) {\n    console.error(`Error fetching conflicts for schedule ${scheduleId}:`, error);\n    throw error;\n  }\n};\n\n// Resolve a conflict\nexport const resolveConflict = async (conflictId, resolution) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/conflicts/${conflictId}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(resolution)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to resolve conflict');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error resolving conflict ${conflictId}:`, error);\n    throw error;\n  }\n};\n\n// Override a scheduled course\nexport const overrideScheduledCourse = async (scheduleId, overrideData) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/override`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(overrideData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to override scheduled course');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error overriding course in schedule ${scheduleId}:`, error);\n    throw error;\n  }\n};\n\n// In scheduleService.ts - update the generateSchedule function\nexport const generateSchedule = async (semesterId, name) => {\n  try {\n    console.log(`Generating schedule for semester ${semesterId} with name: ${name}`);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication token is missing');\n    }\n    const response = await fetch(`${API_URL}/scheduler/generate`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        semester_id: semesterId,\n        name\n      })\n    });\n    console.log('Response status:', response.status);\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('Error response from server:', errorData);\n      throw new Error(errorData.message || 'Failed to generate schedule');\n    }\n    const data = await response.json();\n    console.log('Successfully generated schedule:', data);\n    return data.schedule;\n  } catch (error) {\n    console.error('Error generating schedule:', error);\n    throw error;\n  }\n};\nexport const forceScheduleRefresh = async scheduleId => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Force refreshing schedule: ${scheduleId}`);\n\n    // Make a direct call to get this specific schedule\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      console.error(`Failed to refresh schedule ${scheduleId}: ${response.status}`);\n      return false;\n    }\n    console.log(`Successfully refreshed schedule: ${scheduleId}`);\n    return true;\n  } catch (error) {\n    console.error(`Error refreshing schedule ${scheduleId}:`, error);\n    return false;\n  }\n};\nconst scheduleService = {\n  getActiveSchedule,\n  getSchedulesBySemester,\n  getScheduleById,\n  getScheduleConflicts,\n  resolveConflict,\n  overrideScheduledCourse,\n  generateSchedule,\n  forceScheduleRefresh // Add this line\n};\nexport default scheduleService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getActiveSchedule","semesterId","_schedule$ScheduledCo","_schedule$ScheduledCo2","_schedule$Semester","token","localStorage","getItem","console","log","response","fetch","headers","ok","status","error","Error","statusText","schedule","json","schedule_id","ScheduledCourses","length","formattedCourses","map","sc","_sc$Course","_sc$Course2","_sc$Professor","_sc$Professor2","_sc$Professor3","_sc$Course3","_sc$Course4","scheduled_course_id","course_id","Course","course_name","professor_id","Professor","professor_name","first_name","last_name","trim","timeslot_id","day_of_week","time_slot_id","is_core","is_override","override_reason","created_at","updated_at","department_id","semester_id","semester_name","Semester","name","is_final","courses","conflicts","getSchedulesBySemester","data","getScheduleById","id","_data$ScheduledCourse","_data$Semester","_sc$Course5","_sc$Course6","_sc$Professor4","_sc$Professor5","_sc$Professor6","_sc$Course7","_sc$Course8","room","getScheduleConflicts","scheduleId","conflict","_conflict$ScheduledCo","_conflict$TimeSlot","_conflict$TimeSlot2","_conflict$TimeSlot3","_sc$Course9","_sc$Course10","_sc$Professor7","_sc$Professor8","_sc$Professor9","timeSlot","TimeSlot","start_time","end_time","conflict_id","conflict_type","description","is_resolved","resolution_notes","time_slot","resolveConflict","conflictId","resolution","method","body","JSON","stringify","overrideScheduledCourse","overrideData","generateSchedule","errorData","message","forceScheduleRefresh","scheduleService"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/scheduleService.ts"],"sourcesContent":["// src/services/scheduleService.ts\r\n//import { v4 as uuidv4 } from 'uuid';\r\n\r\n// Define the base API URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Types\r\nexport interface ScheduledCourse {\r\n  scheduled_course_id: string;\r\n  schedule_id: string;\r\n  course_id: string;\r\n  course_name: string;\r\n  professor_id: string;\r\n  professor_name: string;\r\n  timeslot_id: string;\r\n  day_of_week: string;\r\n  time_slot_id: string;\r\n  room?: string;\r\n  is_core: boolean;\r\n  is_override: boolean;\r\n  override_reason?: string;\r\n  conflicts?: any[];\r\n  created_at: string;\r\n  updated_at: string;\r\n  department_id?: string;\r\n  program_ids?: string[];\r\n}\r\n\r\nexport interface Schedule {\r\n  schedule_id: string;\r\n  semester_id: string;\r\n  semester_name: string;\r\n  name: string;\r\n  is_final: boolean;\r\n  courses: ScheduledCourse[];\r\n  conflicts: any[];\r\n  created_at: string;\r\n  updated_at: string;\r\n  ScheduledCourses?: any[];\r\n  scheduledCourses?: any[];\r\n}\r\n\r\nexport interface Conflict {\r\n  conflict_id: string;\r\n  schedule_id: string;\r\n  timeslot_id: string;\r\n  day_of_week: string;\r\n  conflict_type: string;\r\n  description: string;\r\n  is_resolved: boolean;\r\n  resolution_notes: string | null;\r\n  time_slot?: {\r\n    name: string;\r\n    start_time: string;\r\n    end_time: string;\r\n  };\r\n  courses: {\r\n    scheduled_course_id: string;\r\n    course_id: string;\r\n    course_name: string;\r\n    professor_id: string;\r\n    professor_name: string;\r\n  }[];\r\n}\r\n\r\nexport interface ConflictResolution {\r\n  action: 'ACCEPT' | 'OVERRIDE';\r\n  notes: string;\r\n}\r\n\r\nexport interface ScheduleOverride {\r\n  conflictId: string;\r\n  professorId: string;\r\n  timeSlotId: string;\r\n  dayOfWeek: string;\r\n  reason: string;\r\n}\r\n\r\n// Get active schedule for a semester\r\nexport const getActiveSchedule = async (semesterId: string): Promise<Schedule> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    console.log(`Fetching active schedule for semester: ${semesterId}`);\r\n\r\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}/active`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // If no active schedule exists, throw an error to be handled by caller\r\n      if (response.status === 404) {\r\n        console.error('No active schedule found for this semester');\r\n        throw new Error('No active schedule found for this semester');\r\n      }\r\n      console.error(`Failed to fetch active schedule: ${response.status} ${response.statusText}`);\r\n      throw new Error('Failed to fetch active schedule');\r\n    }\r\n\r\n    const schedule = await response.json();\r\n    console.log(`Retrieved active schedule: ${schedule.schedule_id} with ${schedule.ScheduledCourses?.length || 0} courses`);\r\n    \r\n    // Process the scheduled courses to match our frontend model\r\n    const formattedCourses = schedule.ScheduledCourses?.map((sc: any) => ({\r\n      scheduled_course_id: sc.scheduled_course_id,\r\n      schedule_id: sc.schedule_id,\r\n      course_id: sc.Course?.course_id,\r\n      course_name: sc.Course?.course_name,\r\n      professor_id: sc.Professor?.professor_id,\r\n      professor_name: `${sc.Professor?.first_name || ''} ${sc.Professor?.last_name || ''}`.trim(),\r\n      timeslot_id: sc.timeslot_id,\r\n      day_of_week: sc.day_of_week,\r\n      time_slot_id: sc.timeslot_id,\r\n      is_core: sc.Course?.is_core || false,\r\n      is_override: sc.is_override || false,\r\n      override_reason: sc.override_reason,\r\n      created_at: sc.created_at,\r\n      updated_at: sc.updated_at,\r\n      department_id: sc.Course?.department_id\r\n    })) || [];\r\n    \r\n    return {\r\n      ...schedule,\r\n      schedule_id: schedule.schedule_id, // Ensure this is explicitly set\r\n      semester_id: schedule.semester_id,\r\n      semester_name: schedule.Semester?.name || 'Unknown',\r\n      name: schedule.name,\r\n      is_final: schedule.is_final,\r\n      courses: formattedCourses, // This is crucial\r\n      conflicts: [], // Conflicts will be fetched separately\r\n      created_at: schedule.created_at,\r\n      updated_at: schedule.updated_at\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error(`Error in getActiveSchedule for semester ${semesterId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all schedules for a semester\r\nexport const getSchedulesBySemester = async (semesterId: string): Promise<Schedule[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedules by semester');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getSchedulesBySemester for semester ${semesterId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get schedule by ID with courses\r\nexport const getScheduleById = async (id: string): Promise<Schedule> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/${id}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedule');\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Format the data to match the expected structure\r\n    const formattedCourses = data.ScheduledCourses?.map((sc: any) => ({\r\n      scheduled_course_id: sc.scheduled_course_id,\r\n      schedule_id: sc.schedule_id,\r\n      course_id: sc.Course?.course_id,\r\n      course_name: sc.Course?.course_name,\r\n      professor_id: sc.Professor?.professor_id,\r\n      professor_name: `${sc.Professor?.first_name} ${sc.Professor?.last_name}`,\r\n      timeslot_id: sc.timeslot_id,\r\n      day_of_week: sc.day_of_week,\r\n      time_slot_id: sc.timeslot_id,\r\n      room: sc.room || \"TBA\",\r\n      is_core: sc.Course?.is_core || false,\r\n      is_override: sc.is_override,\r\n      override_reason: sc.override_reason,\r\n      created_at: sc.created_at,\r\n      updated_at: sc.updated_at,\r\n      department_id: sc.Course?.department_id\r\n    })) || [];\r\n    \r\n    return {\r\n      ...data,\r\n      semester_name: data.Semester?.name || \"Unknown Semester\",\r\n      courses: formattedCourses\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error in getScheduleById for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get conflicts for a schedule\r\nexport const getScheduleConflicts = async (scheduleId: string): Promise<Conflict[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/conflicts`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedule conflicts');\r\n    }\r\n\r\n    const conflicts = await response.json();\r\n    \r\n    // Format conflicts to match the expected structure\r\n    return conflicts.map((conflict: any) => {\r\n      const courses = conflict.ScheduledCourses?.map((sc: any) => ({\r\n        scheduled_course_id: sc.scheduled_course_id,\r\n        course_id: sc.Course?.course_id,\r\n        course_name: sc.Course?.course_name,\r\n        professor_id: sc.Professor?.professor_id,\r\n        professor_name: `${sc.Professor?.first_name} ${sc.Professor?.last_name}`\r\n      })) || [];\r\n      \r\n      const timeSlot = {\r\n        name: conflict.TimeSlot?.name || '',\r\n        start_time: conflict.TimeSlot?.start_time || '',\r\n        end_time: conflict.TimeSlot?.end_time || ''\r\n      };\r\n      \r\n      return {\r\n        conflict_id: conflict.conflict_id,\r\n        schedule_id: conflict.schedule_id,\r\n        timeslot_id: conflict.timeslot_id,\r\n        day_of_week: conflict.day_of_week,\r\n        conflict_type: conflict.conflict_type,\r\n        description: conflict.description,\r\n        is_resolved: conflict.is_resolved,\r\n        resolution_notes: conflict.resolution_notes,\r\n        time_slot: timeSlot,\r\n        courses: courses\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error fetching conflicts for schedule ${scheduleId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Resolve a conflict\r\nexport const resolveConflict = async (conflictId: string, resolution: ConflictResolution): Promise<any> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/conflicts/${conflictId}/resolve`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(resolution)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to resolve conflict');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error resolving conflict ${conflictId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Override a scheduled course\r\nexport const overrideScheduledCourse = async (\r\n  scheduleId: string, \r\n  overrideData: ScheduleOverride\r\n): Promise<any> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/override`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(overrideData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to override scheduled course');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error overriding course in schedule ${scheduleId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// In scheduleService.ts - update the generateSchedule function\r\nexport const generateSchedule = async (semesterId: string, name: string): Promise<Schedule> => {\r\n  try {\r\n    console.log(`Generating schedule for semester ${semesterId} with name: ${name}`);\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      throw new Error('Authentication token is missing');\r\n    }\r\n    \r\n    const response = await fetch(`${API_URL}/scheduler/generate`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ semester_id: semesterId, name })\r\n    });\r\n\r\n    console.log('Response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error('Error response from server:', errorData);\r\n      throw new Error(errorData.message || 'Failed to generate schedule');\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Successfully generated schedule:', data);\r\n    return data.schedule;\r\n  } catch (error) {\r\n    console.error('Error generating schedule:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const forceScheduleRefresh = async (scheduleId: string): Promise<boolean> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    console.log(`Force refreshing schedule: ${scheduleId}`);\r\n    \r\n    // Make a direct call to get this specific schedule\r\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(`Failed to refresh schedule ${scheduleId}: ${response.status}`);\r\n      return false;\r\n    }\r\n\r\n    console.log(`Successfully refreshed schedule: ${scheduleId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error refreshing schedule ${scheduleId}:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst scheduleService = {\r\n  getActiveSchedule,\r\n  getSchedulesBySemester,\r\n  getScheduleById,\r\n  getScheduleConflicts,\r\n  resolveConflict,\r\n  overrideScheduledCourse,\r\n  generateSchedule,\r\n  forceScheduleRefresh  // Add this line\r\n};\r\n\r\nexport default scheduleService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}