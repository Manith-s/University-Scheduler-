{"ast":null,"code":"// src/services/conflictService.ts\n\n// Define the base API URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Types\n\n// Fetch all conflicts\nexport const getAllConflicts = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/conflicts`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch conflicts');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in getAllConflicts:', error);\n    return [];\n  }\n};\n\n// Get conflicts for a specific schedule\nexport const getConflictsBySchedule = async scheduleId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/conflicts`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedule conflicts');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getConflictsBySchedule for schedule ID ${scheduleId}:`, error);\n    return [];\n  }\n};\n\n// Get conflict details\nexport const getConflictById = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/conflicts/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch conflict details');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getConflictById for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Resolve a conflict\nexport const resolveConflict = async (conflictId, resolution) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/conflicts/${conflictId}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(resolution)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to resolve conflict');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in resolveConflict for ID ${conflictId}:`, error);\n    throw error;\n  }\n};\n\n// Get conflict resolution suggestions\nexport const getConflictSuggestions = async conflictId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/conflicts/${conflictId}/suggestions`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch conflict resolution suggestions');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getConflictSuggestions for ID ${conflictId}:`, error);\n    return [];\n  }\n};\nconst conflictService = {\n  getAllConflicts,\n  getConflictsBySchedule,\n  getConflictById,\n  resolveConflict,\n  getConflictSuggestions\n};\nexport default conflictService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getAllConflicts","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","error","console","getConflictsBySchedule","scheduleId","getConflictById","id","resolveConflict","conflictId","resolution","method","body","JSON","stringify","getConflictSuggestions","conflictService"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/conflictService.ts"],"sourcesContent":["// src/services/conflictService.ts\r\n\r\n// Define the base API URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Types\r\nexport interface Conflict {\r\n  conflict_id: string;\r\n  schedule_id: string;\r\n  timeslot_id?: string;\r\n  day_of_week?: string;\r\n  conflict_type: string; // e.g., \"NO_AVAILABLE_SLOT\", \"TIME_SLOT_CONFLICT\"\r\n  description: string;\r\n  is_resolved: boolean;\r\n  resolution_notes?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ConflictDetail extends Conflict {\r\n  courses: any[]; // The courses involved in the conflict\r\n  schedule?: any;\r\n}\r\n\r\n// Fetch all conflicts\r\nexport const getAllConflicts = async (): Promise<Conflict[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/conflicts`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch conflicts');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in getAllConflicts:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get conflicts for a specific schedule\r\nexport const getConflictsBySchedule = async (scheduleId: string): Promise<Conflict[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/conflicts`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedule conflicts');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getConflictsBySchedule for schedule ID ${scheduleId}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get conflict details\r\nexport const getConflictById = async (id: string): Promise<ConflictDetail> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/conflicts/${id}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch conflict details');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getConflictById for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Resolve a conflict\r\nexport const resolveConflict = async (\r\n  conflictId: string, \r\n  resolution: { \r\n    resolution_notes: string, \r\n    changes?: any \r\n  }\r\n): Promise<Conflict> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/conflicts/${conflictId}/resolve`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(resolution)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to resolve conflict');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in resolveConflict for ID ${conflictId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get conflict resolution suggestions\r\nexport const getConflictSuggestions = async (conflictId: string): Promise<any[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/conflicts/${conflictId}/suggestions`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch conflict resolution suggestions');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getConflictSuggestions for ID ${conflictId}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst conflictService = {\r\n  getAllConflicts,\r\n  getConflictsBySchedule,\r\n  getConflictById,\r\n  resolveConflict,\r\n  getConflictSuggestions\r\n};\r\n\r\nexport default conflictService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}