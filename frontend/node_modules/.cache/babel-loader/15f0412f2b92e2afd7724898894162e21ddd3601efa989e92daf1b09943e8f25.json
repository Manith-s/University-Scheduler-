{"ast":null,"code":"// src/services/timeSlotService.ts\n\n// Add TimeSlot type definition at the top\n\n//const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\nconst timeSlotService = {\n  getAllTimeSlots: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/time-slots`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch time slots');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching time slots:', error);\n      // Return mock data for development\n      return [{\n        timeslot_id: \"TS1-MON\",\n        name: \"Morning 1\",\n        start_time: \"09:10:00\",\n        end_time: \"10:05:00\",\n        duration_minutes: 55,\n        day_of_week: \"Monday\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }, {\n        timeslot_id: \"TS2-MON\",\n        name: \"Morning 2\",\n        start_time: \"10:20:00\",\n        end_time: \"11:15:00\",\n        duration_minutes: 55,\n        day_of_week: \"Monday\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }];\n    }\n  },\n  getTimeSlotById: async id => {\n    // Mock implementation\n    return {\n      timeslot_id: id,\n      name: \"Sample Time Slot\",\n      start_time: \"09:00:00\",\n      end_time: \"10:30:00\",\n      duration_minutes: 90,\n      day_of_week: \"Monday\",\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n  },\n  getTimeSlotsByDay: async day => {\n    // Mock implementation\n    return [{\n      timeslot_id: `TS1-${day.substring(0, 3).toUpperCase()}`,\n      name: \"Sample Time Slot\",\n      start_time: \"09:00:00\",\n      end_time: \"10:30:00\",\n      duration_minutes: 90,\n      day_of_week: day,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }];\n  }\n};\nexport default timeSlotService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","timeSlotService","getAllTimeSlots","token","localStorage","getItem","response","fetch","headers","ok","Error","json","error","console","timeslot_id","name","start_time","end_time","duration_minutes","day_of_week","created_at","Date","toISOString","updated_at","getTimeSlotById","id","getTimeSlotsByDay","day","substring","toUpperCase"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/timeSlotService.ts"],"sourcesContent":["// src/services/timeSlotService.ts\r\n\r\n// Add TimeSlot type definition at the top\r\nexport interface TimeSlot {\r\n  timeslot_id: string;\r\n  name: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  duration_minutes: number;\r\n  day_of_week: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n//const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\nconst timeSlotService = {\r\n  getAllTimeSlots: async (): Promise<TimeSlot[]> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`${API_URL}/time-slots`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch time slots');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching time slots:', error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          timeslot_id: \"TS1-MON\",\r\n          name: \"Morning 1\",\r\n          start_time: \"09:10:00\",\r\n          end_time: \"10:05:00\",\r\n          duration_minutes: 55,\r\n          day_of_week: \"Monday\",\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        },\r\n        {\r\n          timeslot_id: \"TS2-MON\",\r\n          name: \"Morning 2\",\r\n          start_time: \"10:20:00\",\r\n          end_time: \"11:15:00\",\r\n          duration_minutes: 55,\r\n          day_of_week: \"Monday\",\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        }\r\n      ];\r\n    }\r\n  },\r\n\r\n  getTimeSlotById: async (id: string): Promise<TimeSlot> => {\r\n    // Mock implementation\r\n    return {\r\n      timeslot_id: id,\r\n      name: \"Sample Time Slot\",\r\n      start_time: \"09:00:00\",\r\n      end_time: \"10:30:00\",\r\n      duration_minutes: 90,\r\n      day_of_week: \"Monday\",\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n  },\r\n\r\n  getTimeSlotsByDay: async (day: string): Promise<TimeSlot[]> => {\r\n    // Mock implementation\r\n    return [{\r\n      timeslot_id: `TS1-${day.substring(0,3).toUpperCase()}`,\r\n      name: \"Sample Time Slot\",\r\n      start_time: \"09:00:00\",\r\n      end_time: \"10:30:00\",\r\n      duration_minutes: 90,\r\n      day_of_week: day,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    }];\r\n  }\r\n};\r\n\r\nexport default timeSlotService;"],"mappings":"AAAA;;AAEA;;AAYA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,eAAe,GAAG;EACtBC,eAAe,EAAE,MAAAA,CAAA,KAAiC;IAChD,IAAI;MACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,OAAO,aAAa,EAAE;QACpDW,OAAO,EAAE;UACP,eAAe,EAAE,UAAUL,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD;MACA,OAAO,CACL;QACEE,WAAW,EAAE,SAAS;QACtBC,IAAI,EAAE,WAAW;QACjBC,UAAU,EAAE,UAAU;QACtBC,QAAQ,EAAE,UAAU;QACpBC,gBAAgB,EAAE,EAAE;QACpBC,WAAW,EAAE,QAAQ;QACrBC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACpCC,UAAU,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC,EACD;QACER,WAAW,EAAE,SAAS;QACtBC,IAAI,EAAE,WAAW;QACjBC,UAAU,EAAE,UAAU;QACtBC,QAAQ,EAAE,UAAU;QACpBC,gBAAgB,EAAE,EAAE;QACpBC,WAAW,EAAE,QAAQ;QACrBC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACpCC,UAAU,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC,CACF;IACH;EACF,CAAC;EAEDE,eAAe,EAAE,MAAOC,EAAU,IAAwB;IACxD;IACA,OAAO;MACLX,WAAW,EAAEW,EAAE;MACfV,IAAI,EAAE,kBAAkB;MACxBC,UAAU,EAAE,UAAU;MACtBC,QAAQ,EAAE,UAAU;MACpBC,gBAAgB,EAAE,EAAE;MACpBC,WAAW,EAAE,QAAQ;MACrBC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACpCC,UAAU,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACrC,CAAC;EACH,CAAC;EAEDI,iBAAiB,EAAE,MAAOC,GAAW,IAA0B;IAC7D;IACA,OAAO,CAAC;MACNb,WAAW,EAAE,OAAOa,GAAG,CAACC,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE;MACtDd,IAAI,EAAE,kBAAkB;MACxBC,UAAU,EAAE,UAAU;MACtBC,QAAQ,EAAE,UAAU;MACpBC,gBAAgB,EAAE,EAAE;MACpBC,WAAW,EAAEQ,GAAG;MAChBP,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACpCC,UAAU,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACrC,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAerB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}