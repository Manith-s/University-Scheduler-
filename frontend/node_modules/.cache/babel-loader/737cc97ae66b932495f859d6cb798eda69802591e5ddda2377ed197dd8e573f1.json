{"ast":null,"code":"// src/services/professorService.ts\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define the base API URL - not used in mock data but kept for compatibility\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Types\n\n// Mock data that matches existing department and course data in your database\nconst MOCK_PROFESSORS = [\n// Finance Department professors\n{\n  professor_id: 'PROF-efe3da81',\n  department_id: 'Finance',\n  first_name: 'John',\n  last_name: 'Doe',\n  email: 'john.doe@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Fall', 'Spring'],\n  course_ids: ['Finance Analytics', 'Investment Banking'],\n  created_at: '2024-01-15T10:00:00Z',\n  updated_at: '2024-01-15T10:00:00Z'\n}, {\n  professor_id: 'PROF-7b8e9f01',\n  department_id: 'Finance',\n  first_name: 'Jane',\n  last_name: 'Smith',\n  email: 'jane.smith@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Fall'],\n  course_ids: ['Corporate Finance', 'Finance Analytics'],\n  created_at: '2024-01-16T10:00:00Z',\n  updated_at: '2024-01-16T10:00:00Z'\n}, {\n  professor_id: 'PROF-2c3d4e5f',\n  department_id: 'Finance',\n  first_name: 'Robert',\n  last_name: 'Johnson',\n  email: 'robert.johnson@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Spring'],\n  course_ids: ['Investment Banking', 'Financial Markets'],\n  created_at: '2024-01-17T10:00:00Z',\n  updated_at: '2024-01-17T10:00:00Z'\n},\n// Marketing professors\n{\n  professor_id: 'PROF-a1b2c3d4',\n  department_id: 'Marketing',\n  first_name: 'Emily',\n  last_name: 'Williams',\n  email: 'emily.williams@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Fall', 'Spring'],\n  course_ids: ['Digital Marketing', 'Marketing Analytics'],\n  created_at: '2024-01-18T10:00:00Z',\n  updated_at: '2024-01-18T10:00:00Z'\n}, {\n  professor_id: 'PROF-5f6g7h8i',\n  department_id: 'Marketing',\n  first_name: 'Michael',\n  last_name: 'Brown',\n  email: 'michael.brown@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Fall'],\n  course_ids: ['Brand Management', 'Consumer Behavior'],\n  created_at: '2024-01-19T10:00:00Z',\n  updated_at: '2024-01-19T10:00:00Z'\n},\n// Business Analytics professors\n{\n  professor_id: 'PROF-9j0k1l2m',\n  department_id: 'Business Analytics',\n  first_name: 'Sarah',\n  last_name: 'Davis',\n  email: 'sarah.davis@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Fall', 'Spring'],\n  course_ids: ['Data Visualization', 'Business Intelligence'],\n  created_at: '2024-01-20T10:00:00Z',\n  updated_at: '2024-01-20T10:00:00Z'\n}, {\n  professor_id: 'PROF-3n4o5p6q',\n  department_id: 'Business Analytics',\n  first_name: 'David',\n  last_name: 'Miller',\n  email: 'david.miller@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Spring'],\n  course_ids: ['Machine Learning for Business', 'Data Mining'],\n  created_at: '2024-01-21T10:00:00Z',\n  updated_at: '2024-01-21T10:00:00Z'\n},\n// Information Systems professors\n{\n  professor_id: 'PROF-7r8s9t0u',\n  department_id: 'Information Systems',\n  first_name: 'James',\n  last_name: 'Wilson',\n  email: 'james.wilson@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Fall'],\n  course_ids: ['Database Management', 'Systems Analysis'],\n  created_at: '2024-01-22T10:00:00Z',\n  updated_at: '2024-01-22T10:00:00Z'\n}, {\n  professor_id: 'PROF-1v2w3x4y',\n  department_id: 'Information Systems',\n  first_name: 'Jennifer',\n  last_name: 'Taylor',\n  email: 'jennifer.taylor@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Fall', 'Spring'],\n  course_ids: ['IT Project Management', 'Enterprise Architecture'],\n  created_at: '2024-01-23T10:00:00Z',\n  updated_at: '2024-01-23T10:00:00Z'\n},\n// Management professors\n{\n  professor_id: 'PROF-5z6a7b8c',\n  department_id: 'Management',\n  first_name: 'Thomas',\n  last_name: 'Anderson',\n  email: 'thomas.anderson@example.com',\n  password_hash: 'hashed_password',\n  semesters: ['Spring'],\n  course_ids: ['Organizational Behavior', 'Strategic Management'],\n  created_at: '2024-01-24T10:00:00Z',\n  updated_at: '2024-01-24T10:00:00Z'\n}];\n\n// Mock availability data\nconst MOCK_AVAILABILITY = [\n// John Doe (Finance)\n{\n  availability_id: 'AVAIL-1a2b3c4d',\n  professor_id: 'PROF-efe3da81',\n  timeslot_id: 'TS1-MON',\n  day_of_week: 'Monday',\n  is_available: true,\n  created_at: '2024-01-15T10:00:00Z',\n  updated_at: '2024-01-15T10:00:00Z'\n}, {\n  availability_id: 'AVAIL-2b3c4d5e',\n  professor_id: 'PROF-efe3da81',\n  timeslot_id: 'TS2-MON',\n  day_of_week: 'Monday',\n  is_available: true,\n  created_at: '2024-01-15T10:00:00Z',\n  updated_at: '2024-01-15T10:00:00Z'\n}, {\n  availability_id: 'AVAIL-3c4d5e6f',\n  professor_id: 'PROF-efe3da81',\n  timeslot_id: 'TS3-TUE',\n  day_of_week: 'Tuesday',\n  is_available: false,\n  created_at: '2024-01-15T10:00:00Z',\n  updated_at: '2024-01-15T10:00:00Z'\n}, {\n  availability_id: 'AVAIL-4d5e6f7g',\n  professor_id: 'PROF-efe3da81',\n  timeslot_id: 'TS1-WED',\n  day_of_week: 'Wednesday',\n  is_available: true,\n  created_at: '2024-01-15T10:00:00Z',\n  updated_at: '2024-01-15T10:00:00Z'\n},\n// Jane Smith (Finance)\n{\n  availability_id: 'AVAIL-5e6f7g8h',\n  professor_id: 'PROF-7b8e9f01',\n  timeslot_id: 'TS1-MON',\n  day_of_week: 'Monday',\n  is_available: false,\n  created_at: '2024-01-16T10:00:00Z',\n  updated_at: '2024-01-16T10:00:00Z'\n}, {\n  availability_id: 'AVAIL-6f7g8h9i',\n  professor_id: 'PROF-7b8e9f01',\n  timeslot_id: 'TS2-MON',\n  day_of_week: 'Monday',\n  is_available: true,\n  created_at: '2024-01-16T10:00:00Z',\n  updated_at: '2024-01-16T10:00:00Z'\n},\n// Robert Johnson (Finance)\n{\n  availability_id: 'AVAIL-7g8h9i0j',\n  professor_id: 'PROF-2c3d4e5f',\n  timeslot_id: 'TS1-TUE',\n  day_of_week: 'Tuesday',\n  is_available: true,\n  created_at: '2024-01-17T10:00:00Z',\n  updated_at: '2024-01-17T10:00:00Z'\n}, {\n  availability_id: 'AVAIL-8h9i0j1k',\n  professor_id: 'PROF-2c3d4e5f',\n  timeslot_id: 'TS2-TUE',\n  day_of_week: 'Tuesday',\n  is_available: true,\n  created_at: '2024-01-17T10:00:00Z',\n  updated_at: '2024-01-17T10:00:00Z'\n},\n// Additional availabilities for other professors\n{\n  availability_id: 'AVAIL-9i0j1k2l',\n  professor_id: 'PROF-a1b2c3d4',\n  timeslot_id: 'TS1-MON',\n  day_of_week: 'Monday',\n  is_available: true,\n  created_at: '2024-01-18T10:00:00Z',\n  updated_at: '2024-01-18T10:00:00Z'\n}, {\n  availability_id: 'AVAIL-0j1k2l3m',\n  professor_id: 'PROF-a1b2c3d4',\n  timeslot_id: 'TS1-WED',\n  day_of_week: 'Wednesday',\n  is_available: true,\n  created_at: '2024-01-18T10:00:00Z',\n  updated_at: '2024-01-18T10:00:00Z'\n}];\n\n// Helper functions\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst randomDelay = () => delay(Math.random() * 300 + 100); // Random delay between 100-400ms\n\n// Fetch all professors\nexport const getAllProfessors = async () => {\n  try {\n    // Simulate API delay\n    await randomDelay();\n    return [...MOCK_PROFESSORS];\n  } catch (error) {\n    console.error('Error in getAllProfessors:', error);\n    throw error;\n  }\n};\n\n// Fetch professors by department\nexport const getProfessorsByDepartment = async departmentId => {\n  try {\n    await randomDelay();\n    return MOCK_PROFESSORS.filter(professor => professor.department_id === departmentId);\n  } catch (error) {\n    console.error(`Error in getProfessorsByDepartment for departmentId ${departmentId}:`, error);\n    throw error;\n  }\n};\n\n// Fetch professors by course\nexport const getProfessorsByCourse = async courseId => {\n  try {\n    await randomDelay();\n    return MOCK_PROFESSORS.filter(professor => {\n      var _professor$course_ids;\n      return (_professor$course_ids = professor.course_ids) === null || _professor$course_ids === void 0 ? void 0 : _professor$course_ids.includes(courseId);\n    });\n  } catch (error) {\n    console.error(`Error in getProfessorsByCourse for courseId ${courseId}:`, error);\n    throw error;\n  }\n};\n\n// Fetch a single professor by ID\nexport const getProfessorById = async id => {\n  try {\n    console.log(`Mock service: getProfessorById called with ID ${id}`);\n    await randomDelay();\n    const professor = MOCK_PROFESSORS.find(p => p.professor_id === id);\n\n    // Mock department data to prevent 404 errors when fetching department info\n    const mockDepartment = {\n      department_id: (professor === null || professor === void 0 ? void 0 : professor.department_id) || 'Finance',\n      name: `${(professor === null || professor === void 0 ? void 0 : professor.department_id) || 'Finance'} Department`,\n      description: 'Department description',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n\n    // Mock course data\n    const mockCourses = ((professor === null || professor === void 0 ? void 0 : professor.course_ids) || ['Finance Analytics']).map(courseId => ({\n      course_id: courseId,\n      course_name: courseId,\n      department_id: (professor === null || professor === void 0 ? void 0 : professor.department_id) || 'Finance',\n      is_core: true,\n      duration_minutes: 60,\n      semester: 'Fall',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }));\n    if (!professor) {\n      console.log(`Professor not found with ID ${id}, returning mock data`);\n      // Instead of throwing an error, return mock data for any ID\n      return {\n        professor_id: id,\n        department_id: 'Finance',\n        first_name: 'Default',\n        last_name: 'Professor',\n        email: 'default.professor@example.com',\n        password_hash: 'hashed_password',\n        semesters: ['Fall', 'Spring'],\n        course_ids: ['Finance Analytics'],\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        department: mockDepartment,\n        courses: mockCourses,\n        availabilities: [{\n          availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\n          professor_id: id,\n          timeslot_id: 'TS1-MON',\n          day_of_week: 'Monday',\n          is_available: true,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }, {\n          availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\n          professor_id: id,\n          timeslot_id: 'TS2-MON',\n          day_of_week: 'Monday',\n          is_available: true,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }]\n      };\n    }\n\n    // Add availabilities to the professor details\n    const availabilities = MOCK_AVAILABILITY.filter(a => a.professor_id === id);\n\n    // If no availabilities found, create some mock ones\n    const professorAvailabilities = availabilities.length > 0 ? availabilities : [{\n      availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\n      professor_id: id,\n      timeslot_id: 'TS1-MON',\n      day_of_week: 'Monday',\n      is_available: true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }, {\n      availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\n      professor_id: id,\n      timeslot_id: 'TS2-MON',\n      day_of_week: 'Monday',\n      is_available: true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }, {\n      availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\n      professor_id: id,\n      timeslot_id: 'TS3-TUE',\n      day_of_week: 'Tuesday',\n      is_available: false,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }];\n    return {\n      ...professor,\n      department: mockDepartment,\n      courses: mockCourses,\n      availabilities: professorAvailabilities\n    };\n  } catch (error) {\n    console.error(`Error in getProfessorById for ID ${id}:`, error);\n    // Instead of propagating the error, return mock data\n    return {\n      professor_id: id,\n      department_id: 'Finance',\n      first_name: 'Fallback',\n      last_name: 'Professor',\n      email: 'fallback.professor@example.com',\n      password_hash: 'hashed_password',\n      semesters: ['Fall'],\n      course_ids: ['Finance Analytics'],\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      department: {\n        department_id: 'Finance',\n        name: 'Finance Department',\n        description: 'Department description',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      },\n      courses: [{\n        course_id: 'Finance Analytics',\n        course_name: 'Finance Analytics',\n        department_id: 'Finance',\n        is_core: true,\n        duration_minutes: 60,\n        semester: 'Fall',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }],\n      availabilities: []\n    };\n  }\n};\n\n// Get professor availability\nexport const getProfessorAvailability = async professorId => {\n  try {\n    await randomDelay();\n    const availabilities = MOCK_AVAILABILITY.filter(a => a.professor_id === professorId);\n    return availabilities;\n  } catch (error) {\n    console.error(`Error in getProfessorAvailability for professor ID ${professorId}:`, error);\n    throw error;\n  }\n};\n\n// Set professor availability\nexport const setProfessorAvailability = async (professorId, availabilities) => {\n  try {\n    await randomDelay();\n\n    // In a real implementation, this would update the database\n    // For the mock, we'll just return the input availabilities with IDs\n    const updatedAvailabilities = availabilities.map(a => ({\n      ...a,\n      availability_id: a.availability_id || `AVAIL-${uuidv4().substring(0, 8)}`,\n      professor_id: professorId,\n      created_at: a.created_at || new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }));\n    return updatedAvailabilities;\n  } catch (error) {\n    console.error(`Error in setProfessorAvailability for professor ID ${professorId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new professor\nexport const createProfessor = async professor => {\n  try {\n    await randomDelay();\n\n    // Generate ID if not provided\n    if (!professor.professor_id) {\n      professor.professor_id = `PROF-${uuidv4().substring(0, 8)}`;\n    }\n\n    // Ensure course_ids is an array\n    if (!professor.course_ids) {\n      professor.course_ids = [];\n    }\n\n    // Create timestamp\n    const timestamp = new Date().toISOString();\n\n    // Create new professor object\n    const newProfessor = {\n      ...professor,\n      created_at: timestamp,\n      updated_at: timestamp\n    };\n\n    // In a real implementation, this would add to the database\n    // For the mock, we'll just return the new professor\n    return newProfessor;\n  } catch (error) {\n    console.error('Error in createProfessor:', error);\n    throw error;\n  }\n};\n\n// Update an existing professor\nexport const updateProfessor = async (id, professor) => {\n  try {\n    await randomDelay();\n\n    // Find existing professor\n    const existingProfessor = MOCK_PROFESSORS.find(p => p.professor_id === id);\n    if (!existingProfessor) {\n      throw new Error('Professor not found');\n    }\n\n    // Ensure course_ids is an array\n    if (!professor.course_ids) {\n      professor.course_ids = [];\n    }\n\n    // Update professor\n    const updatedProfessor = {\n      ...existingProfessor,\n      ...professor,\n      updated_at: new Date().toISOString()\n    };\n\n    // In a real implementation, this would update the database\n    // For the mock, we'll just return the updated professor\n    return updatedProfessor;\n  } catch (error) {\n    console.error(`Error in updateProfessor for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a professor\nexport const deleteProfessor = async id => {\n  try {\n    await randomDelay();\n\n    // In a real implementation, this would delete from the database\n    // For the mock, we'll just return success\n    return {\n      success: true,\n      message: 'Professor deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Error in deleteProfessor for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple professors\nexport const deleteProfessors = async ids => {\n  try {\n    await randomDelay();\n\n    // In a real implementation, this would delete from the database\n    // For the mock, we'll just return success\n    return {\n      success: true,\n      message: 'Professors deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Error in deleteProfessors:`, error);\n    throw error;\n  }\n};\n\n// Assign courses to a professor\nexport const assignCoursesToProfessor = async (professorId, courseIds) => {\n  try {\n    await randomDelay();\n\n    // Find existing professor\n    const existingProfessor = MOCK_PROFESSORS.find(p => p.professor_id === professorId);\n    if (!existingProfessor) {\n      throw new Error('Professor not found');\n    }\n\n    // Filter out any empty course selections\n    const validCourseIds = courseIds.filter(id => id !== '');\n\n    // Update professor\n    const updatedProfessor = {\n      ...existingProfessor,\n      course_ids: validCourseIds,\n      updated_at: new Date().toISOString()\n    };\n\n    // In a real implementation, this would update the database\n    // For the mock, we'll just return the updated professor\n    return updatedProfessor;\n  } catch (error) {\n    console.error(`Error in assignCoursesToProfessor for professor ID ${professorId}:`, error);\n    throw error;\n  }\n};\nconst professorService = {\n  getAllProfessors,\n  getProfessorsByDepartment,\n  getProfessorsByCourse,\n  getProfessorById,\n  getProfessorAvailability,\n  setProfessorAvailability,\n  createProfessor,\n  updateProfessor,\n  deleteProfessor,\n  deleteProfessors,\n  assignCoursesToProfessor\n};\nexport default professorService;","map":{"version":3,"names":["v4","uuidv4","API_URL","process","env","REACT_APP_API_URL","MOCK_PROFESSORS","professor_id","department_id","first_name","last_name","email","password_hash","semesters","course_ids","created_at","updated_at","MOCK_AVAILABILITY","availability_id","timeslot_id","day_of_week","is_available","delay","ms","Promise","resolve","setTimeout","randomDelay","Math","random","getAllProfessors","error","console","getProfessorsByDepartment","departmentId","filter","professor","getProfessorsByCourse","courseId","_professor$course_ids","includes","getProfessorById","id","log","find","p","mockDepartment","name","description","Date","toISOString","mockCourses","map","course_id","course_name","is_core","duration_minutes","semester","department","courses","availabilities","substring","a","professorAvailabilities","length","getProfessorAvailability","professorId","setProfessorAvailability","updatedAvailabilities","createProfessor","timestamp","newProfessor","updateProfessor","existingProfessor","Error","updatedProfessor","deleteProfessor","success","message","deleteProfessors","ids","assignCoursesToProfessor","courseIds","validCourseIds","professorService"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/professorService.ts"],"sourcesContent":["// src/services/professorService.ts\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Define the base API URL - not used in mock data but kept for compatibility\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Types\r\nexport interface Professor {\r\n  professor_id: string;\r\n  department_id: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  password_hash: string;\r\n  semesters?: string[];    // For semester availability\r\n  course_ids?: string[];   // For multiple course assignments\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProfessorAvailability {\r\n  availability_id: string;\r\n  professor_id: string;\r\n  timeslot_id: string;\r\n  day_of_week: string;\r\n  is_available: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProfessorDetail extends Professor {\r\n  department?: any;\r\n  courses?: any[];\r\n  availabilities?: ProfessorAvailability[];\r\n}\r\n\r\n// Mock data that matches existing department and course data in your database\r\nconst MOCK_PROFESSORS: Professor[] = [\r\n  // Finance Department professors\r\n  {\r\n    professor_id: 'PROF-efe3da81',\r\n    department_id: 'Finance',\r\n    first_name: 'John',\r\n    last_name: 'Doe',\r\n    email: 'john.doe@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Fall', 'Spring'],\r\n    course_ids: ['Finance Analytics', 'Investment Banking'],\r\n    created_at: '2024-01-15T10:00:00Z',\r\n    updated_at: '2024-01-15T10:00:00Z'\r\n  },\r\n  {\r\n    professor_id: 'PROF-7b8e9f01',\r\n    department_id: 'Finance',\r\n    first_name: 'Jane',\r\n    last_name: 'Smith',\r\n    email: 'jane.smith@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Fall'],\r\n    course_ids: ['Corporate Finance', 'Finance Analytics'],\r\n    created_at: '2024-01-16T10:00:00Z',\r\n    updated_at: '2024-01-16T10:00:00Z'\r\n  },\r\n  {\r\n    professor_id: 'PROF-2c3d4e5f',\r\n    department_id: 'Finance',\r\n    first_name: 'Robert',\r\n    last_name: 'Johnson',\r\n    email: 'robert.johnson@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Spring'],\r\n    course_ids: ['Investment Banking', 'Financial Markets'],\r\n    created_at: '2024-01-17T10:00:00Z',\r\n    updated_at: '2024-01-17T10:00:00Z'\r\n  },\r\n\r\n  // Marketing professors\r\n  {\r\n    professor_id: 'PROF-a1b2c3d4',\r\n    department_id: 'Marketing',\r\n    first_name: 'Emily',\r\n    last_name: 'Williams',\r\n    email: 'emily.williams@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Fall', 'Spring'],\r\n    course_ids: ['Digital Marketing', 'Marketing Analytics'],\r\n    created_at: '2024-01-18T10:00:00Z',\r\n    updated_at: '2024-01-18T10:00:00Z'\r\n  },\r\n  {\r\n    professor_id: 'PROF-5f6g7h8i',\r\n    department_id: 'Marketing',\r\n    first_name: 'Michael',\r\n    last_name: 'Brown',\r\n    email: 'michael.brown@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Fall'],\r\n    course_ids: ['Brand Management', 'Consumer Behavior'],\r\n    created_at: '2024-01-19T10:00:00Z',\r\n    updated_at: '2024-01-19T10:00:00Z'\r\n  },\r\n\r\n  // Business Analytics professors\r\n  {\r\n    professor_id: 'PROF-9j0k1l2m',\r\n    department_id: 'Business Analytics',\r\n    first_name: 'Sarah',\r\n    last_name: 'Davis',\r\n    email: 'sarah.davis@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Fall', 'Spring'],\r\n    course_ids: ['Data Visualization', 'Business Intelligence'],\r\n    created_at: '2024-01-20T10:00:00Z',\r\n    updated_at: '2024-01-20T10:00:00Z'\r\n  },\r\n  {\r\n    professor_id: 'PROF-3n4o5p6q',\r\n    department_id: 'Business Analytics',\r\n    first_name: 'David',\r\n    last_name: 'Miller',\r\n    email: 'david.miller@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Spring'],\r\n    course_ids: ['Machine Learning for Business', 'Data Mining'],\r\n    created_at: '2024-01-21T10:00:00Z',\r\n    updated_at: '2024-01-21T10:00:00Z'\r\n  },\r\n\r\n  // Information Systems professors\r\n  {\r\n    professor_id: 'PROF-7r8s9t0u',\r\n    department_id: 'Information Systems',\r\n    first_name: 'James',\r\n    last_name: 'Wilson',\r\n    email: 'james.wilson@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Fall'],\r\n    course_ids: ['Database Management', 'Systems Analysis'],\r\n    created_at: '2024-01-22T10:00:00Z',\r\n    updated_at: '2024-01-22T10:00:00Z'\r\n  },\r\n  {\r\n    professor_id: 'PROF-1v2w3x4y',\r\n    department_id: 'Information Systems',\r\n    first_name: 'Jennifer',\r\n    last_name: 'Taylor',\r\n    email: 'jennifer.taylor@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Fall', 'Spring'],\r\n    course_ids: ['IT Project Management', 'Enterprise Architecture'],\r\n    created_at: '2024-01-23T10:00:00Z',\r\n    updated_at: '2024-01-23T10:00:00Z'\r\n  },\r\n\r\n  // Management professors\r\n  {\r\n    professor_id: 'PROF-5z6a7b8c',\r\n    department_id: 'Management',\r\n    first_name: 'Thomas',\r\n    last_name: 'Anderson',\r\n    email: 'thomas.anderson@example.com',\r\n    password_hash: 'hashed_password',\r\n    semesters: ['Spring'],\r\n    course_ids: ['Organizational Behavior', 'Strategic Management'],\r\n    created_at: '2024-01-24T10:00:00Z',\r\n    updated_at: '2024-01-24T10:00:00Z'\r\n  }\r\n];\r\n\r\n// Mock availability data\r\nconst MOCK_AVAILABILITY: ProfessorAvailability[] = [\r\n  // John Doe (Finance)\r\n  {\r\n    availability_id: 'AVAIL-1a2b3c4d',\r\n    professor_id: 'PROF-efe3da81',\r\n    timeslot_id: 'TS1-MON',\r\n    day_of_week: 'Monday',\r\n    is_available: true,\r\n    created_at: '2024-01-15T10:00:00Z',\r\n    updated_at: '2024-01-15T10:00:00Z'\r\n  },\r\n  {\r\n    availability_id: 'AVAIL-2b3c4d5e',\r\n    professor_id: 'PROF-efe3da81',\r\n    timeslot_id: 'TS2-MON',\r\n    day_of_week: 'Monday',\r\n    is_available: true,\r\n    created_at: '2024-01-15T10:00:00Z',\r\n    updated_at: '2024-01-15T10:00:00Z'\r\n  },\r\n  {\r\n    availability_id: 'AVAIL-3c4d5e6f',\r\n    professor_id: 'PROF-efe3da81',\r\n    timeslot_id: 'TS3-TUE',\r\n    day_of_week: 'Tuesday',\r\n    is_available: false,\r\n    created_at: '2024-01-15T10:00:00Z',\r\n    updated_at: '2024-01-15T10:00:00Z'\r\n  },\r\n  {\r\n    availability_id: 'AVAIL-4d5e6f7g',\r\n    professor_id: 'PROF-efe3da81',\r\n    timeslot_id: 'TS1-WED',\r\n    day_of_week: 'Wednesday',\r\n    is_available: true,\r\n    created_at: '2024-01-15T10:00:00Z',\r\n    updated_at: '2024-01-15T10:00:00Z'\r\n  },\r\n  \r\n  // Jane Smith (Finance)\r\n  {\r\n    availability_id: 'AVAIL-5e6f7g8h',\r\n    professor_id: 'PROF-7b8e9f01',\r\n    timeslot_id: 'TS1-MON',\r\n    day_of_week: 'Monday',\r\n    is_available: false,\r\n    created_at: '2024-01-16T10:00:00Z',\r\n    updated_at: '2024-01-16T10:00:00Z'\r\n  },\r\n  {\r\n    availability_id: 'AVAIL-6f7g8h9i',\r\n    professor_id: 'PROF-7b8e9f01',\r\n    timeslot_id: 'TS2-MON',\r\n    day_of_week: 'Monday',\r\n    is_available: true,\r\n    created_at: '2024-01-16T10:00:00Z',\r\n    updated_at: '2024-01-16T10:00:00Z'\r\n  },\r\n  \r\n  // Robert Johnson (Finance)\r\n  {\r\n    availability_id: 'AVAIL-7g8h9i0j',\r\n    professor_id: 'PROF-2c3d4e5f',\r\n    timeslot_id: 'TS1-TUE',\r\n    day_of_week: 'Tuesday',\r\n    is_available: true,\r\n    created_at: '2024-01-17T10:00:00Z',\r\n    updated_at: '2024-01-17T10:00:00Z'\r\n  },\r\n  {\r\n    availability_id: 'AVAIL-8h9i0j1k',\r\n    professor_id: 'PROF-2c3d4e5f',\r\n    timeslot_id: 'TS2-TUE',\r\n    day_of_week: 'Tuesday',\r\n    is_available: true,\r\n    created_at: '2024-01-17T10:00:00Z',\r\n    updated_at: '2024-01-17T10:00:00Z'\r\n  },\r\n  \r\n  // Additional availabilities for other professors\r\n  {\r\n    availability_id: 'AVAIL-9i0j1k2l',\r\n    professor_id: 'PROF-a1b2c3d4',\r\n    timeslot_id: 'TS1-MON',\r\n    day_of_week: 'Monday',\r\n    is_available: true,\r\n    created_at: '2024-01-18T10:00:00Z',\r\n    updated_at: '2024-01-18T10:00:00Z'\r\n  },\r\n  {\r\n    availability_id: 'AVAIL-0j1k2l3m',\r\n    professor_id: 'PROF-a1b2c3d4',\r\n    timeslot_id: 'TS1-WED',\r\n    day_of_week: 'Wednesday',\r\n    is_available: true,\r\n    created_at: '2024-01-18T10:00:00Z',\r\n    updated_at: '2024-01-18T10:00:00Z'\r\n  }\r\n];\r\n\r\n// Helper functions\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\nconst randomDelay = () => delay(Math.random() * 300 + 100); // Random delay between 100-400ms\r\n\r\n// Fetch all professors\r\nexport const getAllProfessors = async (): Promise<Professor[]> => {\r\n  try {\r\n    // Simulate API delay\r\n    await randomDelay();\r\n    return [...MOCK_PROFESSORS];\r\n  } catch (error) {\r\n    console.error('Error in getAllProfessors:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch professors by department\r\nexport const getProfessorsByDepartment = async (departmentId: string): Promise<Professor[]> => {\r\n  try {\r\n    await randomDelay();\r\n    return MOCK_PROFESSORS.filter(professor => professor.department_id === departmentId);\r\n  } catch (error) {\r\n    console.error(`Error in getProfessorsByDepartment for departmentId ${departmentId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch professors by course\r\nexport const getProfessorsByCourse = async (courseId: string): Promise<Professor[]> => {\r\n  try {\r\n    await randomDelay();\r\n    return MOCK_PROFESSORS.filter(\r\n      professor => professor.course_ids?.includes(courseId)\r\n    );\r\n  } catch (error) {\r\n    console.error(`Error in getProfessorsByCourse for courseId ${courseId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch a single professor by ID\r\nexport const getProfessorById = async (id: string): Promise<ProfessorDetail> => {\r\n  try {\r\n    console.log(`Mock service: getProfessorById called with ID ${id}`);\r\n    await randomDelay();\r\n    \r\n    const professor = MOCK_PROFESSORS.find(p => p.professor_id === id);\r\n    \r\n    // Mock department data to prevent 404 errors when fetching department info\r\n    const mockDepartment = {\r\n      department_id: professor?.department_id || 'Finance',\r\n      name: `${professor?.department_id || 'Finance'} Department`,\r\n      description: 'Department description',\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    // Mock course data\r\n    const mockCourses = (professor?.course_ids || ['Finance Analytics']).map(courseId => ({\r\n      course_id: courseId,\r\n      course_name: courseId,\r\n      department_id: professor?.department_id || 'Finance',\r\n      is_core: true,\r\n      duration_minutes: 60,\r\n      semester: 'Fall',\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    }));\r\n    \r\n    if (!professor) {\r\n      console.log(`Professor not found with ID ${id}, returning mock data`);\r\n      // Instead of throwing an error, return mock data for any ID\r\n      return {\r\n        professor_id: id,\r\n        department_id: 'Finance',\r\n        first_name: 'Default',\r\n        last_name: 'Professor',\r\n        email: 'default.professor@example.com',\r\n        password_hash: 'hashed_password',\r\n        semesters: ['Fall', 'Spring'],\r\n        course_ids: ['Finance Analytics'],\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n        department: mockDepartment,\r\n        courses: mockCourses,\r\n        availabilities: [\r\n          {\r\n            availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\r\n            professor_id: id,\r\n            timeslot_id: 'TS1-MON',\r\n            day_of_week: 'Monday',\r\n            is_available: true,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          },\r\n          {\r\n            availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\r\n            professor_id: id,\r\n            timeslot_id: 'TS2-MON',\r\n            day_of_week: 'Monday',\r\n            is_available: true,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          }\r\n        ]\r\n      };\r\n    }\r\n    \r\n    // Add availabilities to the professor details\r\n    const availabilities = MOCK_AVAILABILITY.filter(a => a.professor_id === id);\r\n    \r\n    // If no availabilities found, create some mock ones\r\n    const professorAvailabilities = availabilities.length > 0 ? availabilities : [\r\n      {\r\n        availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\r\n        professor_id: id,\r\n        timeslot_id: 'TS1-MON',\r\n        day_of_week: 'Monday',\r\n        is_available: true,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      },\r\n      {\r\n        availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\r\n        professor_id: id,\r\n        timeslot_id: 'TS2-MON',\r\n        day_of_week: 'Monday',\r\n        is_available: true,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      },\r\n      {\r\n        availability_id: `AVAIL-${uuidv4().substring(0, 8)}`,\r\n        professor_id: id,\r\n        timeslot_id: 'TS3-TUE',\r\n        day_of_week: 'Tuesday',\r\n        is_available: false,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      }\r\n    ];\r\n    \r\n    return {\r\n      ...professor,\r\n      department: mockDepartment,\r\n      courses: mockCourses,\r\n      availabilities: professorAvailabilities\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error in getProfessorById for ID ${id}:`, error);\r\n    // Instead of propagating the error, return mock data\r\n    return {\r\n      professor_id: id,\r\n      department_id: 'Finance',\r\n      first_name: 'Fallback',\r\n      last_name: 'Professor',\r\n      email: 'fallback.professor@example.com',\r\n      password_hash: 'hashed_password',\r\n      semesters: ['Fall'],\r\n      course_ids: ['Finance Analytics'],\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n      department: {\r\n        department_id: 'Finance',\r\n        name: 'Finance Department',\r\n        description: 'Department description',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      },\r\n      courses: [\r\n        {\r\n          course_id: 'Finance Analytics',\r\n          course_name: 'Finance Analytics',\r\n          department_id: 'Finance',\r\n          is_core: true,\r\n          duration_minutes: 60,\r\n          semester: 'Fall',\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        }\r\n      ],\r\n      availabilities: []\r\n    };\r\n  }\r\n};\r\n\r\n// Get professor availability\r\nexport const getProfessorAvailability = async (professorId: string): Promise<ProfessorAvailability[]> => {\r\n  try {\r\n    await randomDelay();\r\n    const availabilities = MOCK_AVAILABILITY.filter(a => a.professor_id === professorId);\r\n    return availabilities;\r\n  } catch (error) {\r\n    console.error(`Error in getProfessorAvailability for professor ID ${professorId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Set professor availability\r\nexport const setProfessorAvailability = async (\r\n  professorId: string,\r\n  availabilities: ProfessorAvailability[]\r\n): Promise<ProfessorAvailability[]> => {\r\n  try {\r\n    await randomDelay();\r\n    \r\n    // In a real implementation, this would update the database\r\n    // For the mock, we'll just return the input availabilities with IDs\r\n    const updatedAvailabilities = availabilities.map(a => ({\r\n      ...a,\r\n      availability_id: a.availability_id || `AVAIL-${uuidv4().substring(0, 8)}`,\r\n      professor_id: professorId,\r\n      created_at: a.created_at || new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    }));\r\n    \r\n    return updatedAvailabilities;\r\n  } catch (error) {\r\n    console.error(`Error in setProfessorAvailability for professor ID ${professorId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new professor\r\nexport const createProfessor = async (professor: Partial<Professor>): Promise<Professor> => {\r\n  try {\r\n    await randomDelay();\r\n    \r\n    // Generate ID if not provided\r\n    if (!professor.professor_id) {\r\n      professor.professor_id = `PROF-${uuidv4().substring(0, 8)}`;\r\n    }\r\n    \r\n    // Ensure course_ids is an array\r\n    if (!professor.course_ids) {\r\n      professor.course_ids = [];\r\n    }\r\n    \r\n    // Create timestamp\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    // Create new professor object\r\n    const newProfessor: Professor = {\r\n      ...professor as Professor,\r\n      created_at: timestamp,\r\n      updated_at: timestamp\r\n    };\r\n    \r\n    // In a real implementation, this would add to the database\r\n    // For the mock, we'll just return the new professor\r\n    return newProfessor;\r\n  } catch (error) {\r\n    console.error('Error in createProfessor:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing professor\r\nexport const updateProfessor = async (id: string, professor: Partial<Professor>): Promise<Professor> => {\r\n  try {\r\n    await randomDelay();\r\n    \r\n    // Find existing professor\r\n    const existingProfessor = MOCK_PROFESSORS.find(p => p.professor_id === id);\r\n    \r\n    if (!existingProfessor) {\r\n      throw new Error('Professor not found');\r\n    }\r\n    \r\n    // Ensure course_ids is an array\r\n    if (!professor.course_ids) {\r\n      professor.course_ids = [];\r\n    }\r\n    \r\n    // Update professor\r\n    const updatedProfessor: Professor = {\r\n      ...existingProfessor,\r\n      ...professor,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    // In a real implementation, this would update the database\r\n    // For the mock, we'll just return the updated professor\r\n    return updatedProfessor;\r\n  } catch (error) {\r\n    console.error(`Error in updateProfessor for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a professor\r\nexport const deleteProfessor = async (id: string): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    await randomDelay();\r\n    \r\n    // In a real implementation, this would delete from the database\r\n    // For the mock, we'll just return success\r\n    return { success: true, message: 'Professor deleted successfully' };\r\n  } catch (error) {\r\n    console.error(`Error in deleteProfessor for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete multiple professors\r\nexport const deleteProfessors = async (ids: string[]): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    await randomDelay();\r\n    \r\n    // In a real implementation, this would delete from the database\r\n    // For the mock, we'll just return success\r\n    return { success: true, message: 'Professors deleted successfully' };\r\n  } catch (error) {\r\n    console.error(`Error in deleteProfessors:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Assign courses to a professor\r\nexport const assignCoursesToProfessor = async (professorId: string, courseIds: string[]): Promise<Professor> => {\r\n  try {\r\n    await randomDelay();\r\n    \r\n    // Find existing professor\r\n    const existingProfessor = MOCK_PROFESSORS.find(p => p.professor_id === professorId);\r\n    \r\n    if (!existingProfessor) {\r\n      throw new Error('Professor not found');\r\n    }\r\n    \r\n    // Filter out any empty course selections\r\n    const validCourseIds = courseIds.filter(id => id !== '');\r\n    \r\n    // Update professor\r\n    const updatedProfessor: Professor = {\r\n      ...existingProfessor,\r\n      course_ids: validCourseIds,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    // In a real implementation, this would update the database\r\n    // For the mock, we'll just return the updated professor\r\n    return updatedProfessor;\r\n  } catch (error) {\r\n    console.error(`Error in assignCoursesToProfessor for professor ID ${professorId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst professorService = {\r\n  getAllProfessors,\r\n  getProfessorsByDepartment,\r\n  getProfessorsByCourse,\r\n  getProfessorById,\r\n  getProfessorAvailability,\r\n  setProfessorAvailability,\r\n  createProfessor,\r\n  updateProfessor,\r\n  deleteProfessor,\r\n  deleteProfessors,\r\n  assignCoursesToProfessor\r\n};\r\n\r\nexport default professorService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}