{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Documents\\\\Master's Colleges\\\\UNIVERSITY OF DELAWARE\\\\COURSES\\\\Project\\\\university-scheduler\\\\frontend\\\\src\\\\components\\\\admin\\\\schedule\\\\ScheduleView.tsx\",\n  _s = $RefreshSig$();\n// src/components/admin/schedules/ScheduleView.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Button, Container, Typography, Card, CardContent, FormControl, InputLabel, MenuItem, Select, Grid, Paper, CircularProgress, Alert, AlertTitle, Tabs, Tab, Tooltip,\n//IconButton,\nTextField } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n//import FilterListIcon from '@mui/icons-material/FilterList';\nimport WarningIcon from '@mui/icons-material/Warning';\n//import InfoIcon from '@mui/icons-material/Info';\nimport SearchIcon from '@mui/icons-material/Search';\nimport GetAppIcon from '@mui/icons-material/GetApp';\n//import { useNavigate } from 'react-router-dom';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\n\n// Import services\nimport scheduleService from '../../../services/scheduleService';\nimport departmentService from '../../../services/departmentService';\nimport programService from '../../../services/programService';\nimport semesterService from '../../../services/semesterService';\nimport GenerateSchedule from './GenerateSchedule';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScheduleView = () => {\n  _s();\n  //const navigate = useNavigate();\n\n  // State variables\n  const [scheduleData, setSchedule] = useState(null);\n  const [scheduledCourses, setScheduledCourses] = useState([]);\n  const [filteredCourses, setFilteredCourses] = useState([]);\n  const [conflicts, setConflicts] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [programs, setPrograms] = useState([]);\n  const [semesters, setSemesters] = useState([]);\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedProgram, setSelectedProgram] = useState('all'); // Default to 'all' programs\n  const [selectedSemester, setSelectedSemester] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [viewMode, setViewMode] = useState('week');\n  const [showGenerateForm, setShowGenerateForm] = useState(false);\n  const [currentDay, setCurrentDay] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showResolvedConflicts, setShowResolvedConflicts] = useState(false);\n\n  // Add state for available schedules and selected schedule\n  const [availableSchedules, setAvailableSchedules] = useState([]);\n  const [selectedScheduleId, setSelectedScheduleId] = useState('');\n\n  // Days and time slots for schedule display\n  const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n  const timeSlots = [{\n    id: 1,\n    name: 'Time Slot 1',\n    start: '09:10',\n    end: '10:05'\n  }, {\n    id: 2,\n    name: 'Time Slot 2',\n    start: '10:20',\n    end: '11:15'\n  }, {\n    id: 3,\n    name: 'Time Slot 3',\n    start: '11:30',\n    end: '12:25'\n  }, {\n    id: 4,\n    name: 'Time Slot 4',\n    start: '12:45',\n    end: '14:05'\n  }, {\n    id: 5,\n    name: 'Time Slot 5',\n    start: '13:30',\n    end: '14:50'\n  }, {\n    id: 6,\n    name: 'Time Slot 6',\n    start: '17:30',\n    end: '20:30'\n  }, {\n    id: 7,\n    name: 'Time Slot 7',\n    start: '18:00',\n    end: '21:00'\n  }];\n\n  // Add this helper function near the top of your component\n  const normalizeDayName = day => {\n    if (!day) return '';\n\n    // Handle short codes\n    const dayMap = {\n      'MON': 'Monday',\n      'TUE': 'Tuesday',\n      'WED': 'Wednesday',\n      'THU': 'Thursday',\n      'FRI': 'Friday'\n    };\n\n    // If it's a short code, convert it\n    if (dayMap[day]) {\n      return dayMap[day];\n    }\n\n    // If it's already a full name, return it\n    const fullNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n    if (fullNames.includes(day)) {\n      return day;\n    }\n\n    // Try to match partial\n    for (const [code, fullName] of Object.entries(dayMap)) {\n      if (day.toUpperCase().includes(code) || fullName.toLowerCase().includes(day.toLowerCase())) {\n        return fullName;\n      }\n    }\n\n    // Default\n    return day;\n  };\n\n  // Add this function to fetch available schedules when semester changes\n  const fetchAvailableSchedules = useCallback(async semesterId => {\n    if (!semesterId) return;\n    try {\n      setLoading(true);\n      const data = await scheduleService.getSchedulesBySemester(semesterId);\n      console.log(`Found ${data.length} schedules for semester ${semesterId}`);\n      setAvailableSchedules(data);\n\n      // If we have schedules and none is selected yet, select the first one\n      if (data.length > 0 && !selectedScheduleId) {\n        setSelectedScheduleId(data[0].schedule_id);\n        console.log(`Auto-selecting first schedule: ${data[0].schedule_id}`);\n      }\n    } catch (err) {\n      console.error('Error fetching schedules for semester:', err);\n      setError('Failed to load schedules for this semester');\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedScheduleId]);\n\n  // Get schedule by ID\n  const loadScheduleById = useCallback(async scheduleId => {\n    if (!scheduleId) return;\n    try {\n      var _scheduleData$Schedul, _scheduleData$courses;\n      setLoading(true);\n      setError(null);\n      console.log(`Loading specific schedule: ${scheduleId}`);\n      const scheduleData = await scheduleService.getScheduleById(scheduleId);\n      const conflictsData = await scheduleService.getScheduleConflicts(scheduleId);\n\n      // Debug the structure to help diagnose issues\n      console.log(\"Raw schedule data structure:\", {\n        id: scheduleData.schedule_id,\n        hasScheduledCourses: !!scheduleData.ScheduledCourses,\n        scheduledCoursesCount: ((_scheduleData$Schedul = scheduleData.ScheduledCourses) === null || _scheduleData$Schedul === void 0 ? void 0 : _scheduleData$Schedul.length) || 0,\n        hasCourses: !!scheduleData.courses,\n        coursesCount: ((_scheduleData$courses = scheduleData.courses) === null || _scheduleData$courses === void 0 ? void 0 : _scheduleData$courses.length) || 0\n      });\n\n      // CRITICAL FIX: Log entire first course to debug\n      if (scheduleData.courses && scheduleData.courses.length > 0) {\n        console.log(\"First course from API:\", scheduleData.courses[0]);\n      } else if (scheduleData.ScheduledCourses && scheduleData.ScheduledCourses.length > 0) {\n        console.log(\"First scheduled course from API:\", scheduleData.ScheduledCourses[0]);\n      } else {\n        console.log(\"No courses found in API response\");\n      }\n\n      // Extract courses - priority order: courses → ScheduledCourses → []\n      let sourceCourses = [];\n      if (scheduleData.courses && scheduleData.courses.length > 0) {\n        console.log(`Using ${scheduleData.courses.length} courses from courses array`);\n        sourceCourses = scheduleData.courses;\n      } else if (scheduleData.ScheduledCourses && scheduleData.ScheduledCourses.length > 0) {\n        console.log(`Using ${scheduleData.ScheduledCourses.length} courses from ScheduledCourses array`);\n        sourceCourses = scheduleData.ScheduledCourses;\n      } else {\n        console.log(\"No courses found in schedule data\");\n      }\n      const processedCourses = normalizeCourseData(sourceCourses);\n      console.log(`Processed ${processedCourses.length} courses`);\n      if (processedCourses.length > 0) {\n        var _testCourse$timeslot_, _testCourse$timeslot_2;\n        console.log(\"Sample processed course:\", processedCourses[0]);\n\n        // Test time slot and day extraction for the first course\n        const testCourse = processedCourses[0];\n        console.log(\"Testing day/slot extraction for first course:\", {\n          course_id: testCourse.course_id,\n          timeslot_id: testCourse.timeslot_id,\n          day_of_week: testCourse.day_of_week,\n          slot_number: testCourse.time_slot_number,\n          normalizedDay: normalizeDayName(testCourse.day_of_week),\n          dayFromTimeslot: ((_testCourse$timeslot_ = testCourse.timeslot_id) === null || _testCourse$timeslot_ === void 0 ? void 0 : (_testCourse$timeslot_2 = _testCourse$timeslot_.match(/TS\\d+-([A-Z]+)/i)) === null || _testCourse$timeslot_2 === void 0 ? void 0 : _testCourse$timeslot_2[1]) || 'none'\n        });\n      }\n\n      // Create enhanced schedule data with processed courses\n      const enhancedScheduleData = {\n        ...scheduleData,\n        courses: processedCourses\n      };\n      setSchedule(enhancedScheduleData);\n      setScheduledCourses(processedCourses);\n      setFilteredCourses(processedCourses);\n      setConflicts(conflictsData);\n\n      // Add detailed console logs to debug the courses array\n      console.log(\"CRITICAL DEBUG - State values after setting:\", {\n        scheduleDataExists: !!enhancedScheduleData,\n        coursesCount: processedCourses.length,\n        coursesSample: processedCourses.slice(0, 3).map(c => ({\n          id: c.course_id,\n          name: c.course_name,\n          timeslot: c.timeslot_id,\n          day: c.day_of_week\n        }))\n      });\n\n      // Force a re-render by creating a timeout\n      setTimeout(() => {\n        console.log(\"Forcing re-render with fresh arrays\");\n        // Create new array references to force re-render\n        if (processedCourses.length > 0) {\n          setFilteredCourses([...processedCourses]);\n          setScheduledCourses([...processedCourses]);\n        }\n      }, 500);\n    } catch (err) {\n      console.error(`Error loading schedule ${scheduleId}:`, err);\n      setError('Failed to load the selected schedule');\n      setSchedule(null);\n      setScheduledCourses([]);\n      setFilteredCourses([]);\n      setConflicts([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const normalizeCourseData = courses => {\n    if (!courses || !Array.isArray(courses)) {\n      console.log(\"No courses to normalize or courses is not an array\");\n      return [];\n    }\n    console.log(`Normalizing ${courses.length} courses`);\n    return courses.map((course, index) => {\n      var _course$course, _course$Course, _course$course2, _course$Course2, _course$professor, _course$professor2, _course$course3, _course$Course3;\n      // Log the first few raw courses to see their structure\n      if (index < 2) {\n        console.log(`Raw course data ${index}:`, course);\n      }\n\n      // Extract course information from different possible structures\n      // Try direct properties first, then nested Course object\n      const courseId = course.course_id || ((_course$course = course.course) === null || _course$course === void 0 ? void 0 : _course$course.course_id) || ((_course$Course = course.Course) === null || _course$Course === void 0 ? void 0 : _course$Course.course_id) || '';\n      const courseName = course.course_name || ((_course$course2 = course.course) === null || _course$course2 === void 0 ? void 0 : _course$course2.course_name) || ((_course$Course2 = course.Course) === null || _course$Course2 === void 0 ? void 0 : _course$Course2.course_name) || 'Unnamed Course';\n\n      // Similar approach for other properties\n      const timeSlotId = course.timeslot_id || course.time_slot_id || '';\n      let timeSlotNumber = null;\n\n      // Extract time slot number from the ID\n      if (timeSlotId) {\n        const matches = timeSlotId.match(/TS(\\d+)/i);\n        if (matches && matches[1]) {\n          timeSlotNumber = parseInt(matches[1]);\n        }\n      }\n\n      // Normalize day names\n      const dayOfWeek = course.day_of_week || '';\n\n      // Create a normalized course object\n      const normalizedCourse = {\n        ...course,\n        course_id: courseId,\n        course_name: courseName,\n        timeslot_id: timeSlotId,\n        time_slot_id: timeSlotId,\n        time_slot_number: timeSlotNumber,\n        day_of_week: dayOfWeek,\n        professor_name: course.professor_name || `${((_course$professor = course.professor) === null || _course$professor === void 0 ? void 0 : _course$professor.first_name) || ''} ${((_course$professor2 = course.professor) === null || _course$professor2 === void 0 ? void 0 : _course$professor2.last_name) || ''}`.trim() || 'TBA',\n        is_core: course.is_core !== undefined ? course.is_core : ((_course$course3 = course.course) === null || _course$course3 === void 0 ? void 0 : _course$course3.is_core) || ((_course$Course3 = course.Course) === null || _course$Course3 === void 0 ? void 0 : _course$Course3.is_core) || false\n      };\n\n      // Log the normalized course\n      if (index < 2) {\n        console.log(`Normalized course ${index}:`, {\n          id: normalizedCourse.course_id,\n          name: normalizedCourse.course_name,\n          timeslot: normalizedCourse.timeslot_id,\n          day: normalizedCourse.day_of_week,\n          slot_number: normalizedCourse.time_slot_number\n        });\n      }\n      return normalizedCourse;\n    });\n  };\n  const handleRefresh = useCallback(async () => {\n    if (!selectedSemester) return;\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Refreshing schedule data for semester: ${selectedSemester}`);\n\n      // First, refresh the list of available schedules\n      console.log(`Fetching available schedules for semester: ${selectedSemester}`);\n      await fetchAvailableSchedules(selectedSemester);\n\n      // If we have a selected schedule, reload it\n      if (selectedScheduleId) {\n        console.log(`Reloading selected schedule: ${selectedScheduleId}`);\n        await loadScheduleById(selectedScheduleId);\n      } else {\n        console.log('No schedule selected, will try to select one from available schedules');\n        // If we don't have a selected schedule but we've just loaded available schedules,\n        // the fetchAvailableSchedules function will auto-select the first one\n      }\n\n      // Reset filters\n      setSelectedDepartment('');\n      setSelectedProgram('all');\n    } catch (err) {\n      console.error(\"Error refreshing data:\", err);\n      setError(\"Failed to refresh data. Please ensure schedules exist for this semester.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedSemester, selectedScheduleId, fetchAvailableSchedules, loadScheduleById]); // ADD THESE DEPENDENCIES\n\n  // Add this effect to check URL parameters\n  useEffect(() => {\n    // Check URL params for direct navigation from schedule generation\n    const queryParams = new URLSearchParams(window.location.search);\n    const semesterParam = queryParams.get('semester');\n    const refreshParam = queryParams.get('refresh');\n    if (semesterParam) {\n      console.log(`URL has semester param: ${semesterParam}, setting as selected`);\n      setSelectedSemester(semesterParam);\n\n      // If refresh=true is in the URL, force a refresh\n      if (refreshParam === 'true') {\n        // Use setTimeout to ensure the semester state is updated first\n        setTimeout(() => handleRefresh(), 500);\n      }\n    }\n  }, [handleRefresh]); // Empty dependency array means this runs once on component mount\n\n  // Initial data loading\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Get semesters\n        const semestersData = await semesterService.getAllSemesters();\n        setSemesters(semestersData);\n\n        // Get departments and programs\n        const departmentsData = await departmentService.getAllDepartments();\n        const programsData = await programService.getAllPrograms();\n        setDepartments(departmentsData);\n        setPrograms(programsData);\n\n        // If we have semesters, try to get a schedule\n        if (semestersData.length > 0) {\n          // Find the current semester or use the first one\n          const currentSemester = semestersData.find(s => s.is_current) || semestersData[0];\n          setSelectedSemester(currentSemester.semester_id);\n          try {\n            // Try to get the active schedule for this semester\n            const scheduleData = await scheduleService.getActiveSchedule(currentSemester.semester_id);\n            const conflictsData = await scheduleService.getScheduleConflicts(scheduleData.schedule_id);\n            setSchedule(scheduleData);\n            setScheduledCourses(scheduleData.courses || []);\n            setFilteredCourses(scheduleData.courses || []);\n            setConflicts(conflictsData);\n          } catch (err) {\n            // No schedule exists yet, show message to create one\n            console.log('No active schedule found:', err);\n            setError('No active schedule found for the selected semester. Please generate a new schedule.');\n          }\n        } else {\n          setError('No semesters found. Please create a semester before generating schedules.');\n        }\n      } catch (err) {\n        console.error('Error fetching initial data:', err);\n        setError('Failed to load data. Please ensure your backend server is running.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Fetch schedules when semester changes\n  useEffect(() => {\n    if (selectedSemester) {\n      fetchAvailableSchedules(selectedSemester);\n    }\n  }, [selectedSemester, fetchAvailableSchedules]);\n\n  // Load the selected schedule when selectedScheduleId changes\n  useEffect(() => {\n    if (selectedScheduleId) {\n      loadScheduleById(selectedScheduleId);\n    }\n  }, [selectedScheduleId, loadScheduleById]);\n\n  // Apply filters when department, program, or search term changes\n  useEffect(() => {\n    if (!scheduledCourses.length) return;\n    let filtered = [...scheduledCourses];\n\n    // Add diagnostic logging\n    console.log(\"Starting filtering with\", {\n      totalCourses: scheduledCourses.length,\n      selectedDepartment,\n      selectedProgram,\n      searchTerm\n    });\n\n    // Filter by department\n    if (selectedDepartment) {\n      filtered = filtered.filter(course => course.department_id === selectedDepartment);\n      console.log(\"After department filter:\", filtered.length);\n    }\n\n    // Filter by program - if \"all\" is selected, don't filter by program\n    if (selectedProgram && selectedProgram !== 'all') {\n      filtered = filtered.filter(course => {\n        // Skip filtering if program_ids is missing\n        if (!course.program_ids) {\n          return true; // Keep courses without program_ids\n        }\n        return course.program_ids.includes(selectedProgram);\n      });\n      console.log(\"After program filter:\", filtered.length);\n    }\n\n    // Filter by search term\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      filtered = filtered.filter(course => course.course_name && course.course_name.toLowerCase().includes(search) || course.course_id && course.course_id.toLowerCase().includes(search) || course.professor_name && course.professor_name.toLowerCase().includes(search));\n      console.log(\"Final filtered courses after search:\", filtered.length);\n    }\n    setFilteredCourses(filtered);\n  }, [scheduledCourses, selectedDepartment, selectedProgram, searchTerm]);\n  const handleDepartmentChange = event => {\n    const deptId = event.target.value;\n    setSelectedDepartment(deptId);\n\n    // Reset program selection when department changes, but set to \"all\" instead of empty\n    setSelectedProgram('all');\n  };\n  const handleProgramChange = event => {\n    setSelectedProgram(event.target.value);\n\n    // If user selects \"all programs\", we need to update the filtered courses\n    // to show all courses for the selected department\n    if (event.target.value === 'all') {\n      let filtered = [...scheduledCourses];\n\n      // Keep department filter if selected\n      if (selectedDepartment) {\n        filtered = filtered.filter(course => course.department_id === selectedDepartment);\n      }\n\n      // Apply search filter if any\n      if (searchTerm) {\n        const search = searchTerm.toLowerCase();\n        filtered = filtered.filter(course => course.course_name.toLowerCase().includes(search) || course.course_id.toLowerCase().includes(search) || course.professor_name && course.professor_name.toLowerCase().includes(search));\n      }\n      setFilteredCourses(filtered);\n    }\n  };\n  const handleSemesterChange = event => {\n    setSelectedSemester(event.target.value);\n  };\n\n  // Add handler for schedule selection\n  const handleScheduleChange = event => {\n    console.log(`Selected schedule changed to: ${event.target.value}`);\n    setSelectedScheduleId(event.target.value);\n  };\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  const handleViewModeChange = (event, newValue) => {\n    setViewMode(newValue);\n  };\n  const handleDayChange = (event, newValue) => {\n    setCurrentDay(newValue);\n  };\n  const handleCreateSchedule = () => {\n    setShowGenerateForm(true);\n  };\n  const handleScheduleGenerated = semesterId => {\n    console.log(`Schedule generated for semester: ${semesterId}, refreshing data`);\n    setSelectedSemester(semesterId);\n    setShowGenerateForm(false);\n    // Reload the schedule data\n    setTimeout(() => {\n      handleRefresh();\n    }, 500);\n  };\n  const handleExport = () => {\n    if (!scheduleData || !filteredCourses.length) {\n      setError(\"No schedule data available to export\");\n      return;\n    }\n    try {\n      var _semesters$find;\n      // Create a formatted schedule for export\n      const semesterName = ((_semesters$find = semesters.find(s => s.semester_id === selectedSemester)) === null || _semesters$find === void 0 ? void 0 : _semesters$find.name) || 'Current Semester';\n\n      // Create header rows\n      let csvContent = \"Course Schedule - \" + semesterName + \"\\n\";\n      csvContent += \"Generated on: \" + new Date().toLocaleString() + \"\\n\\n\";\n\n      // Column headers\n      csvContent += \"Course ID,Course Name,Professor,Day,Time,Room,Type\\n\";\n\n      // Add data rows\n      filteredCourses.forEach(course => {\n        const timeSlotId = course.time_slot_id;\n        const slotNumber = parseInt(timeSlotId.replace(/[^\\d]/g, ''));\n        const timeSlot = timeSlots.find(ts => ts.id === slotNumber) || {\n          start: \"\",\n          end: \"\"\n        };\n        const row = [course.course_id, course.course_name, course.professor_name || 'TBA', course.day_of_week, `${timeSlot.start}-${timeSlot.end}`, course.room || 'TBA', course.is_core ? 'Core' : 'Elective'];\n        csvContent += row.join(',') + '\\n';\n      });\n\n      // Create and download the file\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.setAttribute('href', url);\n      link.setAttribute('download', `schedule_${semesterName.replace(/\\s+/g, '_')}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (err) {\n      console.error(\"Error exporting schedule:\", err);\n      setError(\"Failed to export schedule\");\n    }\n  };\n\n  // Function to determine background color for course blocks\n  const getCourseColor = course => {\n    if (course.is_override) return 'rgba(255, 152, 0, 0.8)'; // Orange for overrides\n    if (course.is_core) return 'rgba(25, 118, 210, 0.8)'; // Blue for core courses\n    return 'rgba(76, 175, 80, 0.8)'; // Green for electives\n  };\n\n  // Helper function to check if a course has conflicts\n  const hasConflict = course => {\n    return conflicts.some(conflict => conflict.courses.some(c => c.scheduled_course_id === course.scheduled_course_id) && !conflict.is_resolved);\n  };\n\n  // Function to find courses for a specific timeslot and day\n  const getCoursesForTimeSlot = (slotNumber, day) => {\n    var _scheduleData$courses2;\n    // Generate a unique ID for this specific call\n    const callId = Math.random().toString(36).substring(2, 5);\n\n    // Log the call details\n    console.log(`[${callId}] Looking for courses in slot ${slotNumber} on ${day}`);\n\n    // Skip if we have no courses data\n    if (!(scheduleData !== null && scheduleData !== void 0 && (_scheduleData$courses2 = scheduleData.courses) !== null && _scheduleData$courses2 !== void 0 && _scheduleData$courses2.length)) {\n      console.log(`[${callId}] No courses data available`);\n      return [];\n    }\n\n    // Log the first few courses to see their format\n    if (slotNumber === 1 && day === 'Monday') {\n      console.log(`[${callId}] Sample course data:`, scheduleData.courses.slice(0, 2).map(c => ({\n        id: c.course_id,\n        name: c.course_name,\n        day: c.day_of_week,\n        timeslot: c.timeslot_id\n      })));\n    }\n\n    // Try multiple matching strategies\n    const matches = scheduleData.courses.filter(course => {\n      var _course$timeslot_id, _course$timeslot_id2;\n      // Skip nulls\n      if (!course) return false;\n\n      // Direct match on format TS3-MON\n      const expectedTimeslotId = `TS${slotNumber}-${day.substring(0, 3).toUpperCase()}`;\n\n      // Try multiple ways to match the day and slot\n      const matchesDay = course.day_of_week === day || ((_course$timeslot_id = course.timeslot_id) === null || _course$timeslot_id === void 0 ? void 0 : _course$timeslot_id.includes(day.substring(0, 3).toUpperCase()));\n      const matchesSlot = course.timeslot_id === expectedTimeslotId || course.time_slot_number === slotNumber || ((_course$timeslot_id2 = course.timeslot_id) === null || _course$timeslot_id2 === void 0 ? void 0 : _course$timeslot_id2.includes(`TS${slotNumber}`));\n      const isMatch = matchesDay && matchesSlot;\n      if (isMatch) {\n        console.log(`[${callId}] Found match: ${course.course_name || course.course_id || 'unnamed course'}`);\n      }\n      return isMatch;\n    });\n    console.log(`[${callId}] Found ${matches.length} courses for slot ${slotNumber} on ${day}`);\n    return matches;\n  };\n\n  // Function to accept a conflict\n  const handleAcceptConflict = async conflictId => {\n    try {\n      await scheduleService.resolveConflict(conflictId, {\n        action: 'ACCEPT',\n        notes: 'Conflict accepted by administrator'\n      });\n\n      // Update local state\n      setConflicts(conflicts.map(conflict => conflict.conflict_id === conflictId ? {\n        ...conflict,\n        is_resolved: true,\n        resolution_notes: 'Conflict accepted by administrator'\n      } : conflict));\n    } catch (err) {\n      console.error(\"Error accepting conflict:\", err);\n      setError(\"Failed to accept conflict\");\n    }\n  };\n\n  // Function to override a conflict\n  const handleOverrideConflict = async conflictId => {\n    // In a real implementation, this would open a dialog to collect details\n    try {\n      // Simplified implementation for now\n      setConflicts(conflicts.map(conflict => conflict.conflict_id === conflictId ? {\n        ...conflict,\n        is_resolved: true,\n        resolution_notes: 'Conflict overridden by administrator'\n      } : conflict));\n    } catch (err) {\n      console.error(\"Error overriding conflict:\", err);\n      setError(\"Failed to override conflict\");\n    }\n  };\n\n  // Function to render a course block in the timetable\n  const renderCourseBlock = course => {\n    const courseHasConflict = hasConflict(course);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        backgroundColor: getCourseColor(course),\n        color: 'white',\n        p: 1,\n        borderRadius: 1,\n        mb: 1,\n        position: 'relative',\n        cursor: 'pointer',\n        '&:hover': {\n          opacity: 0.9\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        fontWeight: \"bold\",\n        noWrap: true,\n        children: course.course_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        display: \"block\",\n        noWrap: true,\n        children: course.course_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        display: \"block\",\n        noWrap: true,\n        children: [\"Prof. \", course.professor_name || 'TBA']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 9\n      }, this), courseHasConflict && /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"This course has scheduling conflicts\",\n        children: /*#__PURE__*/_jsxDEV(WarningIcon, {\n          sx: {\n            position: 'absolute',\n            top: 5,\n            right: 5,\n            color: 'orange',\n            fontSize: 20\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 11\n      }, this)]\n    }, course.scheduled_course_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render weekly view\n  const renderWeekView = () => {\n    var _scheduleData$courses3, _scheduleData$courses4;\n    console.log(\"RENDER DEBUG: Starting renderWeekView function\");\n\n    // Basic existence checks\n    console.log(\"RENDER DEBUG: Data check\", {\n      scheduleDataExists: !!scheduleData,\n      hasCoursesArray: !!(scheduleData !== null && scheduleData !== void 0 && scheduleData.courses),\n      coursesLength: (scheduleData === null || scheduleData === void 0 ? void 0 : (_scheduleData$courses3 = scheduleData.courses) === null || _scheduleData$courses3 === void 0 ? void 0 : _scheduleData$courses3.length) || 0,\n      hasScheduledCourses: !!scheduledCourses,\n      scheduledCoursesLength: (scheduledCourses === null || scheduledCourses === void 0 ? void 0 : scheduledCourses.length) || 0\n    });\n\n    // If we have NO courses at all, show an error\n    if (!(scheduleData !== null && scheduleData !== void 0 && (_scheduleData$courses4 = scheduleData.courses) !== null && _scheduleData$courses4 !== void 0 && _scheduleData$courses4.length)) {\n      console.error(\"RENDER DEBUG: No courses exist in scheduleData\");\n      return /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          mt: 2,\n          p: 3,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          color: \"error\",\n          children: \"No courses found for this schedule. The schedule data may be empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            mt: 2\n          },\n          children: [\"Debug info: scheduleId=\", (scheduleData === null || scheduleData === void 0 ? void 0 : scheduleData.schedule_id) || 'none']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Test a specific day/slot combination we know should have a course\n    const testSlots = [1, 2, 3, 4, 5];\n    const testDays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n    console.log(\"RENDER DEBUG: Testing sample time slot matching\");\n    testSlots.forEach(slot => {\n      testDays.forEach(day => {\n        const coursesForSlot = getCoursesForTimeSlot(slot, day);\n        if (coursesForSlot.length > 0) {\n          console.log(`RENDER DEBUG: Found ${coursesForSlot.length} courses for ${day} slot ${slot}`);\n          console.log(\"RENDER DEBUG: First matching course:\", coursesForSlot[0]);\n        }\n      });\n    });\n\n    // Modified version of the original renderWeekView code\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        mt: 2,\n        overflowX: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          minWidth: 800\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                borderRight: 1,\n                borderColor: 'divider',\n                height: '100%',\n                pt: 7\n              },\n              children: timeSlots.map(slot => /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  height: 120,\n                  p: 1,\n                  borderBottom: 1,\n                  borderColor: 'divider',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n                },\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  children: [slot.start, \" - \", slot.end]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 843,\n                  columnNumber: 21\n                }, this)\n              }, slot.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 13\n          }, this), daysOfWeek.map((day, index) => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                borderRight: index < daysOfWeek.length - 1 ? 1 : 0,\n                borderColor: 'divider'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  p: 2,\n                  borderBottom: 1,\n                  borderColor: 'divider',\n                  textAlign: 'center',\n                  fontWeight: 'bold',\n                  bgcolor: 'grey.100'\n                },\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  children: day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 866,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 856,\n                columnNumber: 19\n              }, this), timeSlots.map(slot => {\n                // Get courses using the simplified function\n                const coursesForSlot = getCoursesForTimeSlot(slot.id, day);\n\n                // Log what we found for this slot\n                console.log(`RENDER DEBUG: Slot ${slot.id} on ${day}: ${coursesForSlot.length} courses`);\n                return /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    height: 120,\n                    p: 1,\n                    borderBottom: 1,\n                    borderColor: 'divider',\n                    overflow: 'auto',\n                    // Add a background color to see the cell even if it's empty\n                    bgcolor: coursesForSlot.length > 0 ? 'inherit' : 'rgba(0,0,0,0.02)'\n                  },\n                  children: coursesForSlot.length > 0 ? coursesForSlot.map(course => /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      backgroundColor: getCourseColor(course),\n                      color: 'white',\n                      p: 1,\n                      borderRadius: 1,\n                      mb: 1,\n                      position: 'relative',\n                      cursor: 'pointer',\n                      '&:hover': {\n                        opacity: 0.9\n                      }\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"subtitle2\",\n                      fontWeight: \"bold\",\n                      noWrap: true,\n                      children: course.course_name || 'Unknown Course'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 907,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      display: \"block\",\n                      noWrap: true,\n                      children: course.course_id || 'No ID'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 910,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      display: \"block\",\n                      noWrap: true,\n                      children: [\"Prof. \", course.professor_name || 'TBA']\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 913,\n                      columnNumber: 31\n                    }, this)]\n                  }, course.scheduled_course_id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 892,\n                    columnNumber: 29\n                  }, this)) :\n                  /*#__PURE__*/\n                  // Empty indicator with cell coordinates for debugging\n                  _jsxDEV(Typography, {\n                    variant: \"caption\",\n                    color: \"text.secondary\",\n                    children: [day, \"-\", slot.id, \": No courses\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 920,\n                    columnNumber: 27\n                  }, this)\n                }, `${day}-${slot.id}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 878,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 17\n            }, this)\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render day view\n  const renderDayView = () => {\n    if (!filteredCourses.length) {\n      return /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 3,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No schedule data available or no courses match your filters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 943,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 9\n      }, this);\n    }\n    const day = daysOfWeek[currentDay];\n    const dayFilteredCourses = filteredCourses.filter(course => course.day_of_week === day);\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: [day, \"'s Schedule\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: timeSlots.map(slot => {\n            const coursesForSlot = dayFilteredCourses.filter(course => course.time_slot_id === `TS${slot.id}-${day.substring(0, 3).toUpperCase()}`);\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Paper, {\n                elevation: 1,\n                sx: {\n                  p: 2,\n                  borderLeft: 4,\n                  borderColor: coursesForSlot.length > 0 ? 'primary.main' : 'grey.300'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  color: \"textSecondary\",\n                  children: [slot.start, \" - \", slot.end]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 973,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    mt: 1\n                  },\n                  children: coursesForSlot.length > 0 ? coursesForSlot.map(course => renderCourseBlock(course)) : /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\",\n                    children: \"No courses scheduled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 980,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 976,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 965,\n                columnNumber: 19\n              }, this)\n            }, slot.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 964,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 952,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to render the conflicts section\n  const renderConflicts = () => {\n    const displayConflicts = showResolvedConflicts ? conflicts : conflicts.filter(conflict => !conflict.is_resolved);\n    if (displayConflicts.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mt: 3\n        },\n        children: \"No unresolved conflicts in this schedule.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        mt: 3,\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: [\"Conflicts (\", displayConflicts.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          size: \"small\",\n          onClick: () => setShowResolvedConflicts(!showResolvedConflicts),\n          children: showResolvedConflicts ? 'Hide Resolved' : 'Show Resolved'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: displayConflicts.map(conflict => {\n          var _conflict$time_slot;\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              elevation: 1,\n              sx: {\n                p: 2,\n                borderLeft: 4,\n                borderColor: conflict.is_resolved ? 'success.main' : 'warning.main'\n              },\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'flex-start'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle1\",\n                    sx: {\n                      fontWeight: 'bold'\n                    },\n                    children: conflict.conflict_type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1037,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    children: conflict.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1040,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: [\"Time: \", conflict.day_of_week, \", \", ((_conflict$time_slot = conflict.time_slot) === null || _conflict$time_slot === void 0 ? void 0 : _conflict$time_slot.name) || 'Unknown time slot']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1043,\n                    columnNumber: 21\n                  }, this), conflict.courses && conflict.courses.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      mt: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      sx: {\n                        fontWeight: 'medium'\n                      },\n                      children: \"Affected Courses:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1049,\n                      columnNumber: 25\n                    }, this), conflict.courses.map(course => /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      sx: {\n                        ml: 2\n                      },\n                      children: [\"\\u2022 \", course.course_name, \" (Prof. \", course.professor_name, \")\"]\n                    }, course.scheduled_course_id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1053,\n                      columnNumber: 27\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1048,\n                    columnNumber: 23\n                  }, this), conflict.is_resolved && /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      mt: 1,\n                      p: 1,\n                      bgcolor: 'success.light',\n                      borderRadius: 1\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      color: \"success.contrastText\",\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Resolution:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1063,\n                        columnNumber: 27\n                      }, this), \" \", conflict.resolution_notes]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1062,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1061,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1036,\n                  columnNumber: 19\n                }, this), !conflict.is_resolved && /*#__PURE__*/_jsxDEV(Box, {\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"outlined\",\n                    color: \"primary\",\n                    size: \"small\",\n                    onClick: () => handleOverrideConflict(conflict.conflict_id),\n                    sx: {\n                      mr: 1\n                    },\n                    children: \"Override\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1071,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"contained\",\n                    color: \"primary\",\n                    size: \"small\",\n                    onClick: () => handleAcceptConflict(conflict.conflict_id),\n                    children: \"Accept\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1080,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1070,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1035,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1027,\n              columnNumber: 15\n            }, this)\n          }, conflict.conflict_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 7\n    }, this);\n  };\n  const renderTestCourseList = () => {\n    var _scheduleData$courses5;\n    if (!(scheduleData !== null && scheduleData !== void 0 && (_scheduleData$courses5 = scheduleData.courses) !== null && _scheduleData$courses5 !== void 0 && _scheduleData$courses5.length)) {\n      return /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          mt: 2,\n          p: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No courses available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        mt: 2,\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: [\"DEBUG: All Courses (\", scheduleData.courses.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          maxHeight: 400,\n          overflow: 'auto'\n        },\n        children: scheduleData.courses.map((course, index) => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            p: 1,\n            borderBottom: 1,\n            borderColor: 'divider'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            children: [\"ID: \", course.course_id || 'unknown', \", Name: \", course.course_name || 'unnamed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [\"Day: \", course.day_of_week || 'none', \", Time Slot: \", course.timeslot_id || 'none']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1117,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1109,\n      columnNumber: 7\n    }, this);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"400px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1129,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h1\",\n          children: \"Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1147,\n              columnNumber: 26\n            }, this),\n            onClick: handleRefresh,\n            sx: {\n              mr: 2\n            },\n            children: \"Refresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(GetAppIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1156,\n              columnNumber: 26\n            }, this),\n            onClick: handleExport,\n            sx: {\n              mr: 2\n            },\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1165,\n              columnNumber: 26\n            }, this),\n            onClick: handleCreateSchedule,\n            children: \"Generate New Schedule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1175,\n          columnNumber: 13\n        }, this), error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mb: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"semester-select-label\",\n                  children: \"Semester\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1186,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"semester-select-label\",\n                  value: selectedSemester,\n                  onChange: handleSemesterChange,\n                  label: \"Semester\",\n                  children: semesters.map(semester => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: semester.semester_id,\n                    children: semester.name\n                  }, semester.semester_id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1194,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1187,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1185,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"schedule-select-label\",\n                  children: \"Schedule\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1203,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"schedule-select-label\",\n                  value: selectedScheduleId,\n                  onChange: handleScheduleChange,\n                  label: \"Schedule\",\n                  disabled: availableSchedules.length === 0,\n                  children: availableSchedules.map(schedule => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: schedule.schedule_id,\n                    children: [schedule.name, \" \", schedule.is_final ? '(Final)' : '']\n                  }, schedule.schedule_id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1212,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1204,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1202,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"department-select-label\",\n                  children: \"Department\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1221,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"department-select-label\",\n                  value: selectedDepartment,\n                  onChange: handleDepartmentChange,\n                  label: \"Department\",\n                  children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"\",\n                    children: /*#__PURE__*/_jsxDEV(\"em\", {\n                      children: \"All Departments\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1229,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1228,\n                    columnNumber: 21\n                  }, this), departments.map(department => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: department.department_id,\n                    children: department.name\n                  }, department.department_id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1232,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1222,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1220,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"program-select-label\",\n                  children: \"Program\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1241,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"program-select-label\",\n                  value: selectedProgram,\n                  onChange: handleProgramChange,\n                  label: \"Program\",\n                  disabled: !selectedDepartment,\n                  children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"all\",\n                    children: /*#__PURE__*/_jsxDEV(\"em\", {\n                      children: \"All Programs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1250,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1249,\n                    columnNumber: 21\n                  }, this), programs.filter(program => !selectedDepartment || program.department_id === selectedDepartment).map(program => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: program.program_id,\n                    children: program.name\n                  }, program.program_id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1255,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1242,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1240,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \"Search\",\n                variant: \"outlined\",\n                value: searchTerm,\n                onChange: handleSearchChange,\n                placeholder: \"Search courses\",\n                InputProps: {\n                  endAdornment: /*#__PURE__*/_jsxDEV(SearchIcon, {\n                    color: \"action\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1271,\n                    columnNumber: 35\n                  }, this)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1263,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1262,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1183,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1182,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          borderBottom: 1,\n          borderColor: 'divider',\n          mb: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: viewMode,\n          onChange: handleViewModeChange,\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Week View\",\n            value: \"week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1283,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Day View\",\n            value: \"day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1285,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1281,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1280,\n        columnNumber: 9\n      }, this), viewMode === 'day' && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          borderBottom: 1,\n          borderColor: 'divider',\n          mb: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: currentDay,\n          onChange: handleDayChange,\n          children: daysOfWeek.map((day, index) => /*#__PURE__*/_jsxDEV(Tab, {\n            label: day,\n            value: index\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1303,\n            columnNumber: 5\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1299,\n          columnNumber: 1\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 1\n      }, this), viewMode === 'week' ? renderWeekView() : renderDayView(), renderConflicts(), renderTestCourseList(), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 3,\n          display: 'flex',\n          alignItems: 'center',\n          flexWrap: 'wrap'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mr: 3,\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: 16,\n              height: 16,\n              bgcolor: 'rgba(25, 118, 210, 0.8)',\n              mr: 1,\n              borderRadius: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1335,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: \"Core Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1337,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1333,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mr: 3,\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: 16,\n              height: 16,\n              bgcolor: 'rgba(76, 175, 80, 0.8)',\n              mr: 1,\n              borderRadius: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1343,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: \"Elective Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1345,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1341,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mr: 3,\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: 16,\n              height: 16,\n              bgcolor: 'rgba(255, 152, 0, 0.8)',\n              mr: 1,\n              borderRadius: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1351,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: \"Overridden Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1353,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1349,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(WarningIcon, {\n            sx: {\n              color: 'orange',\n              fontSize: 16,\n              mr: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1359,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: \"Scheduling Conflict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1361,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1357,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1331,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1137,\n      columnNumber: 7\n    }, this), showGenerateForm && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showGenerateForm,\n      onClose: () => setShowGenerateForm(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Generate New Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1371,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(GenerateSchedule, {\n          onScheduleGenerated: handleScheduleGenerated,\n          onClose: () => setShowGenerateForm(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1373,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1372,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowGenerateForm(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1379,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1378,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1370,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1136,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleView, \"vhYPGlrMwWYxaCzr1+mEjvMyeLQ=\");\n_c = ScheduleView;\nexport default ScheduleView;\nvar _c;\n$RefreshReg$(_c, \"ScheduleView\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Button","Container","Typography","Card","CardContent","FormControl","InputLabel","MenuItem","Select","Grid","Paper","CircularProgress","Alert","AlertTitle","Tabs","Tab","Tooltip","TextField","AddIcon","RefreshIcon","WarningIcon","SearchIcon","GetAppIcon","Dialog","DialogTitle","DialogContent","DialogActions","scheduleService","departmentService","programService","semesterService","GenerateSchedule","jsxDEV","_jsxDEV","ScheduleView","_s","scheduleData","setSchedule","scheduledCourses","setScheduledCourses","filteredCourses","setFilteredCourses","conflicts","setConflicts","departments","setDepartments","programs","setPrograms","semesters","setSemesters","selectedDepartment","setSelectedDepartment","selectedProgram","setSelectedProgram","selectedSemester","setSelectedSemester","searchTerm","setSearchTerm","viewMode","setViewMode","showGenerateForm","setShowGenerateForm","currentDay","setCurrentDay","loading","setLoading","error","setError","showResolvedConflicts","setShowResolvedConflicts","availableSchedules","setAvailableSchedules","selectedScheduleId","setSelectedScheduleId","daysOfWeek","timeSlots","id","name","start","end","normalizeDayName","day","dayMap","fullNames","includes","code","fullName","Object","entries","toUpperCase","toLowerCase","fetchAvailableSchedules","semesterId","data","getSchedulesBySemester","console","log","length","schedule_id","err","loadScheduleById","scheduleId","_scheduleData$Schedul","_scheduleData$courses","getScheduleById","conflictsData","getScheduleConflicts","hasScheduledCourses","ScheduledCourses","scheduledCoursesCount","hasCourses","courses","coursesCount","sourceCourses","processedCourses","normalizeCourseData","_testCourse$timeslot_","_testCourse$timeslot_2","testCourse","course_id","timeslot_id","day_of_week","slot_number","time_slot_number","normalizedDay","dayFromTimeslot","match","enhancedScheduleData","scheduleDataExists","coursesSample","slice","map","c","course_name","timeslot","setTimeout","Array","isArray","course","index","_course$course","_course$Course","_course$course2","_course$Course2","_course$professor","_course$professor2","_course$course3","_course$Course3","courseId","Course","courseName","timeSlotId","time_slot_id","timeSlotNumber","matches","parseInt","dayOfWeek","normalizedCourse","professor_name","professor","first_name","last_name","trim","is_core","undefined","handleRefresh","queryParams","URLSearchParams","window","location","search","semesterParam","get","refreshParam","fetchData","semestersData","getAllSemesters","departmentsData","getAllDepartments","programsData","getAllPrograms","currentSemester","find","s","is_current","semester_id","getActiveSchedule","filtered","totalCourses","filter","department_id","program_ids","handleDepartmentChange","event","deptId","target","value","handleProgramChange","handleSemesterChange","handleScheduleChange","handleSearchChange","handleViewModeChange","newValue","handleDayChange","handleCreateSchedule","handleScheduleGenerated","handleExport","_semesters$find","semesterName","csvContent","Date","toLocaleString","forEach","slotNumber","replace","timeSlot","ts","row","room","join","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","setAttribute","style","visibility","body","appendChild","click","removeChild","getCourseColor","is_override","hasConflict","some","conflict","scheduled_course_id","is_resolved","getCoursesForTimeSlot","_scheduleData$courses2","callId","Math","random","toString","substring","_course$timeslot_id","_course$timeslot_id2","expectedTimeslotId","matchesDay","matchesSlot","isMatch","handleAcceptConflict","conflictId","resolveConflict","action","notes","conflict_id","resolution_notes","handleOverrideConflict","renderCourseBlock","courseHasConflict","sx","backgroundColor","color","p","borderRadius","mb","position","cursor","opacity","children","variant","fontWeight","noWrap","fileName","_jsxFileName","lineNumber","columnNumber","display","title","top","right","fontSize","renderWeekView","_scheduleData$courses3","_scheduleData$courses4","hasCoursesArray","coursesLength","scheduledCoursesLength","mt","textAlign","testSlots","testDays","slot","coursesForSlot","overflowX","minWidth","container","item","xs","borderRight","borderColor","height","pt","borderBottom","alignItems","justifyContent","bgcolor","overflow","renderDayView","dayFilteredCourses","gutterBottom","spacing","elevation","borderLeft","renderConflicts","displayConflicts","severity","size","onClick","_conflict$time_slot","conflict_type","description","time_slot","ml","mr","renderTestCourseList","_scheduleData$courses5","maxHeight","minHeight","maxWidth","component","startIcon","md","fullWidth","labelId","onChange","label","semester","disabled","schedule","is_final","department","program","program_id","placeholder","InputProps","endAdornment","flexWrap","width","open","onClose","onScheduleGenerated","_c","$RefreshReg$"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/components/admin/schedule/ScheduleView.tsx"],"sourcesContent":["// src/components/admin/schedules/ScheduleView.tsx\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Grid,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert,\r\n  AlertTitle,\r\n  Tabs,\r\n  Tab,\r\n  Tooltip,\r\n //IconButton,\r\n  TextField\r\n} from '@mui/material';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n//import FilterListIcon from '@mui/icons-material/FilterList';\r\nimport WarningIcon from '@mui/icons-material/Warning';\r\n//import InfoIcon from '@mui/icons-material/Info';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport GetAppIcon from '@mui/icons-material/GetApp';\r\n//import { useNavigate } from 'react-router-dom';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\n\r\n// Import services\r\nimport scheduleService from '../../../services/scheduleService';\r\nimport departmentService from '../../../services/departmentService';\r\nimport programService from '../../../services/programService';\r\nimport semesterService from '../../../services/semesterService';\r\nimport GenerateSchedule from './GenerateSchedule';\r\n\r\nconst ScheduleView: React.FC = () => {\r\n  //const navigate = useNavigate();\r\n  \r\n  // State variables\r\n  const [scheduleData, setSchedule] = useState<any>(null);\r\n  const [scheduledCourses, setScheduledCourses] = useState<any[]>([]);\r\n  const [filteredCourses, setFilteredCourses] = useState<any[]>([]);\r\n  const [conflicts, setConflicts] = useState<any[]>([]);\r\n  const [departments, setDepartments] = useState<any[]>([]);\r\n  const [programs, setPrograms] = useState<any[]>([]);\r\n  const [semesters, setSemesters] = useState<any[]>([]);\r\n  \r\n  const [selectedDepartment, setSelectedDepartment] = useState<string>('');\r\n  const [selectedProgram, setSelectedProgram] = useState<string>('all'); // Default to 'all' programs\r\n  const [selectedSemester, setSelectedSemester] = useState<string>('');\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [viewMode, setViewMode] = useState<string>('week');\r\n  const [showGenerateForm, setShowGenerateForm] = useState<boolean>(false);\r\n  const [currentDay, setCurrentDay] = useState<number>(0);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showResolvedConflicts, setShowResolvedConflicts] = useState<boolean>(false);\r\n\r\n  // Add state for available schedules and selected schedule\r\n  const [availableSchedules, setAvailableSchedules] = useState<any[]>([]);\r\n  const [selectedScheduleId, setSelectedScheduleId] = useState<string>('');\r\n  \r\n  // Days and time slots for schedule display\r\n  const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\r\n  const timeSlots = [\r\n    { id: 1, name: 'Time Slot 1', start: '09:10', end: '10:05' },\r\n    { id: 2, name: 'Time Slot 2', start: '10:20', end: '11:15' },\r\n    { id: 3, name: 'Time Slot 3', start: '11:30', end: '12:25' },\r\n    { id: 4, name: 'Time Slot 4', start: '12:45', end: '14:05' },\r\n    { id: 5, name: 'Time Slot 5', start: '13:30', end: '14:50' },\r\n    { id: 6, name: 'Time Slot 6', start: '17:30', end: '20:30' },\r\n    { id: 7, name: 'Time Slot 7', start: '18:00', end: '21:00' }\r\n  ];\r\n\r\n  // Add this helper function near the top of your component\r\n  const normalizeDayName = (day: string | undefined | null): string => {\r\n    if (!day) return '';\r\n    \r\n    // Handle short codes\r\n    const dayMap: Record<string, string> = {\r\n      'MON': 'Monday',\r\n      'TUE': 'Tuesday',\r\n      'WED': 'Wednesday',\r\n      'THU': 'Thursday',\r\n      'FRI': 'Friday'\r\n    };\r\n    \r\n    // If it's a short code, convert it\r\n    if (dayMap[day]) {\r\n      return dayMap[day];\r\n    }\r\n    \r\n    // If it's already a full name, return it\r\n    const fullNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\r\n    if (fullNames.includes(day)) {\r\n      return day;\r\n    }\r\n    \r\n    // Try to match partial\r\n    for (const [code, fullName] of Object.entries(dayMap)) {\r\n      if (day.toUpperCase().includes(code) || fullName.toLowerCase().includes(day.toLowerCase())) {\r\n        return fullName;\r\n      }\r\n    }\r\n    \r\n    // Default\r\n    return day;\r\n  };\r\n    \r\n  // Add this function to fetch available schedules when semester changes\r\n  const fetchAvailableSchedules = useCallback(async (semesterId: string) => {\r\n    if (!semesterId) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const data = await scheduleService.getSchedulesBySemester(semesterId);\r\n      console.log(`Found ${data.length} schedules for semester ${semesterId}`);\r\n      setAvailableSchedules(data);\r\n      \r\n      // If we have schedules and none is selected yet, select the first one\r\n      if (data.length > 0 && !selectedScheduleId) {\r\n        setSelectedScheduleId(data[0].schedule_id);\r\n        console.log(`Auto-selecting first schedule: ${data[0].schedule_id}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching schedules for semester:', err);\r\n      setError('Failed to load schedules for this semester');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [selectedScheduleId]);\r\n\r\n  // Get schedule by ID\r\n  const loadScheduleById = useCallback(async (scheduleId: string) => {\r\n    if (!scheduleId) return;\r\n  \r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log(`Loading specific schedule: ${scheduleId}`);\r\n      const scheduleData = await scheduleService.getScheduleById(scheduleId);\r\n      const conflictsData = await scheduleService.getScheduleConflicts(scheduleId);\r\n      \r\n      // Debug the structure to help diagnose issues\r\n      console.log(\"Raw schedule data structure:\", {\r\n        id: scheduleData.schedule_id,\r\n        hasScheduledCourses: !!scheduleData.ScheduledCourses,\r\n        scheduledCoursesCount: scheduleData.ScheduledCourses?.length || 0,\r\n        hasCourses: !!scheduleData.courses,\r\n        coursesCount: scheduleData.courses?.length || 0\r\n      });\r\n      \r\n      // CRITICAL FIX: Log entire first course to debug\r\n      if (scheduleData.courses && scheduleData.courses.length > 0) {\r\n        console.log(\"First course from API:\", scheduleData.courses[0]);\r\n      } else if (scheduleData.ScheduledCourses && scheduleData.ScheduledCourses.length > 0) {\r\n        console.log(\"First scheduled course from API:\", scheduleData.ScheduledCourses[0]);\r\n      } else {\r\n        console.log(\"No courses found in API response\");\r\n      }\r\n      \r\n      // Extract courses - priority order: courses → ScheduledCourses → []\r\n      let sourceCourses = [];\r\n      if (scheduleData.courses && scheduleData.courses.length > 0) {\r\n        console.log(`Using ${scheduleData.courses.length} courses from courses array`);\r\n        sourceCourses = scheduleData.courses;\r\n      } else if (scheduleData.ScheduledCourses && scheduleData.ScheduledCourses.length > 0) {\r\n        console.log(`Using ${scheduleData.ScheduledCourses.length} courses from ScheduledCourses array`);\r\n        sourceCourses = scheduleData.ScheduledCourses;\r\n      } else {\r\n        console.log(\"No courses found in schedule data\");\r\n      }\r\n\r\n      const processedCourses = normalizeCourseData(sourceCourses);\r\n\r\n      console.log(`Processed ${processedCourses.length} courses`);\r\n      if (processedCourses.length > 0) {\r\n        console.log(\"Sample processed course:\", processedCourses[0]);\r\n  \r\n        // Test time slot and day extraction for the first course\r\n        const testCourse = processedCourses[0];\r\n        console.log(\"Testing day/slot extraction for first course:\", {\r\n          course_id: testCourse.course_id,\r\n          timeslot_id: testCourse.timeslot_id,\r\n          day_of_week: testCourse.day_of_week,\r\n          slot_number: testCourse.time_slot_number,\r\n          normalizedDay: normalizeDayName(testCourse.day_of_week),\r\n          dayFromTimeslot: testCourse.timeslot_id?.match(/TS\\d+-([A-Z]+)/i)?.[1] || 'none'\r\n        });\r\n      }\r\n      \r\n      // Create enhanced schedule data with processed courses\r\n      const enhancedScheduleData = {\r\n        ...scheduleData,\r\n        courses: processedCourses\r\n      };\r\n      \r\n      setSchedule(enhancedScheduleData);\r\n      setScheduledCourses(processedCourses);\r\n      setFilteredCourses(processedCourses);\r\n      setConflicts(conflictsData);\r\n      \r\n      // Add detailed console logs to debug the courses array\r\n      console.log(\"CRITICAL DEBUG - State values after setting:\", {\r\n        scheduleDataExists: !!enhancedScheduleData,\r\n        coursesCount: processedCourses.length,\r\n        coursesSample: processedCourses.slice(0, 3).map(c => ({\r\n          id: c.course_id,\r\n          name: c.course_name,\r\n          timeslot: c.timeslot_id,\r\n          day: c.day_of_week\r\n        }))\r\n      });\r\n      \r\n      // Force a re-render by creating a timeout\r\n      setTimeout(() => {\r\n        console.log(\"Forcing re-render with fresh arrays\");\r\n        // Create new array references to force re-render\r\n        if (processedCourses.length > 0) {\r\n          setFilteredCourses([...processedCourses]);\r\n          setScheduledCourses([...processedCourses]);\r\n        }\r\n      }, 500);\r\n\r\n\r\n    } catch (err) {\r\n      console.error(`Error loading schedule ${scheduleId}:`, err);\r\n      setError('Failed to load the selected schedule');\r\n      setSchedule(null);\r\n      setScheduledCourses([]);\r\n      setFilteredCourses([]);\r\n      setConflicts([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const normalizeCourseData = (courses: any[]): any[] => {\r\n    if (!courses || !Array.isArray(courses)) {\r\n      console.log(\"No courses to normalize or courses is not an array\");\r\n      return [];\r\n    }\r\n    \r\n    console.log(`Normalizing ${courses.length} courses`);\r\n    \r\n    return courses.map((course: any, index: number) => {\r\n      // Log the first few raw courses to see their structure\r\n      if (index < 2) {\r\n        console.log(`Raw course data ${index}:`, course);\r\n      }\r\n      \r\n      // Extract course information from different possible structures\r\n      // Try direct properties first, then nested Course object\r\n      const courseId = \r\n        course.course_id || \r\n        (course.course?.course_id) || \r\n        (course.Course?.course_id) || \r\n        '';\r\n        \r\n      const courseName = \r\n        course.course_name || \r\n        (course.course?.course_name) || \r\n        (course.Course?.course_name) || \r\n        'Unnamed Course';\r\n      \r\n      // Similar approach for other properties\r\n      const timeSlotId = course.timeslot_id || course.time_slot_id || '';\r\n      let timeSlotNumber = null;\r\n      \r\n      // Extract time slot number from the ID\r\n      if (timeSlotId) {\r\n        const matches = timeSlotId.match(/TS(\\d+)/i);\r\n        if (matches && matches[1]) {\r\n          timeSlotNumber = parseInt(matches[1]);\r\n        }\r\n      }\r\n      \r\n      // Normalize day names\r\n      const dayOfWeek = course.day_of_week || '';\r\n      \r\n      // Create a normalized course object\r\n      const normalizedCourse = {\r\n        ...course,\r\n        course_id: courseId,\r\n        course_name: courseName,\r\n        timeslot_id: timeSlotId,\r\n        time_slot_id: timeSlotId,\r\n        time_slot_number: timeSlotNumber,\r\n        day_of_week: dayOfWeek,\r\n        professor_name: course.professor_name || \r\n          `${course.professor?.first_name || ''} ${course.professor?.last_name || ''}`.trim() || \r\n          'TBA',\r\n        is_core: course.is_core !== undefined ? course.is_core : \r\n          (course.course?.is_core || course.Course?.is_core || false)\r\n      };\r\n      \r\n      // Log the normalized course\r\n      if (index < 2) {\r\n        console.log(`Normalized course ${index}:`, {\r\n          id: normalizedCourse.course_id,\r\n          name: normalizedCourse.course_name,\r\n          timeslot: normalizedCourse.timeslot_id,\r\n          day: normalizedCourse.day_of_week,\r\n          slot_number: normalizedCourse.time_slot_number\r\n        });\r\n      }\r\n      \r\n      return normalizedCourse;\r\n    });\r\n  };\r\n\r\n\r\n  const handleRefresh = useCallback(async () => {\r\n    if (!selectedSemester) return;\r\n  \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log(`Refreshing schedule data for semester: ${selectedSemester}`);\r\n      \r\n      // First, refresh the list of available schedules\r\n      console.log(`Fetching available schedules for semester: ${selectedSemester}`);\r\n      await fetchAvailableSchedules(selectedSemester);\r\n      \r\n      // If we have a selected schedule, reload it\r\n      if (selectedScheduleId) {\r\n        console.log(`Reloading selected schedule: ${selectedScheduleId}`);\r\n        await loadScheduleById(selectedScheduleId);\r\n      } else {\r\n        console.log('No schedule selected, will try to select one from available schedules');\r\n        // If we don't have a selected schedule but we've just loaded available schedules,\r\n        // the fetchAvailableSchedules function will auto-select the first one\r\n      }\r\n      \r\n      // Reset filters\r\n      setSelectedDepartment('');\r\n      setSelectedProgram('all');\r\n      \r\n    } catch (err) {\r\n      console.error(\"Error refreshing data:\", err);\r\n      setError(\"Failed to refresh data. Please ensure schedules exist for this semester.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n      \r\n  }, [selectedSemester, selectedScheduleId, fetchAvailableSchedules, loadScheduleById]); // ADD THESE DEPENDENCIES\r\n\r\n  // Add this effect to check URL parameters\r\n  useEffect(() => {\r\n      // Check URL params for direct navigation from schedule generation\r\n    const queryParams = new URLSearchParams(window.location.search);\r\n    const semesterParam = queryParams.get('semester');\r\n    const refreshParam = queryParams.get('refresh');\r\n\r\n    if (semesterParam) {\r\n      console.log(`URL has semester param: ${semesterParam}, setting as selected`);\r\n      setSelectedSemester(semesterParam);\r\n      \r\n      // If refresh=true is in the URL, force a refresh\r\n      if (refreshParam === 'true') {\r\n        // Use setTimeout to ensure the semester state is updated first\r\n        setTimeout(() => handleRefresh(), 500);\r\n      }\r\n    }\r\n  }, [handleRefresh]);  // Empty dependency array means this runs once on component mount\r\n\r\n  // Initial data loading\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        // Get semesters\r\n        const semestersData = await semesterService.getAllSemesters();\r\n        setSemesters(semestersData);\r\n        \r\n        // Get departments and programs\r\n        const departmentsData = await departmentService.getAllDepartments();\r\n        const programsData = await programService.getAllPrograms();\r\n        \r\n        setDepartments(departmentsData);\r\n        setPrograms(programsData);\r\n        \r\n        // If we have semesters, try to get a schedule\r\n        if (semestersData.length > 0) {\r\n          // Find the current semester or use the first one\r\n          const currentSemester = semestersData.find((s: any) => s.is_current) || semestersData[0];\r\n          setSelectedSemester(currentSemester.semester_id);\r\n          \r\n          try {\r\n            // Try to get the active schedule for this semester\r\n            const scheduleData = await scheduleService.getActiveSchedule(currentSemester.semester_id);\r\n            const conflictsData = await scheduleService.getScheduleConflicts(scheduleData.schedule_id);\r\n            \r\n            setSchedule(scheduleData);\r\n            setScheduledCourses(scheduleData.courses || []);\r\n            setFilteredCourses(scheduleData.courses || []);\r\n            setConflicts(conflictsData);\r\n          } catch (err) {\r\n            // No schedule exists yet, show message to create one\r\n            console.log('No active schedule found:', err);\r\n            setError('No active schedule found for the selected semester. Please generate a new schedule.');\r\n          }\r\n        } else {\r\n          setError('No semesters found. Please create a semester before generating schedules.');\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching initial data:', err);\r\n        setError('Failed to load data. Please ensure your backend server is running.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Fetch schedules when semester changes\r\n  useEffect(() => {\r\n    if (selectedSemester) {\r\n      fetchAvailableSchedules(selectedSemester);\r\n    }\r\n  }, [selectedSemester, fetchAvailableSchedules]);\r\n  \r\n  // Load the selected schedule when selectedScheduleId changes\r\n  useEffect(() => {\r\n    if (selectedScheduleId) {\r\n      loadScheduleById(selectedScheduleId);\r\n    }\r\n  }, [selectedScheduleId, loadScheduleById]);\r\n  \r\n  // Apply filters when department, program, or search term changes\r\n  useEffect(() => {\r\n    if (!scheduledCourses.length) return;\r\n    \r\n    let filtered = [...scheduledCourses];\r\n  \r\n    // Add diagnostic logging\r\n    console.log(\"Starting filtering with\", {\r\n      totalCourses: scheduledCourses.length,\r\n      selectedDepartment,\r\n      selectedProgram,\r\n      searchTerm\r\n    });\r\n    \r\n    // Filter by department\r\n    if (selectedDepartment) {\r\n      filtered = filtered.filter(course => \r\n        course.department_id === selectedDepartment\r\n      );\r\n      console.log(\"After department filter:\", filtered.length);\r\n    }\r\n    \r\n    // Filter by program - if \"all\" is selected, don't filter by program\r\n    if (selectedProgram && selectedProgram !== 'all') {\r\n      filtered = filtered.filter(course => {\r\n        // Skip filtering if program_ids is missing\r\n        if (!course.program_ids) {\r\n          return true; // Keep courses without program_ids\r\n        }\r\n        return course.program_ids.includes(selectedProgram);\r\n      });\r\n      console.log(\"After program filter:\", filtered.length);\r\n    }\r\n    \r\n    // Filter by search term\r\n    if (searchTerm) {\r\n      const search = searchTerm.toLowerCase();\r\n      filtered = filtered.filter(course => \r\n        (course.course_name && course.course_name.toLowerCase().includes(search)) ||\r\n        (course.course_id && course.course_id.toLowerCase().includes(search)) ||\r\n        (course.professor_name && course.professor_name.toLowerCase().includes(search))\r\n      );\r\n      console.log(\"Final filtered courses after search:\", filtered.length);\r\n    }\r\n    \r\n    setFilteredCourses(filtered);\r\n  }, [scheduledCourses, selectedDepartment, selectedProgram, searchTerm]);\r\n\r\n\r\n\r\n  const handleDepartmentChange = (event: SelectChangeEvent) => {\r\n    const deptId = event.target.value as string;\r\n    setSelectedDepartment(deptId);\r\n    \r\n    // Reset program selection when department changes, but set to \"all\" instead of empty\r\n    setSelectedProgram('all');\r\n  };\r\n  \r\n  const handleProgramChange = (event: SelectChangeEvent) => {\r\n    setSelectedProgram(event.target.value as string);\r\n    \r\n    // If user selects \"all programs\", we need to update the filtered courses\r\n    // to show all courses for the selected department\r\n    if (event.target.value === 'all') {\r\n      let filtered = [...scheduledCourses];\r\n      \r\n      // Keep department filter if selected\r\n      if (selectedDepartment) {\r\n        filtered = filtered.filter(course => \r\n          course.department_id === selectedDepartment\r\n        );\r\n      }\r\n      \r\n      // Apply search filter if any\r\n      if (searchTerm) {\r\n        const search = searchTerm.toLowerCase();\r\n        filtered = filtered.filter(course => \r\n          course.course_name.toLowerCase().includes(search) ||\r\n          course.course_id.toLowerCase().includes(search) ||\r\n          (course.professor_name && course.professor_name.toLowerCase().includes(search))\r\n        );\r\n      }\r\n      \r\n      setFilteredCourses(filtered);\r\n    }\r\n  };\r\n  \r\n  const handleSemesterChange = (event: SelectChangeEvent) => {\r\n    setSelectedSemester(event.target.value as string);\r\n  };\r\n\r\n  // Add handler for schedule selection\r\n  const handleScheduleChange = (event: SelectChangeEvent) => {\r\n    console.log(`Selected schedule changed to: ${event.target.value}`);\r\n    setSelectedScheduleId(event.target.value as string);\r\n  };\r\n  \r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n  \r\n  const handleViewModeChange = (event: React.SyntheticEvent, newValue: string) => {\r\n    setViewMode(newValue);\r\n  };\r\n  \r\n  const handleDayChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setCurrentDay(newValue);\r\n  };\r\n  \r\n  const handleCreateSchedule = () => {\r\n    setShowGenerateForm(true);\r\n  };\r\n\r\n  const handleScheduleGenerated = (semesterId: string) => {\r\n    console.log(`Schedule generated for semester: ${semesterId}, refreshing data`);\r\n    setSelectedSemester(semesterId);\r\n    setShowGenerateForm(false);\r\n    // Reload the schedule data\r\n    setTimeout(() => {\r\n      handleRefresh();\r\n    }, 500);\r\n  };\r\n\r\n\r\n  const handleExport = () => {\r\n    if (!scheduleData || !filteredCourses.length) {\r\n      setError(\"No schedule data available to export\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Create a formatted schedule for export\r\n      const semesterName = semesters.find(s => s.semester_id === selectedSemester)?.name || 'Current Semester';\r\n      \r\n      // Create header rows\r\n      let csvContent = \"Course Schedule - \" + semesterName + \"\\n\";\r\n      csvContent += \"Generated on: \" + new Date().toLocaleString() + \"\\n\\n\";\r\n      \r\n      // Column headers\r\n      csvContent += \"Course ID,Course Name,Professor,Day,Time,Room,Type\\n\";\r\n      \r\n      // Add data rows\r\n      filteredCourses.forEach(course => {\r\n        const timeSlotId = course.time_slot_id;\r\n        const slotNumber = parseInt(timeSlotId.replace(/[^\\d]/g, ''));\r\n        const timeSlot = timeSlots.find(ts => ts.id === slotNumber) || { start: \"\", end: \"\" };\r\n        \r\n        const row = [\r\n          course.course_id,\r\n          course.course_name,\r\n          course.professor_name || 'TBA',\r\n          course.day_of_week,\r\n          `${timeSlot.start}-${timeSlot.end}`,\r\n          course.room || 'TBA',\r\n          course.is_core ? 'Core' : 'Elective'\r\n        ];\r\n        \r\n        csvContent += row.join(',') + '\\n';\r\n      });\r\n      \r\n      // Create and download the file\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', `schedule_${semesterName.replace(/\\s+/g, '_')}.csv`);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    } catch (err) {\r\n      console.error(\"Error exporting schedule:\", err);\r\n      setError(\"Failed to export schedule\");\r\n    }\r\n  };\r\n  \r\n  // Function to determine background color for course blocks\r\n  const getCourseColor = (course: any) => {\r\n    if (course.is_override) return 'rgba(255, 152, 0, 0.8)'; // Orange for overrides\r\n    if (course.is_core) return 'rgba(25, 118, 210, 0.8)'; // Blue for core courses\r\n    return 'rgba(76, 175, 80, 0.8)'; // Green for electives\r\n  };\r\n\r\n  // Helper function to check if a course has conflicts\r\n  const hasConflict = (course: any) => {\r\n    return conflicts.some(conflict => \r\n      conflict.courses.some((c: any) => c.scheduled_course_id === course.scheduled_course_id) &&\r\n      !conflict.is_resolved\r\n    );\r\n  };\r\n\r\n  // Function to find courses for a specific timeslot and day\r\n  const getCoursesForTimeSlot = (slotNumber: number, day: string): any[] => {\r\n    // Generate a unique ID for this specific call\r\n    const callId = Math.random().toString(36).substring(2, 5);\r\n    \r\n    // Log the call details\r\n    console.log(`[${callId}] Looking for courses in slot ${slotNumber} on ${day}`);\r\n    \r\n    // Skip if we have no courses data\r\n    if (!scheduleData?.courses?.length) {\r\n      console.log(`[${callId}] No courses data available`);\r\n      return [];\r\n    }\r\n    \r\n    // Log the first few courses to see their format\r\n    if (slotNumber === 1 && day === 'Monday') {\r\n      console.log(`[${callId}] Sample course data:`, \r\n        scheduleData.courses.slice(0, 2).map((c: any) => ({\r\n          id: c.course_id, \r\n          name: c.course_name,\r\n          day: c.day_of_week,\r\n          timeslot: c.timeslot_id\r\n        }))\r\n      );\r\n    }\r\n    \r\n    // Try multiple matching strategies\r\n    const matches = scheduleData.courses.filter((course: any) => {\r\n      // Skip nulls\r\n      if (!course) return false;\r\n      \r\n      // Direct match on format TS3-MON\r\n      const expectedTimeslotId = `TS${slotNumber}-${day.substring(0,3).toUpperCase()}`;\r\n      \r\n      // Try multiple ways to match the day and slot\r\n      const matchesDay = \r\n        (course.day_of_week === day) ||\r\n        (course.timeslot_id?.includes(day.substring(0,3).toUpperCase()));\r\n        \r\n      const matchesSlot = \r\n        (course.timeslot_id === expectedTimeslotId) ||\r\n        (course.time_slot_number === slotNumber) ||\r\n        (course.timeslot_id?.includes(`TS${slotNumber}`));\r\n      \r\n      const isMatch = matchesDay && matchesSlot;\r\n      \r\n      if (isMatch) {\r\n        console.log(`[${callId}] Found match: ${course.course_name || course.course_id || 'unnamed course'}`);\r\n      }\r\n      \r\n      return isMatch;\r\n    });\r\n    \r\n    console.log(`[${callId}] Found ${matches.length} courses for slot ${slotNumber} on ${day}`);\r\n    return matches;\r\n  };\r\n\r\n\r\n  // Function to accept a conflict\r\n  const handleAcceptConflict = async (conflictId: string) => {\r\n    try {\r\n      await scheduleService.resolveConflict(conflictId, {\r\n        action: 'ACCEPT',\r\n        notes: 'Conflict accepted by administrator'\r\n      });\r\n      \r\n      // Update local state\r\n      setConflicts(conflicts.map(conflict => \r\n        conflict.conflict_id === conflictId \r\n          ? { ...conflict, is_resolved: true, resolution_notes: 'Conflict accepted by administrator' }\r\n          : conflict\r\n      ));\r\n    } catch (err) {\r\n      console.error(\"Error accepting conflict:\", err);\r\n      setError(\"Failed to accept conflict\");\r\n    }\r\n  };\r\n\r\n  // Function to override a conflict\r\n  const handleOverrideConflict = async (conflictId: string) => {\r\n    // In a real implementation, this would open a dialog to collect details\r\n    try {\r\n      // Simplified implementation for now\r\n      setConflicts(conflicts.map(conflict => \r\n        conflict.conflict_id === conflictId \r\n          ? { ...conflict, is_resolved: true, resolution_notes: 'Conflict overridden by administrator' }\r\n          : conflict\r\n      ));\r\n    } catch (err) {\r\n      console.error(\"Error overriding conflict:\", err);\r\n      setError(\"Failed to override conflict\");\r\n    }\r\n  };\r\n\r\n  // Function to render a course block in the timetable\r\n  const renderCourseBlock = (course: any) => {\r\n    const courseHasConflict = hasConflict(course);\r\n    \r\n    return (\r\n      <Box\r\n        key={course.scheduled_course_id}\r\n        sx={{\r\n          backgroundColor: getCourseColor(course),\r\n          color: 'white',\r\n          p: 1,\r\n          borderRadius: 1,\r\n          mb: 1,\r\n          position: 'relative',\r\n          cursor: 'pointer',\r\n          '&:hover': {\r\n            opacity: 0.9,\r\n          }\r\n        }}\r\n      >\r\n        <Typography variant=\"subtitle2\" fontWeight=\"bold\" noWrap>\r\n          {course.course_name}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" noWrap>\r\n          {course.course_id}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" noWrap>\r\n          Prof. {course.professor_name || 'TBA'}\r\n        </Typography>\r\n        \r\n        {courseHasConflict && (\r\n          <Tooltip title=\"This course has scheduling conflicts\">\r\n            <WarningIcon \r\n              sx={{ \r\n                position: 'absolute', \r\n                top: 5, \r\n                right: 5, \r\n                color: 'orange',\r\n                fontSize: 20\r\n              }} \r\n            />\r\n          </Tooltip>\r\n        )}\r\n      </Box>\r\n    );\r\n  };\r\n  \r\n  \r\n  // Render weekly view\r\n  const renderWeekView = () => {\r\n    console.log(\"RENDER DEBUG: Starting renderWeekView function\");\r\n    \r\n    // Basic existence checks\r\n    console.log(\"RENDER DEBUG: Data check\", {\r\n      scheduleDataExists: !!scheduleData,\r\n      hasCoursesArray: !!scheduleData?.courses,\r\n      coursesLength: scheduleData?.courses?.length || 0,\r\n      hasScheduledCourses: !!scheduledCourses,\r\n      scheduledCoursesLength: scheduledCourses?.length || 0\r\n    });\r\n    \r\n    // If we have NO courses at all, show an error\r\n    if (!scheduleData?.courses?.length) {\r\n      console.error(\"RENDER DEBUG: No courses exist in scheduleData\");\r\n      return (\r\n        <Paper sx={{ mt: 2, p: 3, textAlign: 'center' }}>\r\n          <Typography variant=\"h6\" color=\"error\">\r\n            No courses found for this schedule. The schedule data may be empty.\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n            Debug info: scheduleId={scheduleData?.schedule_id || 'none'}\r\n          </Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    \r\n    // Test a specific day/slot combination we know should have a course\r\n    const testSlots = [1, 2, 3, 4, 5];\r\n    const testDays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\r\n    \r\n    console.log(\"RENDER DEBUG: Testing sample time slot matching\");\r\n    \r\n    testSlots.forEach(slot => {\r\n      testDays.forEach(day => {\r\n        const coursesForSlot = getCoursesForTimeSlot(slot, day);\r\n        if (coursesForSlot.length > 0) {\r\n          console.log(`RENDER DEBUG: Found ${coursesForSlot.length} courses for ${day} slot ${slot}`);\r\n          console.log(\"RENDER DEBUG: First matching course:\", coursesForSlot[0]);\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Modified version of the original renderWeekView code\r\n    return (\r\n      <Paper sx={{ mt: 2, overflowX: 'auto' }}>\r\n        <Box sx={{ minWidth: 800 }}>\r\n          <Grid container>\r\n            {/* Time slots column */}\r\n            <Grid item xs={1}>\r\n              <Box sx={{ borderRight: 1, borderColor: 'divider', height: '100%', pt: 7 }}>\r\n                {timeSlots.map(slot => (\r\n                  <Box \r\n                    key={slot.id} \r\n                    sx={{ \r\n                      height: 120, \r\n                      p: 1, \r\n                      borderBottom: 1, \r\n                      borderColor: 'divider',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"caption\">\r\n                      {slot.start} - {slot.end}\r\n                    </Typography>\r\n                  </Box>\r\n                ))}\r\n              </Box>\r\n            </Grid>\r\n  \r\n            {/* Days columns */}\r\n            {daysOfWeek.map((day, index) => (\r\n              <Grid item xs key={day}>\r\n                <Box sx={{ borderRight: index < daysOfWeek.length - 1 ? 1 : 0, borderColor: 'divider' }}>\r\n                  {/* Day header */}\r\n                  <Box \r\n                    sx={{ \r\n                      p: 2, \r\n                      borderBottom: 1, \r\n                      borderColor: 'divider',\r\n                      textAlign: 'center',\r\n                      fontWeight: 'bold',\r\n                      bgcolor: 'grey.100'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"subtitle1\">{day}</Typography>\r\n                  </Box>\r\n  \r\n                  {/* Time slots */}\r\n                  {timeSlots.map(slot => {\r\n                    // Get courses using the simplified function\r\n                    const coursesForSlot = getCoursesForTimeSlot(slot.id, day);\r\n                    \r\n                    // Log what we found for this slot\r\n                    console.log(`RENDER DEBUG: Slot ${slot.id} on ${day}: ${coursesForSlot.length} courses`);\r\n                    \r\n                    return (\r\n                      <Box \r\n                        key={`${day}-${slot.id}`}\r\n                        sx={{ \r\n                          height: 120, \r\n                          p: 1, \r\n                          borderBottom: 1, \r\n                          borderColor: 'divider',\r\n                          overflow: 'auto',\r\n                          // Add a background color to see the cell even if it's empty\r\n                          bgcolor: coursesForSlot.length > 0 ? 'inherit' : 'rgba(0,0,0,0.02)'\r\n                        }}\r\n                      >\r\n                        {coursesForSlot.length > 0 ? (\r\n                          coursesForSlot.map(course => (\r\n                            <Box\r\n                              key={course.scheduled_course_id}\r\n                              sx={{\r\n                                backgroundColor: getCourseColor(course),\r\n                                color: 'white',\r\n                                p: 1,\r\n                                borderRadius: 1,\r\n                                mb: 1,\r\n                                position: 'relative',\r\n                                cursor: 'pointer',\r\n                                '&:hover': {\r\n                                  opacity: 0.9,\r\n                                }\r\n                              }}\r\n                            >\r\n                              <Typography variant=\"subtitle2\" fontWeight=\"bold\" noWrap>\r\n                                {course.course_name || 'Unknown Course'}\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" display=\"block\" noWrap>\r\n                                {course.course_id || 'No ID'}\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" display=\"block\" noWrap>\r\n                                Prof. {course.professor_name || 'TBA'}\r\n                              </Typography>\r\n                            </Box>\r\n                          ))\r\n                        ) : (\r\n                          // Empty indicator with cell coordinates for debugging\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            {day}-{slot.id}: No courses\r\n                          </Typography>\r\n                        )}\r\n                      </Box>\r\n                    );\r\n                  })}\r\n                </Box>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Box>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n\r\n  \r\n  // Render day view\r\n  const renderDayView = () => {\r\n    if (!filteredCourses.length) {\r\n      return (\r\n        <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n          <Typography>No schedule data available or no courses match your filters.</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n\r\n    const day = daysOfWeek[currentDay];\r\n    const dayFilteredCourses = filteredCourses.filter(course => course.day_of_week === day);\r\n\r\n    return (\r\n      <Paper sx={{ mt: 2 }}>\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {day}'s Schedule\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {timeSlots.map(slot => {\r\n              const coursesForSlot = dayFilteredCourses.filter(course => \r\n                course.time_slot_id === `TS${slot.id}-${day.substring(0, 3).toUpperCase()}`\r\n              );\r\n\r\n              return (\r\n                <Grid item xs={12} key={slot.id}>\r\n                  <Paper \r\n                    elevation={1} \r\n                    sx={{ \r\n                      p: 2, \r\n                      borderLeft: 4, \r\n                      borderColor: coursesForSlot.length > 0 ? 'primary.main' : 'grey.300'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                      {slot.start} - {slot.end}\r\n                    </Typography>\r\n                    <Box sx={{ mt: 1 }}>\r\n                      {coursesForSlot.length > 0 ? (\r\n                        coursesForSlot.map(course => renderCourseBlock(course))\r\n                      ) : (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          No courses scheduled\r\n                        </Typography>\r\n                      )}\r\n                    </Box>\r\n                  </Paper>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Box>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Function to render the conflicts section\r\n  const renderConflicts = () => {\r\n    const displayConflicts = showResolvedConflicts \r\n      ? conflicts \r\n      : conflicts.filter(conflict => !conflict.is_resolved);\r\n    \r\n    if (displayConflicts.length === 0) {\r\n      return (\r\n        <Alert severity=\"success\" sx={{ mt: 3 }}>\r\n          No unresolved conflicts in this schedule.\r\n        </Alert>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <Paper sx={{ mt: 3, p: 2 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n          <Typography variant=\"h6\">\r\n            Conflicts ({displayConflicts.length})\r\n          </Typography>\r\n          <Button \r\n            variant=\"outlined\" \r\n            size=\"small\"\r\n            onClick={() => setShowResolvedConflicts(!showResolvedConflicts)}\r\n          >\r\n            {showResolvedConflicts ? 'Hide Resolved' : 'Show Resolved'}\r\n          </Button>\r\n        </Box>\r\n        \r\n        <Grid container spacing={2}>\r\n          {displayConflicts.map(conflict => (\r\n            <Grid item xs={12} key={conflict.conflict_id}>\r\n              <Paper \r\n                elevation={1} \r\n                sx={{ \r\n                  p: 2, \r\n                  borderLeft: 4, \r\n                  borderColor: conflict.is_resolved ? 'success.main' : 'warning.main'\r\n                }}\r\n              >\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                  <Box>\r\n                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>\r\n                      {conflict.conflict_type}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {conflict.description}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\">\r\n                      Time: {conflict.day_of_week}, {conflict.time_slot?.name || 'Unknown time slot'}\r\n                    </Typography>\r\n                    \r\n                    {conflict.courses && conflict.courses.length > 0 && (\r\n                      <Box sx={{ mt: 1 }}>\r\n                        <Typography variant=\"body2\" sx={{ fontWeight: 'medium' }}>\r\n                          Affected Courses:\r\n                        </Typography>\r\n                        {conflict.courses.map((course: any) => (\r\n                          <Typography key={course.scheduled_course_id} variant=\"body2\" sx={{ ml: 2 }}>\r\n                            • {course.course_name} (Prof. {course.professor_name})\r\n                          </Typography>\r\n                        ))}\r\n                      </Box>\r\n                    )}\r\n                    \r\n                    {conflict.is_resolved && (\r\n                      <Box sx={{ mt: 1, p: 1, bgcolor: 'success.light', borderRadius: 1 }}>\r\n                        <Typography variant=\"body2\" color=\"success.contrastText\">\r\n                          <strong>Resolution:</strong> {conflict.resolution_notes}\r\n                        </Typography>\r\n                      </Box>\r\n                    )}\r\n                  </Box>\r\n                  \r\n                  {!conflict.is_resolved && (\r\n                    <Box>\r\n                      <Button \r\n                        variant=\"outlined\" \r\n                        color=\"primary\" \r\n                        size=\"small\" \r\n                        onClick={() => handleOverrideConflict(conflict.conflict_id)}\r\n                        sx={{ mr: 1 }}\r\n                      >\r\n                        Override\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        onClick={() => handleAcceptConflict(conflict.conflict_id)}\r\n                      >\r\n                        Accept\r\n                      </Button>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              </Paper>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  const renderTestCourseList = () => {\r\n    if (!scheduleData?.courses?.length) {\r\n      return (\r\n        <Paper sx={{ mt: 2, p: 3 }}>\r\n          <Typography>No courses available</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <Paper sx={{ mt: 2, p: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>DEBUG: All Courses ({scheduleData.courses.length})</Typography>\r\n        <Box sx={{ maxHeight: 400, overflow: 'auto' }}>\r\n          {scheduleData.courses.map((course: any, index: number) => (\r\n            <Box key={index} sx={{ p: 1, borderBottom: 1, borderColor: 'divider' }}>\r\n              <Typography variant=\"subtitle2\">\r\n                ID: {course.course_id || 'unknown'}, Name: {course.course_name || 'unnamed'}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Day: {course.day_of_week || 'none'}, Time Slot: {course.timeslot_id || 'none'}\r\n              </Typography>\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\">\r\n      <Box sx={{ mt: 4, mb: 4 }}>\r\n        {/* Header */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n          <Typography variant=\"h4\" component=\"h1\">\r\n            Schedule\r\n          </Typography>\r\n          <Box>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={handleRefresh}\r\n              sx={{ mr: 2 }}\r\n            >\r\n              Refresh\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              startIcon={<GetAppIcon />}\r\n              onClick={handleExport}\r\n              sx={{ mr: 2 }}\r\n            >\r\n              Export\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<AddIcon />}\r\n              onClick={handleCreateSchedule}\r\n            >\r\n              Generate New Schedule\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n            <AlertTitle>Error</AlertTitle>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Filters */}\r\n        <Card sx={{ mb: 4 }}>\r\n          <CardContent>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n              <Grid item xs={12} md={2.4}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                  <InputLabel id=\"semester-select-label\">Semester</InputLabel>\r\n                  <Select\r\n                    labelId=\"semester-select-label\"\r\n                    value={selectedSemester}\r\n                    onChange={handleSemesterChange}\r\n                    label=\"Semester\"\r\n                  >\r\n                    {semesters.map((semester: any) => (\r\n                      <MenuItem key={semester.semester_id} value={semester.semester_id}>\r\n                        {semester.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={2.4}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                  <InputLabel id=\"schedule-select-label\">Schedule</InputLabel>\r\n                  <Select\r\n                    labelId=\"schedule-select-label\"\r\n                    value={selectedScheduleId}\r\n                    onChange={handleScheduleChange}\r\n                    label=\"Schedule\"\r\n                    disabled={availableSchedules.length === 0}\r\n                  >\r\n                    {availableSchedules.map((schedule) => (\r\n                      <MenuItem key={schedule.schedule_id} value={schedule.schedule_id}>\r\n                        {schedule.name} {schedule.is_final ? '(Final)' : ''}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={2.4}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                  <InputLabel id=\"department-select-label\">Department</InputLabel>\r\n                  <Select\r\n                    labelId=\"department-select-label\"\r\n                    value={selectedDepartment}\r\n                    onChange={handleDepartmentChange}\r\n                    label=\"Department\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>All Departments</em>\r\n                    </MenuItem>\r\n                    {departments.map((department) => (\r\n                      <MenuItem key={department.department_id} value={department.department_id}>\r\n                        {department.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={2.4}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                  <InputLabel id=\"program-select-label\">Program</InputLabel>\r\n                  <Select\r\n                    labelId=\"program-select-label\"\r\n                    value={selectedProgram}\r\n                    onChange={handleProgramChange}\r\n                    label=\"Program\"\r\n                    disabled={!selectedDepartment}\r\n                  >\r\n                    <MenuItem value=\"all\">\r\n                      <em>All Programs</em>\r\n                    </MenuItem>\r\n                    {programs\r\n                      .filter(program => !selectedDepartment || program.department_id === selectedDepartment)\r\n                      .map((program) => (\r\n                        <MenuItem key={program.program_id} value={program.program_id}>\r\n                          {program.name}\r\n                        </MenuItem>\r\n                      ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={2.4}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Search\"\r\n                  variant=\"outlined\"\r\n                  value={searchTerm}\r\n                  onChange={handleSearchChange}\r\n                  placeholder=\"Search courses\"\r\n                  InputProps={{\r\n                    endAdornment: <SearchIcon color=\"action\" />\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        {/* View Mode Tabs */}\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\r\n        <Tabs value={viewMode} onChange={handleViewModeChange}>\r\n\r\n<Tab label=\"Week View\" value=\"week\" />\r\n\r\n<Tab label=\"Day View\" value=\"day\" />\r\n\r\n</Tabs>\r\n\r\n</Box>\r\n\r\n\r\n\r\n{/* Day Selection Tabs (for Day View) */}\r\n\r\n{viewMode === 'day' && (\r\n\r\n<Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\r\n\r\n<Tabs value={currentDay} onChange={handleDayChange}>\r\n\r\n  {daysOfWeek.map((day, index) => (\r\n\r\n    <Tab key={day} label={day} value={index} />\r\n\r\n  ))}\r\n\r\n</Tabs>\r\n\r\n</Box>\r\n\r\n)}\r\n\r\n\r\n\r\n{/* Schedule Display */}\r\n\r\n{viewMode === 'week' ? renderWeekView() : renderDayView()}\r\n\r\n\r\n\r\n{/* Conflicts */}\r\n\r\n{renderConflicts()}\r\n\r\n{/* DEBUG: Show all courses directly */}\r\n{renderTestCourseList()}\r\n\r\n\r\n{/* Legend */}\r\n\r\n<Box sx={{ mt: 3, display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n\r\n<Box sx={{ display: 'flex', alignItems: 'center', mr: 3, mb: 1 }}>\r\n\r\n<Box sx={{ width: 16, height: 16, bgcolor: 'rgba(25, 118, 210, 0.8)', mr: 1, borderRadius: 1 }} />\r\n\r\n<Typography variant=\"caption\">Core Course</Typography>\r\n\r\n</Box>\r\n\r\n<Box sx={{ display: 'flex', alignItems: 'center', mr: 3, mb: 1 }}>\r\n\r\n<Box sx={{ width: 16, height: 16, bgcolor: 'rgba(76, 175, 80, 0.8)', mr: 1, borderRadius: 1 }} />\r\n\r\n<Typography variant=\"caption\">Elective Course</Typography>\r\n\r\n</Box>\r\n\r\n<Box sx={{ display: 'flex', alignItems: 'center', mr: 3, mb: 1 }}>\r\n\r\n<Box sx={{ width: 16, height: 16, bgcolor: 'rgba(255, 152, 0, 0.8)', mr: 1, borderRadius: 1 }} />\r\n\r\n<Typography variant=\"caption\">Overridden Course</Typography>\r\n\r\n</Box>\r\n\r\n<Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n\r\n<WarningIcon sx={{ color: 'orange', fontSize: 16, mr: 1 }} />\r\n\r\n<Typography variant=\"caption\">Scheduling Conflict</Typography>\r\n\r\n</Box>\r\n\r\n</Box>\r\n\r\n</Box>\r\n\r\n{showGenerateForm && (\r\n  <Dialog open={showGenerateForm} onClose={() => setShowGenerateForm(false)} maxWidth=\"md\" fullWidth>\r\n    <DialogTitle>Generate New Schedule</DialogTitle>\r\n    <DialogContent>\r\n      <GenerateSchedule \r\n        onScheduleGenerated={handleScheduleGenerated} \r\n        onClose={() => setShowGenerateForm(false)}\r\n      />\r\n    </DialogContent>\r\n    <DialogActions>\r\n      <Button onClick={() => setShowGenerateForm(false)}>Cancel</Button>\r\n    </DialogActions>\r\n  </Dialog>\r\n)}\r\n\r\n</Container>\r\n\r\n\r\n\r\n);\r\n\r\n};\r\n\r\nexport default ScheduleView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}