{"ast":null,"code":"var _jsxFileName = \"/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/professors/ProfessorForm.tsx\",\n  _s = $RefreshSig$();\n// ProfessorForm.tsx \nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, TextField, Box, Checkbox, FormControlLabel, ListItemText, Typography, IconButton, Paper, Tooltip } from '@mui/material';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport professorService from '../../../services/professorService';\n\n// Interface for professor assignment\n\n// Interface for course semester information\n\n// Interface for course selection with semester information\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfessorForm = ({\n  open,\n  professor,\n  departments,\n  courses,\n  onClose,\n  onSave\n}) => {\n  _s();\n  // Log all props for debugging\n  console.log('ProfessorForm rendered with props:', {\n    open,\n    professor,\n    departments\n  });\n  const [formData, setFormData] = useState({\n    professor_id: '',\n    department_id: '',\n    first_name: '',\n    last_name: '',\n    email: '',\n    password_hash: '',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  });\n  const [errors, setErrors] = useState({});\n\n  // State to manage course selections with their respective semesters\n  const [courseSelections, setCourseSelections] = useState([]);\n\n  // State to track course semester info\n  const [courseSemesterInfo, setCourseSemesterInfo] = useState({});\n\n  // State to track loading state\n  const [loading, setLoading] = useState({});\n\n  // Filter courses based on selected department\n  const filteredCourses = formData.department_id ? courses.filter(course => course.department_id === formData.department_id) : [];\n\n  // Fetch course semester data\n  const fetchCourseSemesterData = useCallback(async courseId => {\n    if (!courseId) return;\n\n    // Set loading state for this course\n    setLoading(prev => ({\n      ...prev,\n      [courseId]: true\n    }));\n    try {\n      // Fetch data about available semesters and professor assignments\n      const data = await professorService.getCourseSemesters(courseId);\n\n      // Update state with the fetched data\n      setCourseSemesterInfo(prev => ({\n        ...prev,\n        [courseId]: {\n          availableSemesters: data.available_semesters || ['Fall', 'Spring'],\n          assignedProfessors: data.assigned_professors || []\n        }\n      }));\n    } catch (error) {\n      console.error(`Error fetching semester data for course ${courseId}:`, error);\n      // Set default values if there's an error\n      setCourseSemesterInfo(prev => ({\n        ...prev,\n        [courseId]: {\n          availableSemesters: ['Fall', 'Spring'],\n          assignedProfessors: []\n        }\n      }));\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [courseId]: false\n      }));\n    }\n  }, []);\n  useEffect(() => {\n    // Add comprehensive debugging\n    console.log('Professor in useEffect:', professor);\n    console.log('Professor type:', typeof professor);\n    if (professor) {\n      // Log all keys and values\n      console.log('Professor keys:', Object.keys(professor));\n      console.log('Professor values:', Object.values(professor));\n\n      // Try to access course_ids in different ways\n      console.log('Direct course_ids:', professor.course_ids);\n      console.log('Bracket course_ids:', professor['course_ids']);\n      setFormData({\n        ...professor\n      });\n\n      // Debug log to see if course_ids exists\n      console.log('Course IDs from professor:', professor.course_ids);\n\n      // Create a comprehensive set of all semesters from all sources\n      const allSemesters = new Set();\n\n      // Add from direct professor.semesters\n      if (professor.semesters && Array.isArray(professor.semesters)) {\n        professor.semesters.forEach(semester => allSemesters.add(semester));\n      }\n\n      // Also check course_semesters\n      if (professor.course_semesters) {\n        Object.values(professor.course_semesters).forEach(semesters => {\n          if (Array.isArray(semesters)) {\n            semesters.forEach(semester => allSemesters.add(semester));\n          }\n        });\n      }\n\n      // Also check individual course professor_course associations\n      if (professor.courses && Array.isArray(professor.courses)) {\n        professor.courses.forEach(course => {\n          var _course$professor_cou;\n          if ((_course$professor_cou = course.professor_course) !== null && _course$professor_cou !== void 0 && _course$professor_cou.semester) {\n            allSemesters.add(course.professor_course.semester);\n          }\n        });\n      }\n      console.log('All semesters collected:', Array.from(allSemesters));\n\n      // Check if professor has course_ids\n      if (professor.course_ids && Array.isArray(professor.course_ids) && professor.course_ids.length > 0) {\n        console.log('Professor data for course selections:', professor);\n\n        // Create a mapping of course_id -> array of semesters\n        const courseSemestersMap = {};\n\n        // If we have courses from the API\n        if (professor.courses && Array.isArray(professor.courses)) {\n          // Process each course's semester data\n          professor.courses.forEach(course => {\n            var _course$professor_cou2;\n            const courseId = course.course_id;\n            const semester = (_course$professor_cou2 = course.professor_course) === null || _course$professor_cou2 === void 0 ? void 0 : _course$professor_cou2.semester;\n            if (courseId && semester) {\n              if (!courseSemestersMap[courseId]) {\n                courseSemestersMap[courseId] = [];\n              }\n\n              // Add semester if not already in the array\n              if (!courseSemestersMap[courseId].includes(semester)) {\n                courseSemestersMap[courseId].push(semester);\n              }\n            }\n          });\n        }\n\n        // Also check if we have course_semesters data directly\n        if (professor.course_semesters) {\n          Object.keys(professor.course_semesters).forEach(courseId => {\n            const semesters = professor.course_semesters[courseId];\n            if (!courseSemestersMap[courseId]) {\n              courseSemestersMap[courseId] = [];\n            }\n\n            // Add each semester if not already in the array\n            semesters.forEach(semester => {\n              if (!courseSemestersMap[courseId].includes(semester)) {\n                courseSemestersMap[courseId].push(semester);\n              }\n            });\n          });\n        }\n        console.log('Course semesters map created:', courseSemestersMap);\n\n        // Now create the course selections\n        const selections = professor.course_ids.map(courseId => {\n          // Get the semesters for this course from our map\n          // Fall back to all collected semesters, and finally to ['Fall'] if nothing else\n          const semesters = courseSemestersMap[courseId] && courseSemestersMap[courseId].length > 0 ? courseSemestersMap[courseId] : allSemesters.size > 0 ? Array.from(allSemesters) : ['Fall'];\n          return {\n            courseId,\n            selectedSemesters: semesters,\n            disabledSemesters: {}\n          };\n        });\n        console.log('Setting course selections with proper semesters:', selections);\n        setCourseSelections(selections);\n\n        // Fetch semester data for each course\n        selections.forEach(selection => {\n          if (selection.courseId) {\n            fetchCourseSemesterData(selection.courseId);\n          }\n        });\n      } else {\n        console.log('No course IDs found, setting empty selections');\n        setCourseSelections([]);\n      }\n    } else {\n      // For new professors, reset the form\n      setFormData({\n        professor_id: '',\n        department_id: departments.length > 0 ? departments[0].department_id : '',\n        first_name: '',\n        last_name: '',\n        email: '',\n        password_hash: '',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      setCourseSelections([]);\n    }\n    setErrors({});\n  }, [professor, departments, fetchCourseSemesterData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name) {\n      setFormData(prev => ({\n        ...prev,\n        [name]: value\n      }));\n\n      // Clear error for this field when user types\n      if (errors[name]) {\n        setErrors(prev => {\n          const newErrors = {\n            ...prev\n          };\n          delete newErrors[name];\n          return newErrors;\n        });\n      }\n    }\n  };\n\n  // Add a new course selection\n  const handleAddCourse = () => {\n    setCourseSelections([...courseSelections, {\n      courseId: '',\n      selectedSemesters: [],\n      disabledSemesters: {}\n    }]);\n  };\n\n  // Remove a course selection\n  const handleRemoveCourse = index => {\n    const updatedSelections = [...courseSelections];\n    updatedSelections.splice(index, 1);\n    setCourseSelections(updatedSelections);\n  };\n\n  // Update a specific course selection\n  const handleCourseChange = (index, courseId) => {\n    const updatedSelections = [...courseSelections];\n    updatedSelections[index] = {\n      ...updatedSelections[index],\n      courseId,\n      selectedSemesters: []\n    };\n    setCourseSelections(updatedSelections);\n\n    // Fetch semester data for this course\n    if (courseId) {\n      fetchCourseSemesterData(courseId);\n    }\n  };\n\n  // Handle semester selection for a specific course\n  const handleSemesterChange = (index, semester) => {\n    var _currentSelection$dis;\n    const updatedSelections = [...courseSelections];\n    const currentSelection = updatedSelections[index];\n\n    // Check if the semester is disabled\n    if ((_currentSelection$dis = currentSelection.disabledSemesters[semester]) !== null && _currentSelection$dis !== void 0 && _currentSelection$dis.disabled) {\n      return; // Do nothing if the semester is disabled\n    }\n    const currentSemesters = [...currentSelection.selectedSemesters];\n    const semesterIndex = currentSemesters.indexOf(semester);\n    if (semesterIndex > -1) {\n      // Remove semester if already selected\n      currentSemesters.splice(semesterIndex, 1);\n    } else {\n      // Add semester if not selected\n      currentSemesters.push(semester);\n    }\n    updatedSelections[index] = {\n      ...currentSelection,\n      selectedSemesters: currentSemesters\n    };\n    setCourseSelections(updatedSelections);\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.first_name.trim()) {\n      newErrors.first_name = 'First name is required';\n    }\n    if (!formData.last_name.trim()) {\n      newErrors.last_name = 'Last name is required';\n    }\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Invalid email format';\n    }\n    if (!formData.department_id) {\n      newErrors.department_id = 'Department is required';\n    }\n\n    // Generate a professor_id if creating a new professor\n    if (!professor && !formData.professor_id) {\n      // We can either generate an ID here or let the backend generate it\n      // For consistency with other forms, let's generate one\n      formData.professor_id = `PROF-${Math.random().toString(36).substring(2, 10).toUpperCase()}`;\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = () => {\n    if (validateForm()) {\n      // Build course_semesters object\n      const course_semesters = {};\n      courseSelections.forEach(selection => {\n        if (selection.courseId && selection.selectedSemesters.length > 0) {\n          course_semesters[selection.courseId] = selection.selectedSemesters;\n        }\n      });\n\n      // Extract course IDs\n      const courseIds = courseSelections.filter(selection => selection.courseId !== '').map(selection => selection.courseId);\n      console.log('Course selections at submission:', courseSelections);\n      console.log('Course IDs being submitted:', courseIds);\n      console.log('Course semesters being submitted:', course_semesters);\n      const professorData = {\n        ...formData,\n        course_ids: courseIds,\n        course_semesters: course_semesters,\n        updated_at: new Date().toISOString()\n      };\n      console.log('Submitting professor data:', professorData);\n      onSave(professorData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: onClose,\n    maxWidth: \"md\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: professor ? 'Edit Professor' : 'Add New Professor'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"first_name\",\n            label: \"First Name\",\n            fullWidth: true,\n            value: formData.first_name,\n            onChange: handleChange,\n            error: !!errors.first_name,\n            helperText: errors.first_name,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"last_name\",\n            label: \"Last Name\",\n            fullWidth: true,\n            value: formData.last_name,\n            onChange: handleChange,\n            error: !!errors.last_name,\n            helperText: errors.last_name,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"email\",\n            label: \"Email\",\n            type: \"email\",\n            fullWidth: true,\n            value: formData.email,\n            onChange: handleChange,\n            error: !!errors.email,\n            helperText: errors.email,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            error: !!errors.department_id,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"department-label\",\n              children: \"Department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"department-label\",\n              name: \"department_id\",\n              value: formData.department_id,\n              onChange: handleChange,\n              label: \"Department\",\n              required: true,\n              children: departments.map(dept => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: dept.department_id,\n                children: dept.name\n              }, dept.department_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 15\n            }, this), errors.department_id && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: errors.department_id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), !professor && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"professor_id\",\n            label: \"Professor ID (optional)\",\n            fullWidth: true,\n            value: formData.professor_id,\n            onChange: handleChange,\n            helperText: \"Leave blank for auto-generated ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Assigned Courses\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 30\n                }, this),\n                onClick: handleAddCourse,\n                variant: \"outlined\",\n                size: \"small\",\n                disabled: !formData.department_id,\n                children: \"Add Course\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 15\n            }, this), courseSelections.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: \"No courses assigned. Click \\\"Add Course\\\" to assign courses.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexDirection: 'column',\n                gap: 2\n              },\n              children: courseSelections.map((selection, index) => /*#__PURE__*/_jsxDEV(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: 2\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                      fullWidth: true,\n                      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                        id: `course-select-label-${index}`,\n                        children: \"Course\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 542,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(Select, {\n                        labelId: `course-select-label-${index}`,\n                        value: selection.courseId,\n                        onChange: e => handleCourseChange(index, e.target.value),\n                        label: \"Course\",\n                        disabled: !formData.department_id,\n                        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                          value: \"\",\n                          children: /*#__PURE__*/_jsxDEV(\"em\", {\n                            children: \"Select a course\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 551,\n                            columnNumber: 33\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 550,\n                          columnNumber: 31\n                        }, this), filteredCourses.map(course => /*#__PURE__*/_jsxDEV(MenuItem, {\n                          value: course.course_id,\n                          disabled: courseSelections.some(s => s.courseId === course.course_id && courseSelections.indexOf(s) !== index),\n                          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                            primary: course.course_name,\n                            secondary: `${course.course_id} (${course.is_core ? 'Core' : 'Elective'})`\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 561,\n                            columnNumber: 35\n                          }, this)\n                        }, course.course_id, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 554,\n                          columnNumber: 33\n                        }, this))]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 543,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 541,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                      color: \"error\",\n                      onClick: () => handleRemoveCourse(index),\n                      size: \"small\",\n                      children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 574,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 569,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 540,\n                    columnNumber: 25\n                  }, this), selection.courseId && /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      mt: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      sx: {\n                        mb: 1,\n                        display: 'block'\n                      },\n                      children: \"Semester Availability:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 581,\n                      columnNumber: 29\n                    }, this), courseSemesterInfo[selection.courseId] ? /*#__PURE__*/_jsxDEV(Box, {\n                      sx: {\n                        display: 'flex',\n                        gap: 2,\n                        flexDirection: 'column'\n                      },\n                      children: courseSemesterInfo[selection.courseId].availableSemesters.map(semester => {\n                        // Find if any professors are assigned to this course-semester\n                        const assignedProf = courseSemesterInfo[selection.courseId].assignedProfessors.find(prof => prof.semester === semester && prof.professor_id !== (professor === null || professor === void 0 ? void 0 : professor.professor_id));\n                        const isDisabled = Boolean(assignedProf);\n                        const disabledReason = isDisabled ? `Already assigned to ${assignedProf === null || assignedProf === void 0 ? void 0 : assignedProf.professor_name}` : '';\n                        return /*#__PURE__*/_jsxDEV(Tooltip, {\n                          title: isDisabled ? disabledReason : '',\n                          placement: \"right\",\n                          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                              checked: selection.selectedSemesters.includes(semester),\n                              onChange: () => handleSemesterChange(index, semester),\n                              size: \"small\",\n                              disabled: isDisabled\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 604,\n                              columnNumber: 43\n                            }, this),\n                            label: /*#__PURE__*/_jsxDEV(Box, {\n                              sx: {\n                                display: 'flex',\n                                alignItems: 'center'\n                              },\n                              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                                children: semester\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 613,\n                                columnNumber: 45\n                              }, this), isDisabled && /*#__PURE__*/_jsxDEV(Typography, {\n                                variant: \"caption\",\n                                sx: {\n                                  ml: 1,\n                                  color: 'text.secondary'\n                                },\n                                children: \"(Already assigned)\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 615,\n                                columnNumber: 47\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 612,\n                              columnNumber: 43\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 602,\n                            columnNumber: 39\n                          }, this)\n                        }, semester, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 597,\n                          columnNumber: 37\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 586,\n                      columnNumber: 31\n                    }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      color: \"text.secondary\",\n                      children: \"Loading available semesters...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 627,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 580,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 539,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 17\n            }, this), filteredCourses.length === 0 && formData.department_id && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              sx: {\n                mt: 1\n              },\n              children: \"No courses available for this department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), professor && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"professor_id\",\n            label: \"Professor ID\",\n            fullWidth: true,\n            value: formData.professor_id,\n            InputProps: {\n              readOnly: true\n            },\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfessorForm, \"saNlKaUOvDdxWFwZCKxgIDreElo=\");\n_c = ProfessorForm;\nexport default ProfessorForm;\nvar _c;\n$RefreshReg$(_c, \"ProfessorForm\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormControl","FormHelperText","Grid","InputLabel","MenuItem","Select","TextField","Box","Checkbox","FormControlLabel","ListItemText","Typography","IconButton","Paper","Tooltip","Add","AddIcon","Delete","DeleteIcon","professorService","jsxDEV","_jsxDEV","ProfessorForm","open","professor","departments","courses","onClose","onSave","_s","console","log","formData","setFormData","professor_id","department_id","first_name","last_name","email","password_hash","created_at","Date","toISOString","updated_at","errors","setErrors","courseSelections","setCourseSelections","courseSemesterInfo","setCourseSemesterInfo","loading","setLoading","filteredCourses","filter","course","fetchCourseSemesterData","courseId","prev","data","getCourseSemesters","availableSemesters","available_semesters","assignedProfessors","assigned_professors","error","Object","keys","values","course_ids","allSemesters","Set","semesters","Array","isArray","forEach","semester","add","course_semesters","_course$professor_cou","professor_course","from","length","courseSemestersMap","_course$professor_cou2","course_id","includes","push","selections","map","size","selectedSemesters","disabledSemesters","selection","handleChange","e","name","value","target","newErrors","handleAddCourse","handleRemoveCourse","index","updatedSelections","splice","handleCourseChange","handleSemesterChange","_currentSelection$dis","currentSelection","disabled","currentSemesters","semesterIndex","indexOf","validateForm","trim","test","Math","random","toString","substring","toUpperCase","handleSubmit","courseIds","professorData","maxWidth","fullWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","sx","mt","item","xs","md","label","onChange","helperText","required","type","id","labelId","dept","display","justifyContent","alignItems","mb","variant","startIcon","onClick","color","flexDirection","gap","p","some","s","primary","course_name","secondary","is_core","assignedProf","find","prof","isDisabled","Boolean","disabledReason","professor_name","title","placement","control","checked","ml","InputProps","readOnly","_c","$RefreshReg$"],"sources":["/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/professors/ProfessorForm.tsx"],"sourcesContent":["// ProfessorForm.tsx \nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormHelperText,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n  Box,\n  Checkbox,\n  FormControlLabel,\n  ListItemText,\n  Typography,\n  IconButton,\n  Paper,\n  Tooltip,\n  CircularProgress\n} from '@mui/material';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport { Professor } from '../../../services/professorService';\nimport professorService from '../../../services/professorService';\nimport { Department } from '../../../services/departmentService';\nimport { Course } from '../../../services/courseService';\nimport { SelectChangeEvent } from '@mui/material/Select';\n\ninterface ProfessorFormProps {\n  open: boolean;\n  professor: Professor | null;\n  departments: Department[];\n  courses: Course[];\n  onClose: () => void;\n  onSave: (professor: Professor) => void;\n}\n\n// Interface for professor assignment\ninterface ProfessorAssignment {\n  professor_id: string;\n  professor_name: string;\n  semester: string;\n}\n\n// Interface for course semester information\ninterface CourseSemesterInfo {\n  availableSemesters: string[];\n  assignedProfessors: ProfessorAssignment[];\n}\n\n// Interface for course selection with semester information\ninterface CourseSelection {\n  courseId: string;\n  selectedSemesters: string[];\n  disabledSemesters: {\n    [semester: string]: {\n      disabled: boolean;\n      reason: string;\n    };\n  };\n}\n\nconst ProfessorForm: React.FC<ProfessorFormProps> = ({\n  open,\n  professor,\n  departments,\n  courses,\n  onClose,\n  onSave\n}) => {\n  // Log all props for debugging\n  console.log('ProfessorForm rendered with props:', { open, professor, departments });\n  \n  const [formData, setFormData] = useState<Professor>({\n    professor_id: '',\n    department_id: '',\n    first_name: '',\n    last_name: '',\n    email: '',\n    password_hash: '',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  });\n  \n  const [errors, setErrors] = useState<Record<string, string>>({});\n  \n  // State to manage course selections with their respective semesters\n  const [courseSelections, setCourseSelections] = useState<CourseSelection[]>([]);\n\n  // State to track course semester info\n  const [courseSemesterInfo, setCourseSemesterInfo] = useState<{\n    [courseId: string]: CourseSemesterInfo;\n  }>({});\n\n  // State to track loading state\n  const [loading, setLoading] = useState<{[courseId: string]: boolean}>({});\n  \n  // Filter courses based on selected department\n  const filteredCourses = formData.department_id\n    ? courses.filter(course => course.department_id === formData.department_id)\n    : [];\n\n  // Fetch course semester data\n  const fetchCourseSemesterData = useCallback(async (courseId: string) => {\n    if (!courseId) return;\n    \n    // Set loading state for this course\n    setLoading(prev => ({ ...prev, [courseId]: true }));\n    \n    try {\n      // Fetch data about available semesters and professor assignments\n      const data = await professorService.getCourseSemesters(courseId);\n      \n      // Update state with the fetched data\n      setCourseSemesterInfo(prev => ({\n        ...prev,\n        [courseId]: {\n          availableSemesters: data.available_semesters || ['Fall', 'Spring'],\n          assignedProfessors: data.assigned_professors || []\n        }\n      }));\n    } catch (error) {\n      console.error(`Error fetching semester data for course ${courseId}:`, error);\n      // Set default values if there's an error\n      setCourseSemesterInfo(prev => ({\n        ...prev,\n        [courseId]: {\n          availableSemesters: ['Fall', 'Spring'],\n          assignedProfessors: []\n        }\n      }));\n    } finally {\n      setLoading(prev => ({ ...prev, [courseId]: false }));\n    }\n  }, []);\n\n  useEffect(() => {\n    // Add comprehensive debugging\n    console.log('Professor in useEffect:', professor);\n    console.log('Professor type:', typeof professor);\n    \n    if (professor) {\n      // Log all keys and values\n      console.log('Professor keys:', Object.keys(professor));\n      console.log('Professor values:', Object.values(professor));\n      \n      // Try to access course_ids in different ways\n      console.log('Direct course_ids:', professor.course_ids);\n      console.log('Bracket course_ids:', professor['course_ids']);\n      \n      setFormData({\n        ...professor,\n      });\n      \n      // Debug log to see if course_ids exists\n      console.log('Course IDs from professor:', professor.course_ids);\n      \n      // Create a comprehensive set of all semesters from all sources\n      const allSemesters = new Set<string>();\n      \n      // Add from direct professor.semesters\n      if (professor.semesters && Array.isArray(professor.semesters)) {\n        professor.semesters.forEach(semester => allSemesters.add(semester));\n      }\n      \n      // Also check course_semesters\n      if (professor.course_semesters) {\n        Object.values(professor.course_semesters).forEach(semesters => {\n          if (Array.isArray(semesters)) {\n            semesters.forEach(semester => allSemesters.add(semester));\n          }\n        });\n      }\n      \n      // Also check individual course professor_course associations\n      if (professor.courses && Array.isArray(professor.courses)) {\n        professor.courses.forEach(course => {\n          if (course.professor_course?.semester) {\n            allSemesters.add(course.professor_course.semester);\n          }\n        });\n      }\n      \n      console.log('All semesters collected:', Array.from(allSemesters));\n      \n      // Check if professor has course_ids\n      if (professor.course_ids && Array.isArray(professor.course_ids) && professor.course_ids.length > 0) {\n        console.log('Professor data for course selections:', professor);\n        \n        // Create a mapping of course_id -> array of semesters\n        const courseSemestersMap: {[courseId: string]: string[]} = {};\n        \n        // If we have courses from the API\n        if (professor.courses && Array.isArray(professor.courses)) {\n          // Process each course's semester data\n          professor.courses.forEach(course => {\n            const courseId = course.course_id;\n            const semester = course.professor_course?.semester;\n            \n            if (courseId && semester) {\n              if (!courseSemestersMap[courseId]) {\n                courseSemestersMap[courseId] = [];\n              }\n              \n              // Add semester if not already in the array\n              if (!courseSemestersMap[courseId].includes(semester)) {\n                courseSemestersMap[courseId].push(semester);\n              }\n            }\n          });\n        }\n        \n        // Also check if we have course_semesters data directly\n        if (professor.course_semesters) {\n          Object.keys(professor.course_semesters).forEach(courseId => {\n            const semesters = professor.course_semesters![courseId];\n            if (!courseSemestersMap[courseId]) {\n              courseSemestersMap[courseId] = [];\n            }\n            \n            // Add each semester if not already in the array\n            semesters.forEach(semester => {\n              if (!courseSemestersMap[courseId].includes(semester)) {\n                courseSemestersMap[courseId].push(semester);\n              }\n            });\n          });\n        }\n        \n        console.log('Course semesters map created:', courseSemestersMap);\n        \n        // Now create the course selections\n        const selections = professor.course_ids.map(courseId => {\n          // Get the semesters for this course from our map\n          // Fall back to all collected semesters, and finally to ['Fall'] if nothing else\n          const semesters = \n            (courseSemestersMap[courseId] && courseSemestersMap[courseId].length > 0) \n              ? courseSemestersMap[courseId] \n              : (allSemesters.size > 0)\n                ? Array.from(allSemesters)\n                : ['Fall'];\n          \n          return {\n            courseId,\n            selectedSemesters: semesters,\n            disabledSemesters: {}\n          };\n        });\n        \n        console.log('Setting course selections with proper semesters:', selections);\n        setCourseSelections(selections);\n        \n        // Fetch semester data for each course\n        selections.forEach(selection => {\n          if (selection.courseId) {\n            fetchCourseSemesterData(selection.courseId);\n          }\n        });\n      } else {\n        console.log('No course IDs found, setting empty selections');\n        setCourseSelections([]);\n      }\n    } else {\n      // For new professors, reset the form\n      setFormData({\n        professor_id: '',\n        department_id: departments.length > 0 ? departments[0].department_id : '',\n        first_name: '',\n        last_name: '',\n        email: '',\n        password_hash: '',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      setCourseSelections([]);\n    }\n    \n    setErrors({});\n  }, [professor, departments, fetchCourseSemesterData]);\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }> | SelectChangeEvent\n  ) => {\n    const { name, value } = e.target;\n    if (name) {\n      setFormData((prev: Professor) => ({\n        ...prev,\n        [name]: value\n      }));\n      \n      // Clear error for this field when user types\n      if (errors[name]) {\n        setErrors(prev => {\n          const newErrors = { ...prev };\n          delete newErrors[name];\n          return newErrors;\n        });\n      }\n    }\n  };\n\n  // Add a new course selection\n  const handleAddCourse = () => {\n    setCourseSelections([...courseSelections, { \n      courseId: '', \n      selectedSemesters: [],\n      disabledSemesters: {}\n    }]);\n  };\n\n  // Remove a course selection\n  const handleRemoveCourse = (index: number) => {\n    const updatedSelections = [...courseSelections];\n    updatedSelections.splice(index, 1);\n    setCourseSelections(updatedSelections);\n  };\n\n  // Update a specific course selection\n  const handleCourseChange = (index: number, courseId: string) => {\n    const updatedSelections = [...courseSelections];\n    updatedSelections[index] = {\n      ...updatedSelections[index],\n      courseId,\n      selectedSemesters: []\n    };\n    setCourseSelections(updatedSelections);\n    \n    // Fetch semester data for this course\n    if (courseId) {\n      fetchCourseSemesterData(courseId);\n    }\n  };\n\n  // Handle semester selection for a specific course\n  const handleSemesterChange = (index: number, semester: string) => {\n    const updatedSelections = [...courseSelections];\n    const currentSelection = updatedSelections[index];\n    \n    // Check if the semester is disabled\n    if (currentSelection.disabledSemesters[semester]?.disabled) {\n      return; // Do nothing if the semester is disabled\n    }\n    \n    const currentSemesters = [...currentSelection.selectedSemesters];\n    \n    const semesterIndex = currentSemesters.indexOf(semester);\n    \n    if (semesterIndex > -1) {\n      // Remove semester if already selected\n      currentSemesters.splice(semesterIndex, 1);\n    } else {\n      // Add semester if not selected\n      currentSemesters.push(semester);\n    }\n    \n    updatedSelections[index] = {\n      ...currentSelection,\n      selectedSemesters: currentSemesters\n    };\n    \n    setCourseSelections(updatedSelections);\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!formData.first_name.trim()) {\n      newErrors.first_name = 'First name is required';\n    }\n    \n    if (!formData.last_name.trim()) {\n      newErrors.last_name = 'Last name is required';\n    }\n    \n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Invalid email format';\n    }\n    \n    if (!formData.department_id) {\n      newErrors.department_id = 'Department is required';\n    }\n    \n    // Generate a professor_id if creating a new professor\n    if (!professor && !formData.professor_id) {\n      // We can either generate an ID here or let the backend generate it\n      // For consistency with other forms, let's generate one\n      formData.professor_id = `PROF-${Math.random().toString(36).substring(2, 10).toUpperCase()}`;\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = () => {\n    if (validateForm()) {\n      // Build course_semesters object\n      const course_semesters: {[courseId: string]: string[]} = {};\n      \n      courseSelections.forEach(selection => {\n        if (selection.courseId && selection.selectedSemesters.length > 0) {\n          course_semesters[selection.courseId] = selection.selectedSemesters;\n        }\n      });\n      \n      // Extract course IDs\n      const courseIds = courseSelections\n        .filter(selection => selection.courseId !== '')\n        .map(selection => selection.courseId);\n      \n      console.log('Course selections at submission:', courseSelections);\n      console.log('Course IDs being submitted:', courseIds);\n      console.log('Course semesters being submitted:', course_semesters);\n      \n      const professorData: any = {\n        ...formData,\n        course_ids: courseIds,\n        course_semesters: course_semesters,\n        updated_at: new Date().toISOString()\n      };\n      \n      console.log('Submitting professor data:', professorData);\n      onSave(professorData as Professor);\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        {professor ? 'Edit Professor' : 'Add New Professor'}\n      </DialogTitle>\n      <DialogContent>\n        <Grid container spacing={2} sx={{ mt: 1 }}>\n          <Grid item xs={12} md={6}>\n            <TextField\n              name=\"first_name\"\n              label=\"First Name\"\n              fullWidth\n              value={formData.first_name}\n              onChange={handleChange}\n              error={!!errors.first_name}\n              helperText={errors.first_name}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <TextField\n              name=\"last_name\"\n              label=\"Last Name\"\n              fullWidth\n              value={formData.last_name}\n              onChange={handleChange}\n              error={!!errors.last_name}\n              helperText={errors.last_name}\n              required\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              name=\"email\"\n              label=\"Email\"\n              type=\"email\"\n              fullWidth\n              value={formData.email}\n              onChange={handleChange}\n              error={!!errors.email}\n              helperText={errors.email}\n              required\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControl fullWidth error={!!errors.department_id}>\n              <InputLabel id=\"department-label\">Department</InputLabel>\n              <Select\n                labelId=\"department-label\"\n                name=\"department_id\"\n                value={formData.department_id}\n                onChange={handleChange}\n                label=\"Department\"\n                required\n              >\n                {departments.map((dept) => (\n                  <MenuItem key={dept.department_id} value={dept.department_id}>\n                    {dept.name}\n                  </MenuItem>\n                ))}\n              </Select>\n              {errors.department_id && (\n                <FormHelperText>{errors.department_id}</FormHelperText>\n              )}\n            </FormControl>\n          </Grid>\n          \n          {/* Custom Professor ID field for new professors */}\n          {!professor && (\n            <Grid item xs={12}>\n              <TextField\n                name=\"professor_id\"\n                label=\"Professor ID (optional)\"\n                fullWidth\n                value={formData.professor_id}\n                onChange={handleChange}\n                helperText=\"Leave blank for auto-generated ID\"\n              />\n            </Grid>\n          )}\n          \n          {/* Password field removed */}\n          \n          {/* Multiple Course Selection Section with Per-Course Semester Selection */}\n          <Grid item xs={12}>\n            <Box sx={{ mt: 2 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"subtitle2\">Assigned Courses</Typography>\n                <Button\n                  startIcon={<AddIcon />}\n                  onClick={handleAddCourse}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  disabled={!formData.department_id}\n                >\n                  Add Course\n                </Button>\n              </Box>\n              \n              {courseSelections.length === 0 ? (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No courses assigned. Click \"Add Course\" to assign courses.\n                </Typography>\n              ) : (\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                  {courseSelections.map((selection, index) => (\n                    <Paper key={index} variant=\"outlined\" sx={{ p: 2 }}>\n                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          <FormControl fullWidth>\n                            <InputLabel id={`course-select-label-${index}`}>Course</InputLabel>\n                            <Select\n                              labelId={`course-select-label-${index}`}\n                              value={selection.courseId}\n                              onChange={(e) => handleCourseChange(index, e.target.value)}\n                              label=\"Course\"\n                              disabled={!formData.department_id}\n                            >\n                              <MenuItem value=\"\">\n                                <em>Select a course</em>\n                              </MenuItem>\n                              {filteredCourses.map((course) => (\n                                <MenuItem\n                                  key={course.course_id}\n                                  value={course.course_id}\n                                  disabled={courseSelections.some(\n                                    s => s.courseId === course.course_id && courseSelections.indexOf(s) !== index\n                                  )}\n                                >\n                                  <ListItemText\n                                    primary={course.course_name}\n                                    secondary={`${course.course_id} (${course.is_core ? 'Core' : 'Elective'})`}\n                                  />\n                                </MenuItem>\n                              ))}\n                            </Select>\n                          </FormControl>\n                          <IconButton\n                            color=\"error\"\n                            onClick={() => handleRemoveCourse(index)}\n                            size=\"small\"\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </Box>\n                        \n                        {/* Semester selection for this course */}\n                        {selection.courseId && (\n                          <Box sx={{ mt: 1 }}>\n                            <Typography variant=\"caption\" sx={{ mb: 1, display: 'block' }}>\n                              Semester Availability:\n                            </Typography>\n                            \n                            {courseSemesterInfo[selection.courseId] ? (\n                              <Box sx={{ display: 'flex', gap: 2, flexDirection: 'column' }}>\n                                {courseSemesterInfo[selection.courseId].availableSemesters.map(semester => {\n                                  // Find if any professors are assigned to this course-semester\n                                  const assignedProf = courseSemesterInfo[selection.courseId].assignedProfessors.find(\n                                    prof => prof.semester === semester && prof.professor_id !== professor?.professor_id\n                                  );\n                                  \n                                  const isDisabled = Boolean(assignedProf);\n                                  const disabledReason = isDisabled ? `Already assigned to ${assignedProf?.professor_name}` : '';\n                                  \n                                  return (\n                                    <Tooltip\n                                      key={semester}\n                                      title={isDisabled ? disabledReason : ''}\n                                      placement=\"right\"\n                                    >\n                                      <FormControlLabel\n                                        control={\n                                          <Checkbox\n                                            checked={selection.selectedSemesters.includes(semester)}\n                                            onChange={() => handleSemesterChange(index, semester)}\n                                            size=\"small\"\n                                            disabled={isDisabled}\n                                          />\n                                        }\n                                        label={\n                                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                            <Typography>{semester}</Typography>\n                                            {isDisabled && (\n                                              <Typography variant=\"caption\" sx={{ ml: 1, color: 'text.secondary' }}>\n                                                (Already assigned)\n                                              </Typography>\n                                            )}\n                                          </Box>\n                                        }\n                                      />\n                                    </Tooltip>\n                                  );\n                                })}\n                              </Box>\n                            ) : (\n                              <Typography variant=\"body2\" color=\"text.secondary\">\n                                Loading available semesters...\n                              </Typography>\n                            )}\n                          </Box>\n                        )}\n                      </Box>\n                    </Paper>\n                  ))}\n                </Box>\n              )}\n              \n              {filteredCourses.length === 0 && formData.department_id && (\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                  No courses available for this department\n                </Typography>\n              )}\n            </Box>\n          </Grid>\n          \n          {professor && (\n            <Grid item xs={12}>\n              <TextField\n                name=\"professor_id\"\n                label=\"Professor ID\"\n                fullWidth\n                value={formData.professor_id}\n                InputProps={{\n                  readOnly: true,\n                }}\n                disabled\n              />\n            </Grid>\n          )}\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ProfessorForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}