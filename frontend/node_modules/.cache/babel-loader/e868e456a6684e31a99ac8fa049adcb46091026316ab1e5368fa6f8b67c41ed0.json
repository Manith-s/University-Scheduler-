{"ast":null,"code":"// src/services/courseService.ts\n// program association interface\n\n// Updated Course interface with correct fields and optional properties\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Get courses by program - enhanced with detailed logging and better error handling\nexport const getCoursesByProgram = async programId => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Making API request for program ${programId}`);\n    const response = await fetch(`${API_URL}/courses/program/${programId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch courses by program: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log(`Raw API response for program ${programId}:`, data);\n\n    // Ensure we return an array\n    if (!Array.isArray(data)) {\n      console.warn('API did not return an array, received:', typeof data);\n      return [];\n    }\n\n    // Normalize the data to ensure consistent structure with numClasses properly mapped\n    const normalizedCourses = data.map(course => ({\n      course_id: course.course_id,\n      program_id: programId,\n      course_name: course.course_name || '',\n      name: course.name || course.course_name || '',\n      description: course.description || '',\n      department_id: course.department_id || '',\n      duration_minutes: course.duration_minutes || 0,\n      is_core: Boolean(course.is_core),\n      // Explicitly convert to boolean\n      // Check both numClasses and num_classes\n      numClasses: course.numClasses || course.num_classes || 1,\n      // Ensure semesters is always an array\n      semesters: Array.isArray(course.semesters) ? course.semesters : course.semesters ? [course.semesters] : [],\n      created_at: course.created_at || '',\n      updated_at: course.updated_at || '',\n      // Include professor_course if available\n      professor_course: course.professor_course,\n      // Include semester if available\n      semester: course.semester\n    }));\n    console.log(`Normalized ${normalizedCourses.length} courses for program ${programId}`);\n    console.log('Sample normalized course:', normalizedCourses.length > 0 ? JSON.stringify(normalizedCourses[0], null, 2) : 'No courses');\n    return normalizedCourses;\n  } catch (error) {\n    console.error(`Error fetching courses for program ${programId}:`, error);\n    return [];\n  }\n};\n\n// Get semesters for a course - new function\nexport const getCourseSemesters = async courseId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/courses/${courseId}/semesters`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      console.error(`Failed to fetch semesters for course ${courseId}`);\n      return [];\n    }\n    const data = await response.json();\n    console.log(`Retrieved semesters for course ${courseId}:`, data);\n    return Array.isArray(data) ? data : [];\n  } catch (error) {\n    console.error(`Error fetching semesters for course ${courseId}:`, error);\n    return [];\n  }\n};\n\n// Create a new course\nexport const createCourse = async course => {\n  try {\n    const token = localStorage.getItem('token');\n\n    // Map the frontend course model to match what the backend expects\n    const backendCourse = {\n      course_id: course.course_id,\n      department_id: course.department_id,\n      course_name: course.name || course.course_name,\n      // Handle both name fields\n      duration_minutes: course.duration_minutes,\n      is_core: course.is_core,\n      program_id: course.program_id,\n      // Send single program_id\n      program_associations: course.program_associations,\n      // Add this for multiple programs\n      semesters: course.semesters // Include semesters array\n    };\n    console.log('Creating course with data:', backendCourse);\n    const response = await fetch(`${API_URL}/courses`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(backendCourse)\n    });\n\n    // Log the response status to help diagnose issues\n    console.log(`Course creation response status: ${response.status}`);\n\n    // Check if response is ok (status in the 200-299 range)\n    if (!response.ok) {\n      // Log the status code and response text for debugging\n      console.error(`HTTP error ${response.status}: ${response.statusText}`);\n\n      // Try to get more detailed error info from the response\n      let errorMessage = `Failed to create course: HTTP ${response.status}`;\n      try {\n        const errorData = await response.json();\n        if (errorData.message) {\n          errorMessage = errorData.message;\n        }\n        if (errorData.error) {\n          console.error('Detailed error:', errorData.error);\n        }\n      } catch (parseError) {\n        console.error('Could not parse error response:', parseError);\n      }\n      throw new Error(errorMessage);\n    }\n\n    // For successful responses, carefully handle the response body\n    try {\n      // Get the response content type\n      const contentType = response.headers.get('content-type');\n\n      // Only try to parse JSON if the content type is json\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      } else {\n        // If not JSON, create a synthetic success response\n        return {\n          course_id: course.course_id,\n          course_name: course.name || course.course_name,\n          department_id: course.department_id,\n          duration_minutes: course.duration_minutes || 0,\n          is_core: course.is_core || false,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n      }\n    } catch (parseError) {\n      console.error('Error parsing successful response:', parseError);\n      // Return a basic course object as fallback\n      return {\n        course_id: course.course_id,\n        course_name: course.name || course.course_name,\n        department_id: course.department_id,\n        duration_minutes: course.duration_minutes || 0,\n        is_core: course.is_core || false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n    }\n  } catch (error) {\n    console.error('Error creating course:', error);\n    throw error;\n  }\n};\n\n// Update a course\nexport const updateCourse = async (id, course) => {\n  try {\n    var _course$program_assoc;\n    const token = localStorage.getItem('token');\n    console.log(`Updating course ${id} with data:`, course);\n\n    // Ensure program associations are properly formatted\n    const backendCourse = {\n      course_name: course.name || course.course_name,\n      department_id: course.department_id,\n      duration_minutes: course.duration_minutes,\n      is_core: Boolean(course.is_core),\n      program_id: course.program_id,\n      // For backward compatibility\n      // Make sure ALL program associations are included\n      program_associations: (_course$program_assoc = course.program_associations) === null || _course$program_assoc === void 0 ? void 0 : _course$program_assoc.map(pa => ({\n        program_id: pa.program_id,\n        is_core: Boolean(pa.is_core),\n        num_classes: pa.num_classes || 1\n      })),\n      semesters: course.semesters\n    };\n    console.log('Sending data to backend:', backendCourse);\n    const response = await fetch(`${API_URL}/courses/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(backendCourse)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update course');\n    }\n    const responseData = await response.json();\n\n    // Return either the course field if it exists, or the whole response\n    return responseData.course || responseData;\n  } catch (error) {\n    console.error(`Error updating course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a course\nexport const deleteCourse = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Attempting to delete course with ID: ${id}`);\n    const response = await fetch(`${API_URL}/courses/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete course');\n    }\n\n    // Handle 204 No Content or empty responses\n    if (response.status === 204 || response.headers.get('content-length') === '0') {\n      return {\n        success: true,\n        message: 'Course deleted successfully'\n      };\n    }\n    try {\n      const data = await response.json();\n      return {\n        success: true,\n        message: data.message || 'Course deleted successfully'\n      };\n    } catch (parseError) {\n      // If JSON parsing fails but request was successful\n      return {\n        success: true,\n        message: 'Course deleted successfully'\n      };\n    }\n  } catch (error) {\n    console.error(`Error deleting course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple courses\nexport const deleteCourses = async ids => {\n  try {\n    // For backend compatibility, handle batch deletes as individual deletes if endpoint not available\n    const token = localStorage.getItem('token');\n    console.log(`Attempting to delete multiple courses: ${ids.join(', ')}`);\n\n    // For single course, use the single delete endpoint\n    if (ids.length === 1) {\n      return await deleteCourse(ids[0]);\n    }\n\n    // Try using the batch-delete endpoint first\n    try {\n      const response = await fetch(`${API_URL}/courses/batch-delete`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          success: true,\n          message: data.message || 'Courses deleted successfully'\n        };\n      }\n\n      // If batch endpoint fails, fall back to individual deletes\n      console.log('Batch delete endpoint failed, falling back to individual deletes');\n    } catch (batchError) {\n      console.log('Error with batch delete, falling back to individual deletes:', batchError);\n    }\n\n    // Individual delete fallback\n    const deletePromises = ids.map(id => deleteCourse(id));\n    const results = await Promise.all(deletePromises);\n\n    // Check if all deletions were successful\n    const allSuccessful = results.every(result => result.success);\n    return {\n      success: allSuccessful,\n      message: allSuccessful ? 'All courses deleted successfully' : 'Some courses could not be deleted'\n    };\n  } catch (error) {\n    console.error(`Error deleting courses:`, error);\n    throw error;\n  }\n};\n\n// Get course by ID - Enhanced version with proper semester handling\nexport const getCourseById = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Fetching course with ID: ${id}`);\n    const response = await fetch(`${API_URL}/courses/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch course: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log(`Received course data for ID ${id}:`, data);\n    console.log('numClasses or num_classes value:', data.numClasses || data.num_classes);\n\n    // Transform the data to ensure consistency\n    return {\n      course_id: data.course_id,\n      course_name: data.course_name || '',\n      name: data.name || data.course_name || '',\n      department_id: data.department_id || '',\n      duration_minutes: data.duration_minutes || 0,\n      is_core: Boolean(data.is_core),\n      // Check both numClasses and num_classes properties\n      numClasses: data.numClasses || data.num_classes || 1,\n      // Include other fields as needed\n      program_id: data.program_id || (data.programs && data.programs.length > 0 ? data.programs[0].program_id : ''),\n      programs: data.programs || [],\n      // Ensure semesters are always an array\n      semesters: Array.isArray(data.semesters) ? data.semesters : data.semesters ? [data.semesters] : [],\n      prerequisites: data.prerequisites || [],\n      description: data.description || '',\n      Department: data.Department || null,\n      created_at: data.created_at || '',\n      updated_at: data.updated_at || '',\n      // Include professor_course if available\n      professor_course: data.professor_course,\n      // Include semester if available\n      semester: data.semester\n    };\n  } catch (error) {\n    console.error(`Error fetching course ${id}:`, error);\n    return null;\n  }\n};\n\n// Debug endpoint for program courses\nexport const debugCoursesByProgram = async programId => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Debugging courses for program ${programId}`);\n    const response = await fetch(`${API_URL}/courses/debug/${programId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Debug endpoint failed: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log(`Debug data for program ${programId}:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Error debugging courses for program ${programId}:`, error);\n    // Fixed TypeScript error by checking if error is an instance of Error\n    return {\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n};\n\n// Get all courses - enhanced with proper handling of numClasses and semesters\nconst getAllCourses = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(\"Attempting to fetch all courses with token:\", token ? \"Token exists\" : \"No token\");\n    const response = await fetch(`${API_URL}/courses`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log(\"Response status:\", response.status, response.statusText);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Error response:\", errorText);\n      throw new Error(`Failed to fetch courses: ${response.status} - ${errorText}`);\n    }\n    const data = await response.json();\n    console.log(\"Courses data received:\", data);\n\n    // Process and normalize data to ensure consistency\n    const normalizedCourses = data.map(course => ({\n      ...course,\n      // Ensure program_id is extracted from Programs array if available\n      program_id: course.program_id || (course.programs && course.programs.length > 0 ? course.programs[0].program_id : ''),\n      // Ensure course_name/name consistency\n      course_name: course.course_name || course.name || '',\n      name: course.course_name || course.name || '',\n      // Ensure numClasses is properly set - check both possible property names\n      numClasses: course.numClasses || course.num_classes || 1,\n      // Ensure semesters array exists\n      semesters: Array.isArray(course.semesters) ? course.semesters : course.semesters ? [course.semesters] : []\n    }));\n    console.log(\"Normalized courses:\", normalizedCourses);\n    return normalizedCourses;\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    // Return empty array but log the detailed error\n    return [];\n  }\n};\nconst courseService = {\n  getAllCourses,\n  getCourseById,\n  getCoursesByProgram,\n  createCourse,\n  updateCourse,\n  deleteCourse,\n  deleteCourses,\n  getCourseSemesters,\n  debugCoursesByProgram\n};\nexport default courseService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getCoursesByProgram","programId","token","localStorage","getItem","console","log","response","fetch","headers","ok","Error","status","statusText","data","json","Array","isArray","warn","normalizedCourses","map","course","course_id","program_id","course_name","name","description","department_id","duration_minutes","is_core","Boolean","numClasses","num_classes","semesters","created_at","updated_at","professor_course","semester","length","JSON","stringify","error","getCourseSemesters","courseId","createCourse","backendCourse","program_associations","method","body","errorMessage","errorData","message","parseError","contentType","get","includes","Date","toISOString","updateCourse","id","_course$program_assoc","pa","responseData","deleteCourse","success","deleteCourses","ids","join","batchError","deletePromises","results","Promise","all","allSuccessful","every","result","getCourseById","programs","prerequisites","Department","debugCoursesByProgram","getAllCourses","errorText","text","courseService"],"sources":["/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/services/courseService.ts"],"sourcesContent":["// src/services/courseService.ts\n// program association interface\nexport interface ProgramAssociation {\n  program_id: string;\n  name?: string;\n  department_id?: string;\n  is_core: boolean;\n  num_classes?: number; // Make num_classes optional\n}\n\n// Updated Course interface with correct fields and optional properties\nexport interface Course {\n  course_id: string;\n  program_id?: string;  // Make optional to handle different backend responses\n  department_id: string; // Required field\n  name?: string; \n  course_name: string; // For backend compatibility\n  description?: string;\n  duration_minutes: number;\n  is_core: boolean;\n  numClasses?: number; // Add this new field\n  num_classes?: number; // Snake case version\n  semesters?: string[];  // Optional array of semesters\n  semester?: string;     // Optional single semester\n  created_at: string;\n  updated_at: string;\n  program?: any;\n  programs?: ProgramAssociation[];  // Add this for multiple programs\n  program_associations?: ProgramAssociation[];  // For sending to API\n  prerequisites?: any[];\n  Department?: any;      // For Department association\n  professor_course?: {   // Add professor_course property\n    semester: string;\n  };\n}\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Get courses by program - enhanced with detailed logging and better error handling\nexport const getCoursesByProgram = async (programId: string): Promise<Course[]> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Making API request for program ${programId}`);\n    \n    const response = await fetch(`${API_URL}/courses/program/${programId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch courses by program: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(`Raw API response for program ${programId}:`, data);\n    \n    // Ensure we return an array\n    if (!Array.isArray(data)) {\n      console.warn('API did not return an array, received:', typeof data);\n      return [];\n    }\n    \n    // Normalize the data to ensure consistent structure with numClasses properly mapped\n    const normalizedCourses = data.map(course => ({\n      course_id: course.course_id,\n      program_id: programId,\n      course_name: course.course_name || '',\n      name: course.name || course.course_name || '',\n      description: course.description || '',\n      department_id: course.department_id || '',\n      duration_minutes: course.duration_minutes || 0,\n      is_core: Boolean(course.is_core), // Explicitly convert to boolean\n      // Check both numClasses and num_classes\n      numClasses: course.numClasses || course.num_classes || 1,\n      // Ensure semesters is always an array\n      semesters: Array.isArray(course.semesters) ? course.semesters : \n               (course.semesters ? [course.semesters] : []),\n      created_at: course.created_at || '',\n      updated_at: course.updated_at || '',\n      // Include professor_course if available\n      professor_course: course.professor_course,\n      // Include semester if available\n      semester: course.semester\n    }));\n    \n    console.log(`Normalized ${normalizedCourses.length} courses for program ${programId}`);\n    console.log('Sample normalized course:', normalizedCourses.length > 0 ? JSON.stringify(normalizedCourses[0], null, 2) : 'No courses');\n    \n    return normalizedCourses;\n  } catch (error) {\n    console.error(`Error fetching courses for program ${programId}:`, error);\n    return [];\n  }\n};\n\n// Get semesters for a course - new function\nexport const getCourseSemesters = async (courseId: string): Promise<string[]> => {\n  try {\n    const token = localStorage.getItem('token');\n    \n    const response = await fetch(`${API_URL}/courses/${courseId}/semesters`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      console.error(`Failed to fetch semesters for course ${courseId}`);\n      return [];\n    }\n    \n    const data = await response.json();\n    console.log(`Retrieved semesters for course ${courseId}:`, data);\n    return Array.isArray(data) ? data : [];\n  } catch (error) {\n    console.error(`Error fetching semesters for course ${courseId}:`, error);\n    return [];\n  }\n};\n\n// Create a new course\nexport const createCourse = async (course: Partial<Course>): Promise<Course> => {\n  try {\n    const token = localStorage.getItem('token');\n    \n    // Map the frontend course model to match what the backend expects\n    const backendCourse = {\n      course_id: course.course_id,\n      department_id: course.department_id,\n      course_name: course.name || course.course_name, // Handle both name fields\n      duration_minutes: course.duration_minutes,\n      is_core: course.is_core,\n      program_id: course.program_id, // Send single program_id\n      program_associations: course.program_associations, // Add this for multiple programs\n      semesters: course.semesters // Include semesters array\n    };\n    \n    console.log('Creating course with data:', backendCourse);\n    \n    const response = await fetch(`${API_URL}/courses`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(backendCourse)\n    });\n\n    // Log the response status to help diagnose issues\n    console.log(`Course creation response status: ${response.status}`);\n    \n    // Check if response is ok (status in the 200-299 range)\n    if (!response.ok) {\n      // Log the status code and response text for debugging\n      console.error(`HTTP error ${response.status}: ${response.statusText}`);\n      \n      // Try to get more detailed error info from the response\n      let errorMessage = `Failed to create course: HTTP ${response.status}`;\n      try {\n        const errorData = await response.json();\n        if (errorData.message) {\n          errorMessage = errorData.message;\n        }\n        if (errorData.error) {\n          console.error('Detailed error:', errorData.error);\n        }\n      } catch (parseError) {\n        console.error('Could not parse error response:', parseError);\n      }\n      \n      throw new Error(errorMessage);\n    }\n\n    // For successful responses, carefully handle the response body\n    try {\n      // Get the response content type\n      const contentType = response.headers.get('content-type');\n      \n      // Only try to parse JSON if the content type is json\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      } else {\n        // If not JSON, create a synthetic success response\n        return {\n          course_id: course.course_id,\n          course_name: course.name || course.course_name,\n          department_id: course.department_id,\n          duration_minutes: course.duration_minutes || 0,\n          is_core: course.is_core || false,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        } as Course;\n      }\n    } catch (parseError) {\n      console.error('Error parsing successful response:', parseError);\n      // Return a basic course object as fallback\n      return {\n        course_id: course.course_id,\n        course_name: course.name || course.course_name,\n        department_id: course.department_id,\n        duration_minutes: course.duration_minutes || 0,\n        is_core: course.is_core || false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      } as Course;\n    }\n  } catch (error) {\n    console.error('Error creating course:', error);\n    throw error;\n  }\n};\n\n// Update a course\nexport const updateCourse = async (id: string, course: Partial<Course>): Promise<Course> => {\n  try {\n    const token = localStorage.getItem('token');\n    \n    console.log(`Updating course ${id} with data:`, course);\n    \n    // Ensure program associations are properly formatted\n    const backendCourse = {\n      course_name: course.name || course.course_name, \n      department_id: course.department_id,\n      duration_minutes: course.duration_minutes,\n      is_core: Boolean(course.is_core),\n      program_id: course.program_id, // For backward compatibility\n      // Make sure ALL program associations are included\n      program_associations: course.program_associations?.map(pa => ({\n        program_id: pa.program_id,\n        is_core: Boolean(pa.is_core),\n        num_classes: pa.num_classes || 1\n      })),\n      semesters: course.semesters \n    };\n    \n    console.log('Sending data to backend:', backendCourse);\n    \n    const response = await fetch(`${API_URL}/courses/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(backendCourse)\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update course');\n    }\n\n    const responseData = await response.json();\n    \n    // Return either the course field if it exists, or the whole response\n    return responseData.course || responseData;\n  } catch (error) {\n    console.error(`Error updating course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a course\nexport const deleteCourse = async (id: string): Promise<{ success: boolean; message: string }> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Attempting to delete course with ID: ${id}`);\n    \n    const response = await fetch(`${API_URL}/courses/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete course');\n    }\n\n    // Handle 204 No Content or empty responses\n    if (response.status === 204 || response.headers.get('content-length') === '0') {\n      return {\n        success: true,\n        message: 'Course deleted successfully'\n      };\n    }\n\n    try {\n      const data = await response.json();\n      return {\n        success: true,\n        message: data.message || 'Course deleted successfully'\n      };\n    } catch (parseError) {\n      // If JSON parsing fails but request was successful\n      return {\n        success: true,\n        message: 'Course deleted successfully'\n      };\n    }\n  } catch (error) {\n    console.error(`Error deleting course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple courses\nexport const deleteCourses = async (ids: string[]): Promise<{ success: boolean; message: string }> => {\n  try {\n    // For backend compatibility, handle batch deletes as individual deletes if endpoint not available\n    const token = localStorage.getItem('token');\n    console.log(`Attempting to delete multiple courses: ${ids.join(', ')}`);\n    \n    // For single course, use the single delete endpoint\n    if (ids.length === 1) {\n      return await deleteCourse(ids[0]);\n    }\n    \n    // Try using the batch-delete endpoint first\n    try {\n      const response = await fetch(`${API_URL}/courses/batch-delete`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ ids })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          success: true,\n          message: data.message || 'Courses deleted successfully'\n        };\n      }\n      \n      // If batch endpoint fails, fall back to individual deletes\n      console.log('Batch delete endpoint failed, falling back to individual deletes');\n    } catch (batchError) {\n      console.log('Error with batch delete, falling back to individual deletes:', batchError);\n    }\n    \n    // Individual delete fallback\n    const deletePromises = ids.map(id => deleteCourse(id));\n    const results = await Promise.all(deletePromises);\n    \n    // Check if all deletions were successful\n    const allSuccessful = results.every(result => result.success);\n    \n    return {\n      success: allSuccessful,\n      message: allSuccessful \n        ? 'All courses deleted successfully' \n        : 'Some courses could not be deleted'\n    };\n  } catch (error) {\n    console.error(`Error deleting courses:`, error);\n    throw error;\n  }\n};\n\n// Get course by ID - Enhanced version with proper semester handling\nexport const getCourseById = async (id: string): Promise<Course | null> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Fetching course with ID: ${id}`);\n    \n    const response = await fetch(`${API_URL}/courses/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch course: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log(`Received course data for ID ${id}:`, data);\n    console.log('numClasses or num_classes value:', data.numClasses || data.num_classes);\n    \n    // Transform the data to ensure consistency\n    return {\n      course_id: data.course_id,\n      course_name: data.course_name || '',\n      name: data.name || data.course_name || '',\n      department_id: data.department_id || '',\n      duration_minutes: data.duration_minutes || 0,\n      is_core: Boolean(data.is_core),\n      // Check both numClasses and num_classes properties\n      numClasses: data.numClasses || data.num_classes || 1,\n      // Include other fields as needed\n      program_id: data.program_id || (data.programs && data.programs.length > 0 ? data.programs[0].program_id : ''),\n      programs: data.programs || [],\n      // Ensure semesters are always an array\n      semesters: Array.isArray(data.semesters) ? data.semesters : \n               (data.semesters ? [data.semesters] : []),\n      prerequisites: data.prerequisites || [],\n      description: data.description || '',\n      Department: data.Department || null,\n      created_at: data.created_at || '',\n      updated_at: data.updated_at || '',\n      // Include professor_course if available\n      professor_course: data.professor_course,\n      // Include semester if available\n      semester: data.semester\n    };\n  } catch (error) {\n    console.error(`Error fetching course ${id}:`, error);\n    return null;\n  }\n};\n\n// Debug endpoint for program courses\nexport const debugCoursesByProgram = async (programId: string): Promise<any> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Debugging courses for program ${programId}`);\n    \n    const response = await fetch(`${API_URL}/courses/debug/${programId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Debug endpoint failed: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log(`Debug data for program ${programId}:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Error debugging courses for program ${programId}:`, error);\n    // Fixed TypeScript error by checking if error is an instance of Error\n    return { \n      error: error instanceof Error ? error.message : 'Unknown error' \n    };\n  }\n};\n\n// Get all courses - enhanced with proper handling of numClasses and semesters\nconst getAllCourses = async (): Promise<Course[]> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(\"Attempting to fetch all courses with token:\", token ? \"Token exists\" : \"No token\");\n    \n    const response = await fetch(`${API_URL}/courses`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    console.log(\"Response status:\", response.status, response.statusText);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Error response:\", errorText);\n      throw new Error(`Failed to fetch courses: ${response.status} - ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log(\"Courses data received:\", data);\n    \n    // Process and normalize data to ensure consistency\n    const normalizedCourses = data.map((course: Course) => ({\n      ...course,\n       // Ensure program_id is extracted from Programs array if available\n       program_id: course.program_id || \n       (course.programs && course.programs.length > 0 ? \n        course.programs[0].program_id : ''),\n      // Ensure course_name/name consistency\n      course_name: course.course_name || course.name || '',\n      name: course.course_name || course.name || '',\n      // Ensure numClasses is properly set - check both possible property names\n      numClasses: course.numClasses || course.num_classes || 1,\n      // Ensure semesters array exists\n      semesters: Array.isArray(course.semesters) ? course.semesters : \n               (course.semesters ? [course.semesters] : [])\n    }));\n    \n    console.log(\"Normalized courses:\", normalizedCourses);\n    return normalizedCourses;\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    // Return empty array but log the detailed error\n    return [];\n  }\n};\n\nconst courseService = {\n  getAllCourses,\n  getCourseById,\n  getCoursesByProgram,\n  createCourse,\n  updateCourse,\n  deleteCourse,\n  deleteCourses,\n  getCourseSemesters,\n  debugCoursesByProgram\n};\n\nexport default courseService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}