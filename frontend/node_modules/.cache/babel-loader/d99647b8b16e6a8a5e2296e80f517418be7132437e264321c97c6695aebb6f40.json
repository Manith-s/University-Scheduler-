{"ast":null,"code":"// src/services/professorService.ts\n// Add these imports at the top of your file\n\n// Interface for course-specific semesters\n\n// Types\n\n// API configuration\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Normalize professor data to ensure consistent structure\nconst normalizeProfessorData = professor => {\n  // Make sure courses data is properly handled if present\n  const courses = professor.courses || professor.Courses || [];\n\n  // Preserve course information correctly\n  if (professor.Courses && !professor.courses) {\n    professor.courses = professor.Courses;\n  }\n\n  // Extract unique semesters from courses\n  const uniqueSemesters = new Set();\n  courses.forEach(course => {\n    var _course$professor_cou;\n    // Try to get semester from professor_course or directly from course\n    const semester = ((_course$professor_cou = course.professor_course) === null || _course$professor_cou === void 0 ? void 0 : _course$professor_cou.semester) || course.semester;\n    if (semester) {\n      uniqueSemesters.add(semester);\n    }\n  });\n\n  // Make sure semesters and course_ids are handled correctly\n  const semesters = professor.semesters || Array.from(uniqueSemesters) || [];\n  const courseIds = professor.course_ids || courses.map(c => c.course_id) || [];\n\n  // Add course_semesters handling\n  const courseSemesters = professor.course_semesters || {};\n\n  // If no course_semesters but courses with semester info exist, build it\n  if (!professor.course_semesters && courses.length > 0) {\n    courses.forEach(course => {\n      var _course$professor_cou2;\n      const courseId = course.course_id;\n      const semester = ((_course$professor_cou2 = course.professor_course) === null || _course$professor_cou2 === void 0 ? void 0 : _course$professor_cou2.semester) || course.semester;\n      if (courseId && semester) {\n        if (!courseSemesters[courseId]) {\n          courseSemesters[courseId] = [];\n        }\n        if (!courseSemesters[courseId].includes(semester)) {\n          courseSemesters[courseId].push(semester);\n        }\n      }\n    });\n  }\n  return {\n    professor_id: professor.professor_id,\n    department_id: professor.department_id,\n    first_name: professor.first_name,\n    last_name: professor.last_name,\n    email: professor.email,\n    password_hash: professor.password_hash || '',\n    semesters: semesters,\n    course_ids: courseIds,\n    course_semesters: courseSemesters,\n    courses: courses,\n    department: professor.department,\n    created_at: professor.created_at,\n    updated_at: professor.updated_at\n  };\n};\n\n// Fetch all professors\nexport const getAllProfessors = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch professors');\n    }\n    const data = await response.json();\n    console.log('Raw professor data from API:', data);\n    return data.map(normalizeProfessorData);\n  } catch (error) {\n    console.error('Error in getAllProfessors:', error);\n    throw error;\n  }\n};\n\n// Fetch professors by department\nexport const getProfessorsByDepartment = async departmentId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors/department/${departmentId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch professors for department ${departmentId}`);\n    }\n    const data = await response.json();\n    return data.map(normalizeProfessorData);\n  } catch (error) {\n    console.error(`Error in getProfessorsByDepartment for departmentId ${departmentId}:`, error);\n    throw error;\n  }\n};\n\n// Fetch professors by course\nexport const getProfessorsByCourse = async courseId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors/course/${courseId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch professors for course ${courseId}`);\n    }\n    const data = await response.json();\n    return data.map(normalizeProfessorData);\n  } catch (error) {\n    console.error(`Error in getProfessorsByCourse for course ${courseId}:`, error);\n\n    // Fallback to client-side filtering if API endpoint doesn't exist\n    console.log('Falling back to client-side filtering...');\n    const allProfessors = await getAllProfessors();\n    return Promise.all(allProfessors.map(async prof => {\n      try {\n        const detailedProf = await getProfessorById(prof.professor_id);\n        return detailedProf;\n      } catch (err) {\n        return prof;\n      }\n    })).then(professors => {\n      return professors.filter(professor => {\n        // Check if professor has this course assigned\n        if (professor.courses && Array.isArray(professor.courses)) {\n          return professor.courses.some(course => course.course_id === courseId);\n        }\n        if (professor.course_ids && Array.isArray(professor.course_ids)) {\n          return professor.course_ids.includes(courseId);\n        }\n        return false;\n      });\n    });\n  }\n};\n\n// Fetch a single professor by ID\nexport const getProfessorById = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch professor with id ${id}`);\n    }\n    const data = await response.json();\n    console.log('Raw professor data from API:', data);\n\n    // Make sure we normalize the data properly\n    return normalizeProfessorData(data);\n  } catch (error) {\n    console.error(`Error in getProfessorById for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Add function to get available course semesters\nexport const getCourseSemesters = async courseId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/courses/${courseId}/professors`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch course professor assignments for ${courseId}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error getting course professor assignments for ${courseId}:`, error);\n    throw error;\n  }\n};\n\n// Get professor availability\nexport const getProfessorAvailability = async professorId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors/${professorId}/availability`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch availability for professor ${professorId}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error in getProfessorAvailability for professor ID ${professorId}:`, error);\n    throw error;\n  }\n};\n\n// Set professor availability with enhanced error handling\nexport const setProfessorAvailability = async (professorId, availabilities) => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Setting availability for professor:', professorId);\n    console.log('Availability data being sent:', availabilities);\n    const response = await fetch(`${API_URL}/professors/${professorId}/availability`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        availability: availabilities\n      })\n    });\n    console.log('Response status:', response.status);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Error response:', errorText);\n      let errorData;\n      try {\n        errorData = JSON.parse(errorText);\n      } catch (e) {\n        errorData = {\n          message: errorText || 'Unknown error'\n        };\n      }\n      throw new Error(errorData.message || `Failed to update availability for professor ${professorId}`);\n    }\n    const data = await response.json();\n    console.log('setProfessorAvailability response:', data);\n    return data;\n  } catch (error) {\n    console.error(`Error in setProfessorAvailability for professor ID ${professorId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new professor\nexport const createProfessor = async professor => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Creating professor with data:', professor);\n    const response = await fetch(`${API_URL}/professors`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(professor)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create professor');\n    }\n    const data = await response.json();\n    return normalizeProfessorData(data);\n  } catch (error) {\n    console.error('Error in createProfessor:', error);\n    throw error;\n  }\n};\n\n// Update an existing professor\nexport const updateProfessor = async (id, professor) => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Updating professor with ID:', id, 'Data:', professor);\n    const response = await fetch(`${API_URL}/professors/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(professor)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || `Failed to update professor ${id}`);\n    }\n    const data = await response.json();\n    return normalizeProfessorData(data);\n  } catch (error) {\n    console.error(`Error in updateProfessor for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a professor\nexport const deleteProfessor = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Deleting professor with ID:', id);\n    const response = await fetch(`${API_URL}/professors/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || `Failed to delete professor ${id}`);\n    }\n\n    // Handle 204 No Content or empty response\n    if (response.status === 204 || response.headers.get('content-length') === '0') {\n      return {\n        success: true,\n        message: 'Professor deleted successfully'\n      };\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error in deleteProfessor for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple professors\nexport const deleteProfessors = async ids => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Batch deleting professors:', ids);\n    const response = await fetch(`${API_URL}/professors/batch-delete`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ids\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete professors');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error in deleteProfessors:`, error);\n    throw error;\n  }\n};\n\n// Export the service methods\nconst professorService = {\n  getAllProfessors,\n  getProfessorsByDepartment,\n  getProfessorsByCourse,\n  getProfessorById,\n  getProfessorAvailability,\n  setProfessorAvailability,\n  createProfessor,\n  updateProfessor,\n  deleteProfessor,\n  deleteProfessors,\n  getCourseSemesters\n};\nexport default professorService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","normalizeProfessorData","professor","courses","Courses","uniqueSemesters","Set","forEach","course","_course$professor_cou","semester","professor_course","add","semesters","Array","from","courseIds","course_ids","map","c","course_id","courseSemesters","course_semesters","length","_course$professor_cou2","courseId","includes","push","professor_id","department_id","first_name","last_name","email","password_hash","department","created_at","updated_at","getAllProfessors","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","console","log","error","getProfessorsByDepartment","departmentId","getProfessorsByCourse","allProfessors","Promise","all","prof","detailedProf","getProfessorById","err","then","professors","filter","isArray","some","id","getCourseSemesters","getProfessorAvailability","professorId","setProfessorAvailability","availabilities","method","body","JSON","stringify","availability","status","errorText","text","errorData","parse","e","message","createProfessor","updateProfessor","deleteProfessor","get","success","deleteProfessors","ids","professorService"],"sources":["/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/services/professorService.ts"],"sourcesContent":["// src/services/professorService.ts\n// Add these imports at the top of your file\nimport { Course } from './courseService';\nimport { Department } from './departmentService';\n\n// Interface for course-specific semesters\nexport interface CourseSemesters {\n  [courseId: string]: string[];\n}\n\n// Types\nexport interface Professor {\n  professor_id: string;\n  department_id: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  password_hash: string;\n  created_at: string;\n  updated_at: string;\n  semesters?: string[];    // For semester availability\n  course_ids?: string[];   // For multiple course assignments\n  course_semesters?: CourseSemesters; // Add this for course-specific semesters\n  courses?: Course[];  // Add this\n  department?: Department; // Add this\n  Courses?: Course[];  // Add this optional field to match backend response format\n}\n\nexport interface ProfessorAvailability {\n  availability_id: string;\n  professor_id: string;\n  timeslot_id: string;\n  day_of_week: string;\n  is_available: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ProfessorDetail extends Professor {\n  department?: any;\n  courses?: any[];\n  availabilities?: ProfessorAvailability[];\n}\n\n// API configuration\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Normalize professor data to ensure consistent structure\nconst normalizeProfessorData = (professor: any): Professor => {\n  // Make sure courses data is properly handled if present\n  const courses = professor.courses || professor.Courses || [];\n  \n  // Preserve course information correctly\n  if (professor.Courses && !professor.courses) {\n    professor.courses = professor.Courses;\n  }\n  \n  // Extract unique semesters from courses\n  const uniqueSemesters = new Set<string>();\n  courses.forEach((course: any) => {\n    // Try to get semester from professor_course or directly from course\n    const semester = course.professor_course?.semester || course.semester;\n    if (semester) {\n      uniqueSemesters.add(semester);\n    }\n  });\n  \n  // Make sure semesters and course_ids are handled correctly\n  const semesters = professor.semesters || Array.from(uniqueSemesters) || [];\n  const courseIds = professor.course_ids || courses.map((c: any) => c.course_id) || [];\n  \n  // Add course_semesters handling\n  const courseSemesters = professor.course_semesters || {};\n  \n  // If no course_semesters but courses with semester info exist, build it\n  if (!professor.course_semesters && courses.length > 0) {\n    courses.forEach((course: any) => {\n      const courseId = course.course_id;\n      const semester = course.professor_course?.semester || course.semester;\n      \n      if (courseId && semester) {\n        if (!courseSemesters[courseId]) {\n          courseSemesters[courseId] = [];\n        }\n        if (!courseSemesters[courseId].includes(semester)) {\n          courseSemesters[courseId].push(semester);\n        }\n      }\n    });\n  }\n  \n  return {\n    professor_id: professor.professor_id,\n    department_id: professor.department_id,\n    first_name: professor.first_name,\n    last_name: professor.last_name,\n    email: professor.email,\n    password_hash: professor.password_hash || '',\n    semesters: semesters,\n    course_ids: courseIds,\n    course_semesters: courseSemesters,\n    courses: courses,\n    department: professor.department,\n    created_at: professor.created_at,\n    updated_at: professor.updated_at\n  };\n};\n\n// Fetch all professors\nexport const getAllProfessors = async (): Promise<Professor[]> => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch professors');\n    }\n    \n    const data = await response.json();\n    console.log('Raw professor data from API:', data);\n    return data.map(normalizeProfessorData);\n  } catch (error) {\n    console.error('Error in getAllProfessors:', error);\n    throw error;\n  }\n};\n\n// Fetch professors by department\nexport const getProfessorsByDepartment = async (departmentId: string): Promise<Professor[]> => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors/department/${departmentId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch professors for department ${departmentId}`);\n    }\n    \n    const data = await response.json();\n    return data.map(normalizeProfessorData);\n  } catch (error) {\n    console.error(`Error in getProfessorsByDepartment for departmentId ${departmentId}:`, error);\n    throw error;\n  }\n};\n\n// Fetch professors by course\nexport const getProfessorsByCourse = async (courseId: string): Promise<Professor[]> => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors/course/${courseId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch professors for course ${courseId}`);\n    }\n    \n    const data = await response.json();\n    return data.map(normalizeProfessorData);\n  } catch (error) {\n    console.error(`Error in getProfessorsByCourse for course ${courseId}:`, error);\n    \n    // Fallback to client-side filtering if API endpoint doesn't exist\n    console.log('Falling back to client-side filtering...');\n    const allProfessors = await getAllProfessors();\n    \n    return Promise.all(\n      allProfessors.map(async (prof) => {\n        try {\n          const detailedProf = await getProfessorById(prof.professor_id);\n          return detailedProf;\n        } catch (err) {\n          return prof;\n        }\n      })\n    ).then(professors => {\n      return professors.filter(professor => {\n        // Check if professor has this course assigned\n        if (professor.courses && Array.isArray(professor.courses)) {\n          return professor.courses.some(course => course.course_id === courseId);\n        }\n        if (professor.course_ids && Array.isArray(professor.course_ids)) {\n          return professor.course_ids.includes(courseId);\n        }\n        return false;\n      });\n    });\n  }\n};\n\n// Fetch a single professor by ID\nexport const getProfessorById = async (id: string): Promise<Professor> => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch professor with id ${id}`);\n    }\n    \n    const data = await response.json();\n    console.log('Raw professor data from API:', data);\n    \n    // Make sure we normalize the data properly\n    return normalizeProfessorData(data);\n  } catch (error) {\n    console.error(`Error in getProfessorById for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Add function to get available course semesters\nexport const getCourseSemesters = async (courseId: string): Promise<{\n  available_semesters: string[];\n  assigned_professors: {\n    professor_id: string;\n    professor_name: string;\n    semester: string;\n  }[];\n}> => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/courses/${courseId}/professors`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch course professor assignments for ${courseId}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`Error getting course professor assignments for ${courseId}:`, error);\n    throw error;\n  }\n};\n\n// Get professor availability\nexport const getProfessorAvailability = async (professorId: string): Promise<ProfessorAvailability[]> => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/professors/${professorId}/availability`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch availability for professor ${professorId}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`Error in getProfessorAvailability for professor ID ${professorId}:`, error);\n    throw error;\n  }\n};\n\n// Set professor availability with enhanced error handling\nexport const setProfessorAvailability = async (\n  professorId: string,\n  availabilities: ProfessorAvailability[]\n): Promise<any> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Setting availability for professor:', professorId);\n    console.log('Availability data being sent:', availabilities);\n    \n    const response = await fetch(`${API_URL}/professors/${professorId}/availability`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ availability: availabilities })\n    });\n    \n    console.log('Response status:', response.status);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Error response:', errorText);\n      let errorData;\n      try {\n        errorData = JSON.parse(errorText);\n      } catch (e) {\n        errorData = { message: errorText || 'Unknown error' };\n      }\n      throw new Error(errorData.message || `Failed to update availability for professor ${professorId}`);\n    }\n    \n    const data = await response.json();\n    console.log('setProfessorAvailability response:', data);\n    return data;\n  } catch (error) {\n    console.error(`Error in setProfessorAvailability for professor ID ${professorId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new professor\nexport const createProfessor = async (professor: Partial<Professor>): Promise<Professor> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Creating professor with data:', professor);\n    \n    const response = await fetch(`${API_URL}/professors`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(professor)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create professor');\n    }\n    \n    const data = await response.json();\n    return normalizeProfessorData(data);\n  } catch (error) {\n    console.error('Error in createProfessor:', error);\n    throw error;\n  }\n};\n\n// Update an existing professor\nexport const updateProfessor = async (id: string, professor: Partial<Professor>): Promise<Professor> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Updating professor with ID:', id, 'Data:', professor);\n    \n    const response = await fetch(`${API_URL}/professors/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(professor)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || `Failed to update professor ${id}`);\n    }\n    \n    const data = await response.json();\n    return normalizeProfessorData(data);\n  } catch (error) {\n    console.error(`Error in updateProfessor for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a professor\nexport const deleteProfessor = async (id: string): Promise<{ success: boolean; message: string }> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Deleting professor with ID:', id);\n    \n    const response = await fetch(`${API_URL}/professors/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || `Failed to delete professor ${id}`);\n    }\n    \n    // Handle 204 No Content or empty response\n    if (response.status === 204 || response.headers.get('content-length') === '0') {\n      return {\n        success: true,\n        message: 'Professor deleted successfully'\n      };\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`Error in deleteProfessor for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple professors\nexport const deleteProfessors = async (ids: string[]): Promise<{ success: boolean; message: string }> => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log('Batch deleting professors:', ids);\n    \n    const response = await fetch(`${API_URL}/professors/batch-delete`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ ids })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete professors');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`Error in deleteProfessors:`, error);\n    throw error;\n  }\n};\n\n// Export the service methods\nconst professorService = {\n  getAllProfessors,\n  getProfessorsByDepartment,\n  getProfessorsByCourse,\n  getProfessorById,\n  getProfessorAvailability,\n  setProfessorAvailability,\n  createProfessor,\n  updateProfessor,\n  deleteProfessor,\n  deleteProfessors,\n  getCourseSemesters\n};\n\nexport default professorService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}