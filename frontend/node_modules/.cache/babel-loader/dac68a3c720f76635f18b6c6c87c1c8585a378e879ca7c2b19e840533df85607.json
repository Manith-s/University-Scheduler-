{"ast":null,"code":"// src/services/departmentService.ts\nimport authService from './authService';\n\n// Define TypeScript interfaces\n\n// Add this interface for components that import Department\n\n// API URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Service functions\nconst getDepartmentById = async id => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/departments/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      console.error(`Error in getDepartmentById for ID ${id}:`);\n      throw new Error('Failed to fetch department');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error in getDepartmentById for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Create new department\nconst createDepartment = async department => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/departments`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(department)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create department');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating department:', error);\n    throw error;\n  }\n};\n\n// Update department\nconst updateDepartment = async (id, department) => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/departments/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(department)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update department');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error updating department ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete department\nconst deleteDepartment = async id => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/departments/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete department');\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      message: data.message || 'Department deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Error deleting department ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple departments\nconst deleteDepartments = async ids => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/departments/batch-delete`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ids\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete departments');\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      message: data.message || 'Departments deleted successfully'\n    };\n  } catch (error) {\n    console.error('Error in deleteDepartments:', error);\n    throw error;\n  }\n};\n\n// Get all departments\nconst getAllDepartments = async () => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/departments`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch departments');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching departments:', error);\n    throw error;\n  }\n};\n\n// Export all functions\nconst departmentService = {\n  createDepartment,\n  updateDepartment,\n  deleteDepartment,\n  deleteDepartments,\n  getDepartmentById,\n  getAllDepartments\n};\nexport default departmentService;","map":{"version":3,"names":["authService","API_URL","process","env","REACT_APP_API_URL","getDepartmentById","id","token","getToken","response","fetch","headers","ok","console","error","Error","json","createDepartment","department","method","body","JSON","stringify","errorData","message","updateDepartment","deleteDepartment","data","success","deleteDepartments","ids","getAllDepartments","departmentService"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/departmentService.ts"],"sourcesContent":["// src/services/departmentService.ts\r\nimport authService from './authService';\r\n\r\n// Define TypeScript interfaces\r\nexport interface DepartmentDetail {\r\n  department_id: string;\r\n  name: string;\r\n  description?: string;\r\n  created_at?: Date;\r\n  updated_at?: Date;\r\n}\r\n\r\n// Add this interface for components that import Department\r\nexport interface Department {\r\n  department_id: string;\r\n  name: string;\r\n  description?: string;\r\n}\r\n\r\n// API URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Service functions\r\nconst getDepartmentById = async (id: string): Promise<DepartmentDetail> => {\r\n  try {\r\n    const token = authService.getToken();\r\n    const response = await fetch(`${API_URL}/departments/${id}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(`Error in getDepartmentById for ID ${id}:`);\r\n      throw new Error('Failed to fetch department');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error in getDepartmentById for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create new department\r\nconst createDepartment = async (department: DepartmentDetail): Promise<DepartmentDetail> => {\r\n  try {\r\n    const token = authService.getToken();\r\n    const response = await fetch(`${API_URL}/departments`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(department)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to create department');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating department:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update department\r\nconst updateDepartment = async (id: string, department: Partial<DepartmentDetail>): Promise<DepartmentDetail> => {\r\n  try {\r\n    const token = authService.getToken();\r\n    const response = await fetch(`${API_URL}/departments/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(department)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update department');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error updating department ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete department\r\nconst deleteDepartment = async (id: string): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const token = authService.getToken();\r\n    const response = await fetch(`${API_URL}/departments/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete department');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return { success: true, message: data.message || 'Department deleted successfully' };\r\n  } catch (error) {\r\n    console.error(`Error deleting department ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete multiple departments\r\nconst deleteDepartments = async (ids: string[]): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const token = authService.getToken();\r\n    const response = await fetch(`${API_URL}/departments/batch-delete`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ ids })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete departments');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return { success: true, message: data.message || 'Departments deleted successfully' };\r\n  } catch (error) {\r\n    console.error('Error in deleteDepartments:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all departments\r\nconst getAllDepartments = async (): Promise<DepartmentDetail[]> => {\r\n  try {\r\n    const token = authService.getToken();\r\n    const response = await fetch(`${API_URL}/departments`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch departments');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching departments:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export all functions\r\nconst departmentService = {\r\n  createDepartment,\r\n  updateDepartment,\r\n  deleteDepartment,\r\n  deleteDepartments,\r\n  getDepartmentById,\r\n  getAllDepartments\r\n};\r\n\r\nexport default departmentService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}