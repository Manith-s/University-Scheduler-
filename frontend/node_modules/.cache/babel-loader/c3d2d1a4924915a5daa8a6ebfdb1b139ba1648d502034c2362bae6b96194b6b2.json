{"ast":null,"code":"// src/services/timeSlotService.ts\n\n// Add TimeSlot type definition\n\n// Mock data for time slots - comprehensive set covering all days of the week\nconst MOCK_TIMESLOTS = [\n// Monday slots\n{\n  timeslot_id: \"TS1-MON\",\n  name: \"Morning 1\",\n  start_time: \"09:10:00\",\n  end_time: \"10:05:00\",\n  duration_minutes: 55,\n  day_of_week: \"Monday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS2-MON\",\n  name: \"Morning 2\",\n  start_time: \"10:20:00\",\n  end_time: \"11:15:00\",\n  duration_minutes: 55,\n  day_of_week: \"Monday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS3-MON\",\n  name: \"Morning 3\",\n  start_time: \"11:30:00\",\n  end_time: \"12:25:00\",\n  duration_minutes: 55,\n  day_of_week: \"Monday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS4-MON\",\n  name: \"Afternoon 1\",\n  start_time: \"12:45:00\",\n  end_time: \"14:05:00\",\n  duration_minutes: 80,\n  day_of_week: \"Monday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS5-MON\",\n  name: \"Afternoon 2\",\n  start_time: \"13:30:00\",\n  end_time: \"14:50:00\",\n  duration_minutes: 80,\n  day_of_week: \"Monday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS6-MON\",\n  name: \"Evening 1\",\n  start_time: \"17:30:00\",\n  end_time: \"20:30:00\",\n  duration_minutes: 180,\n  day_of_week: \"Monday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS7-MON\",\n  name: \"Evening 2\",\n  start_time: \"18:00:00\",\n  end_time: \"21:00:00\",\n  duration_minutes: 180,\n  day_of_week: \"Monday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n},\n// Tuesday slots\n{\n  timeslot_id: \"TS1-TUE\",\n  name: \"Morning 1\",\n  start_time: \"09:10:00\",\n  end_time: \"10:05:00\",\n  duration_minutes: 55,\n  day_of_week: \"Tuesday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS2-TUE\",\n  name: \"Morning 2\",\n  start_time: \"10:20:00\",\n  end_time: \"11:15:00\",\n  duration_minutes: 55,\n  day_of_week: \"Tuesday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS3-TUE\",\n  name: \"Morning 3\",\n  start_time: \"11:30:00\",\n  end_time: \"12:25:00\",\n  duration_minutes: 55,\n  day_of_week: \"Tuesday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS4-TUE\",\n  name: \"Afternoon 1\",\n  start_time: \"12:45:00\",\n  end_time: \"14:05:00\",\n  duration_minutes: 80,\n  day_of_week: \"Tuesday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS5-TUE\",\n  name: \"Afternoon 2\",\n  start_time: \"13:30:00\",\n  end_time: \"14:50:00\",\n  duration_minutes: 80,\n  day_of_week: \"Tuesday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n},\n// Wednesday slots\n{\n  timeslot_id: \"TS1-WED\",\n  name: \"Morning 1\",\n  start_time: \"09:10:00\",\n  end_time: \"10:05:00\",\n  duration_minutes: 55,\n  day_of_week: \"Wednesday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS2-WED\",\n  name: \"Morning 2\",\n  start_time: \"10:20:00\",\n  end_time: \"11:15:00\",\n  duration_minutes: 55,\n  day_of_week: \"Wednesday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS3-WED\",\n  name: \"Morning 3\",\n  start_time: \"11:30:00\",\n  end_time: \"12:25:00\",\n  duration_minutes: 55,\n  day_of_week: \"Wednesday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n},\n// Thursday slots  \n{\n  timeslot_id: \"TS1-THU\",\n  name: \"Morning 1\",\n  start_time: \"09:10:00\",\n  end_time: \"10:05:00\",\n  duration_minutes: 55,\n  day_of_week: \"Thursday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS2-THU\",\n  name: \"Morning 2\",\n  start_time: \"10:20:00\",\n  end_time: \"11:15:00\",\n  duration_minutes: 55,\n  day_of_week: \"Thursday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n},\n// Friday slots\n{\n  timeslot_id: \"TS1-FRI\",\n  name: \"Morning 1\",\n  start_time: \"09:10:00\",\n  end_time: \"10:05:00\",\n  duration_minutes: 55,\n  day_of_week: \"Friday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}, {\n  timeslot_id: \"TS2-FRI\",\n  name: \"Morning 2\",\n  start_time: \"10:20:00\",\n  end_time: \"11:15:00\",\n  duration_minutes: 55,\n  day_of_week: \"Friday\",\n  created_at: \"2024-01-01T00:00:00Z\",\n  updated_at: \"2024-01-01T00:00:00Z\"\n}];\n\n// Helper function to simulate API delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst randomDelay = () => delay(Math.random() * 300 + 100); // Random delay between 100-400ms\n\nconst timeSlotService = {\n  getAllTimeSlots: async () => {\n    try {\n      // Simulate API delay\n      await randomDelay();\n      return [...MOCK_TIMESLOTS];\n    } catch (error) {\n      console.error('Error fetching time slots:', error);\n      throw error;\n    }\n  },\n  getTimeSlotById: async id => {\n    try {\n      await randomDelay();\n      const timeSlot = MOCK_TIMESLOTS.find(ts => ts.timeslot_id === id);\n      if (!timeSlot) {\n        throw new Error(`Time slot with ID ${id} not found`);\n      }\n      return timeSlot;\n    } catch (error) {\n      console.error(`Error fetching time slot with ID ${id}:`, error);\n\n      // Return a default time slot if not found\n      return {\n        timeslot_id: id,\n        name: \"Sample Time Slot\",\n        start_time: \"09:00:00\",\n        end_time: \"10:30:00\",\n        duration_minutes: 90,\n        day_of_week: \"Monday\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n    }\n  },\n  getTimeSlotsByDay: async day => {\n    try {\n      await randomDelay();\n      return MOCK_TIMESLOTS.filter(timeSlot => timeSlot.day_of_week === day);\n    } catch (error) {\n      console.error(`Error fetching time slots for day ${day}:`, error);\n\n      // Return a default time slot if error\n      return [{\n        timeslot_id: `TS1-${day.substring(0, 3).toUpperCase()}`,\n        name: \"Sample Time Slot\",\n        start_time: \"09:00:00\",\n        end_time: \"10:30:00\",\n        duration_minutes: 90,\n        day_of_week: day,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }];\n    }\n  },\n  // Additional service methods as needed\n  createTimeSlot: async timeSlot => {\n    try {\n      await randomDelay();\n\n      // Create new time slot\n      const newTimeSlot = {\n        timeslot_id: timeSlot.timeslot_id || `TS-${Math.floor(Math.random() * 1000)}`,\n        name: timeSlot.name || \"New Time Slot\",\n        start_time: timeSlot.start_time || \"00:00:00\",\n        end_time: timeSlot.end_time || \"00:00:00\",\n        duration_minutes: timeSlot.duration_minutes || 0,\n        day_of_week: timeSlot.day_of_week || \"Monday\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      return newTimeSlot;\n    } catch (error) {\n      console.error('Error creating time slot:', error);\n      throw error;\n    }\n  },\n  updateTimeSlot: async (id, timeSlot) => {\n    try {\n      await randomDelay();\n\n      // Find existing time slot\n      const existingTimeSlot = MOCK_TIMESLOTS.find(ts => ts.timeslot_id === id);\n      if (!existingTimeSlot) {\n        throw new Error('Time slot not found');\n      }\n\n      // Update time slot\n      const updatedTimeSlot = {\n        ...existingTimeSlot,\n        ...timeSlot,\n        updated_at: new Date().toISOString()\n      };\n      return updatedTimeSlot;\n    } catch (error) {\n      console.error(`Error updating time slot with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  deleteTimeSlot: async id => {\n    try {\n      await randomDelay();\n      return {\n        success: true,\n        message: 'Time slot deleted successfully'\n      };\n    } catch (error) {\n      console.error(`Error deleting time slot with ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\nexport default timeSlotService;","map":{"version":3,"names":["MOCK_TIMESLOTS","timeslot_id","name","start_time","end_time","duration_minutes","day_of_week","created_at","updated_at","delay","ms","Promise","resolve","setTimeout","randomDelay","Math","random","timeSlotService","getAllTimeSlots","error","console","getTimeSlotById","id","timeSlot","find","ts","Error","Date","toISOString","getTimeSlotsByDay","day","filter","substring","toUpperCase","createTimeSlot","newTimeSlot","floor","updateTimeSlot","existingTimeSlot","updatedTimeSlot","deleteTimeSlot","success","message"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/timeSlotService.ts"],"sourcesContent":["// src/services/timeSlotService.ts\r\n\r\n// Add TimeSlot type definition\r\nexport interface TimeSlot {\r\n  timeslot_id: string;\r\n  name: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  duration_minutes: number;\r\n  day_of_week: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n// Mock data for time slots - comprehensive set covering all days of the week\r\nconst MOCK_TIMESLOTS: TimeSlot[] = [\r\n  // Monday slots\r\n  {\r\n    timeslot_id: \"TS1-MON\",\r\n    name: \"Morning 1\",\r\n    start_time: \"09:10:00\",\r\n    end_time: \"10:05:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Monday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS2-MON\",\r\n    name: \"Morning 2\",\r\n    start_time: \"10:20:00\",\r\n    end_time: \"11:15:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Monday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS3-MON\",\r\n    name: \"Morning 3\",\r\n    start_time: \"11:30:00\",\r\n    end_time: \"12:25:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Monday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS4-MON\",\r\n    name: \"Afternoon 1\",\r\n    start_time: \"12:45:00\",\r\n    end_time: \"14:05:00\",\r\n    duration_minutes: 80,\r\n    day_of_week: \"Monday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS5-MON\",\r\n    name: \"Afternoon 2\",\r\n    start_time: \"13:30:00\",\r\n    end_time: \"14:50:00\",\r\n    duration_minutes: 80,\r\n    day_of_week: \"Monday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS6-MON\",\r\n    name: \"Evening 1\",\r\n    start_time: \"17:30:00\",\r\n    end_time: \"20:30:00\",\r\n    duration_minutes: 180,\r\n    day_of_week: \"Monday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS7-MON\",\r\n    name: \"Evening 2\",\r\n    start_time: \"18:00:00\",\r\n    end_time: \"21:00:00\",\r\n    duration_minutes: 180,\r\n    day_of_week: \"Monday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  \r\n  // Tuesday slots\r\n  {\r\n    timeslot_id: \"TS1-TUE\",\r\n    name: \"Morning 1\",\r\n    start_time: \"09:10:00\",\r\n    end_time: \"10:05:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Tuesday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS2-TUE\",\r\n    name: \"Morning 2\",\r\n    start_time: \"10:20:00\",\r\n    end_time: \"11:15:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Tuesday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS3-TUE\",\r\n    name: \"Morning 3\",\r\n    start_time: \"11:30:00\",\r\n    end_time: \"12:25:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Tuesday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS4-TUE\",\r\n    name: \"Afternoon 1\",\r\n    start_time: \"12:45:00\",\r\n    end_time: \"14:05:00\",\r\n    duration_minutes: 80,\r\n    day_of_week: \"Tuesday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS5-TUE\",\r\n    name: \"Afternoon 2\",\r\n    start_time: \"13:30:00\",\r\n    end_time: \"14:50:00\",\r\n    duration_minutes: 80,\r\n    day_of_week: \"Tuesday\", \r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  \r\n  // Wednesday slots\r\n  {\r\n    timeslot_id: \"TS1-WED\",\r\n    name: \"Morning 1\",\r\n    start_time: \"09:10:00\",\r\n    end_time: \"10:05:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Wednesday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS2-WED\",\r\n    name: \"Morning 2\",\r\n    start_time: \"10:20:00\",\r\n    end_time: \"11:15:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Wednesday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS3-WED\",\r\n    name: \"Morning 3\",\r\n    start_time: \"11:30:00\",\r\n    end_time: \"12:25:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Wednesday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  \r\n  // Thursday slots  \r\n  {\r\n    timeslot_id: \"TS1-THU\",\r\n    name: \"Morning 1\",\r\n    start_time: \"09:10:00\",\r\n    end_time: \"10:05:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Thursday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS2-THU\",\r\n    name: \"Morning 2\",\r\n    start_time: \"10:20:00\",\r\n    end_time: \"11:15:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Thursday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  \r\n  // Friday slots\r\n  {\r\n    timeslot_id: \"TS1-FRI\",\r\n    name: \"Morning 1\",\r\n    start_time: \"09:10:00\",\r\n    end_time: \"10:05:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Friday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  },\r\n  {\r\n    timeslot_id: \"TS2-FRI\",\r\n    name: \"Morning 2\",\r\n    start_time: \"10:20:00\",\r\n    end_time: \"11:15:00\",\r\n    duration_minutes: 55,\r\n    day_of_week: \"Friday\",\r\n    created_at: \"2024-01-01T00:00:00Z\",\r\n    updated_at: \"2024-01-01T00:00:00Z\"\r\n  }\r\n];\r\n\r\n// Helper function to simulate API delay\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\nconst randomDelay = () => delay(Math.random() * 300 + 100); // Random delay between 100-400ms\r\n\r\nconst timeSlotService = {\r\n  getAllTimeSlots: async (): Promise<TimeSlot[]> => {\r\n    try {\r\n      // Simulate API delay\r\n      await randomDelay();\r\n      return [...MOCK_TIMESLOTS];\r\n    } catch (error) {\r\n      console.error('Error fetching time slots:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getTimeSlotById: async (id: string): Promise<TimeSlot> => {\r\n    try {\r\n      await randomDelay();\r\n      const timeSlot = MOCK_TIMESLOTS.find(ts => ts.timeslot_id === id);\r\n      \r\n      if (!timeSlot) {\r\n        throw new Error(`Time slot with ID ${id} not found`);\r\n      }\r\n      \r\n      return timeSlot;\r\n    } catch (error) {\r\n      console.error(`Error fetching time slot with ID ${id}:`, error);\r\n      \r\n      // Return a default time slot if not found\r\n      return {\r\n        timeslot_id: id,\r\n        name: \"Sample Time Slot\",\r\n        start_time: \"09:00:00\",\r\n        end_time: \"10:30:00\",\r\n        duration_minutes: 90,\r\n        day_of_week: \"Monday\",\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n    }\r\n  },\r\n\r\n  getTimeSlotsByDay: async (day: string): Promise<TimeSlot[]> => {\r\n    try {\r\n      await randomDelay();\r\n      return MOCK_TIMESLOTS.filter(timeSlot => timeSlot.day_of_week === day);\r\n    } catch (error) {\r\n      console.error(`Error fetching time slots for day ${day}:`, error);\r\n      \r\n      // Return a default time slot if error\r\n      return [{\r\n        timeslot_id: `TS1-${day.substring(0,3).toUpperCase()}`,\r\n        name: \"Sample Time Slot\",\r\n        start_time: \"09:00:00\",\r\n        end_time: \"10:30:00\",\r\n        duration_minutes: 90,\r\n        day_of_week: day,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      }];\r\n    }\r\n  },\r\n  \r\n  // Additional service methods as needed\r\n  createTimeSlot: async (timeSlot: Partial<TimeSlot>): Promise<TimeSlot> => {\r\n    try {\r\n      await randomDelay();\r\n      \r\n      // Create new time slot\r\n      const newTimeSlot: TimeSlot = {\r\n        timeslot_id: timeSlot.timeslot_id || `TS-${Math.floor(Math.random() * 1000)}`,\r\n        name: timeSlot.name || \"New Time Slot\",\r\n        start_time: timeSlot.start_time || \"00:00:00\",\r\n        end_time: timeSlot.end_time || \"00:00:00\",\r\n        duration_minutes: timeSlot.duration_minutes || 0,\r\n        day_of_week: timeSlot.day_of_week || \"Monday\",\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      \r\n      return newTimeSlot;\r\n    } catch (error) {\r\n      console.error('Error creating time slot:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  updateTimeSlot: async (id: string, timeSlot: Partial<TimeSlot>): Promise<TimeSlot> => {\r\n    try {\r\n      await randomDelay();\r\n      \r\n      // Find existing time slot\r\n      const existingTimeSlot = MOCK_TIMESLOTS.find(ts => ts.timeslot_id === id);\r\n      \r\n      if (!existingTimeSlot) {\r\n        throw new Error('Time slot not found');\r\n      }\r\n      \r\n      // Update time slot\r\n      const updatedTimeSlot: TimeSlot = {\r\n        ...existingTimeSlot,\r\n        ...timeSlot,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      \r\n      return updatedTimeSlot;\r\n    } catch (error) {\r\n      console.error(`Error updating time slot with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  deleteTimeSlot: async (id: string): Promise<{ success: boolean; message: string }> => {\r\n    try {\r\n      await randomDelay();\r\n      return { success: true, message: 'Time slot deleted successfully' };\r\n    } catch (error) {\r\n      console.error(`Error deleting time slot with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default timeSlotService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}