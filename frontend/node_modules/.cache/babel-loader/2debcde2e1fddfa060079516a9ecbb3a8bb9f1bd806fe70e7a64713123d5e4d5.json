{"ast":null,"code":"var _jsxFileName = \"/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/courses/CourseForm.tsx\",\n  _s = $RefreshSig$();\n// src/components/admin/courses/CourseForm.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Typography, Paper, Grid, Snackbar, Alert, Checkbox, CircularProgress, Breadcrumbs, Link as MuiLink, FormControl, InputLabel, Select, MenuItem, FormControlLabel, Switch, FormGroup, FormLabel, TextField } from '@mui/material';\nimport { Autocomplete, Chip } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { Link, useNavigate, useParams, useLocation } from 'react-router-dom';\nimport { TextInput } from '../../../components/common/FormComponents';\n\n// Import services\n\nimport programService from '../../../services/programService';\nimport courseService from '../../../services/courseService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CourseForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    id\n  } = useParams();\n  const isEditing = Boolean(id);\n\n  // Get programId from query param if present (for new courses)\n  const queryParams = new URLSearchParams(location.search);\n  const initialProgramId = queryParams.get('programId') || '';\n  const [programs, setPrograms] = useState([]);\n  const [programAssociations, setProgramAssociations] = useState([]);\n  const [allPrograms, setAllPrograms] = useState([]);\n  const [selectedSemesters, setSelectedSemesters] = useState([]);\n  const [course, setCourse] = useState({\n    course_id: '',\n    program_id: initialProgramId,\n    department_id: '',\n    name: '',\n    description: '',\n    duration_minutes: 55,\n    is_core: false,\n    numClasses: 1,\n    semesters: []\n  });\n  const [loading, setLoading] = useState(isEditing);\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  useEffect(() => {\n    const loadPrograms = async () => {\n      try {\n        const data = await programService.getAllPrograms();\n        setPrograms(data);\n        setAllPrograms(data);\n\n        // If we have programs and an initialProgramId, set the department_id\n        if (data.length > 0 && initialProgramId) {\n          const selectedProgram = data.find(p => p.program_id === initialProgramId);\n          if (selectedProgram) {\n            setCourse(prevCourse => ({\n              ...prevCourse,\n              department_id: selectedProgram.department_id\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Error loading programs:', error);\n        setSnackbar({\n          open: true,\n          message: 'Failed to load programs',\n          severity: 'error'\n        });\n      }\n    };\n    loadPrograms();\n    if (isEditing && id) {\n      const loadCourse = async () => {\n        try {\n          console.log(`Loading course with ID: ${id}`);\n          const data = await courseService.getCourseById(id);\n          if (data) {\n            // Log the received data for debugging\n            console.log('Loaded course data:', data);\n\n            // Ensure semesters are always handled as an array\n            const loadedSemesters = Array.isArray(data.semesters) ? data.semesters : data.semesters ? [data.semesters] : [];\n\n            // Set semester checkboxes\n            setSelectedSemesters(loadedSemesters);\n\n            // Get the numClasses value - log it for debugging\n            const numClassesValue = data.numClasses || 1;\n            console.log('numClasses loaded:', numClassesValue);\n\n            // Ensure all required fields are set\n            setCourse({\n              course_id: data.course_id || '',\n              program_id: data.program_id || (data.programs && data.programs.length > 0 ? data.programs[0].program_id : ''),\n              department_id: data.department_id || '',\n              name: data.course_name || data.name || '',\n              description: data.description || '',\n              duration_minutes: typeof data.duration_minutes === 'number' ? data.duration_minutes : 55,\n              is_core: Boolean(data.is_core),\n              numClasses: numClassesValue,\n              semesters: loadedSemesters\n            });\n\n            // Add this section to handle program associations:\n            if (data.programs && Array.isArray(data.programs)) {\n              // Transform the data to ensure we have complete program association data\n              const associations = data.programs.map(prog => ({\n                program_id: prog.program_id,\n                name: prog.name || '',\n                department_id: prog.department_id || '',\n                is_core: prog.is_core === true // Explicitly convert to boolean\n              }));\n              console.log('Processed program associations:', associations);\n              setProgramAssociations(associations);\n            }\n          } else {\n            setSnackbar({\n              open: true,\n              message: 'Course not found',\n              severity: 'error'\n            });\n            navigate('/admin/courses');\n          }\n        } catch (error) {\n          console.error('Error loading course:', error);\n          setSnackbar({\n            open: true,\n            message: 'Failed to load course',\n            severity: 'error'\n          });\n        } finally {\n          setLoading(false);\n        }\n      };\n      loadCourse();\n    } else {\n      // For new courses, set an empty course_id instead of generating one\n      setCourse(prevCourse => ({\n        ...prevCourse,\n        course_id: '',\n        // Leave empty for user input\n        program_id: initialProgramId || ''\n      }));\n      setLoading(false);\n    }\n  }, [id, isEditing, navigate, initialProgramId]);\n\n  // Add this new useEffect to initialize program associations with primary program\n  useEffect(() => {\n    // For new courses, when program_id changes, update program associations\n    if (!isEditing && course.program_id && programs.length > 0) {\n      const selectedProgram = programs.find(p => p.program_id === course.program_id);\n      if (selectedProgram && !programAssociations.some(p => p.program_id === course.program_id)) {\n        setProgramAssociations(prev => [...prev, {\n          program_id: course.program_id,\n          name: selectedProgram.name || '',\n          department_id: selectedProgram.department_id || '',\n          is_core: course.is_core\n        }]);\n      }\n    }\n  }, [course.program_id, course.is_core, isEditing, programs, programAssociations]);\n\n  // Update course.semesters when selectedSemesters changes\n  useEffect(() => {\n    setCourse(prev => ({\n      ...prev,\n      semesters: selectedSemesters\n    }));\n  }, [selectedSemesters]);\n  const validateForm = () => {\n    const newErrors = {};\n    if (!course.course_id.trim()) {\n      newErrors.course_id = 'Course ID is required';\n    }\n    if (!course.name.trim()) {\n      newErrors.name = 'Course name is required';\n    }\n    if (!course.program_id) {\n      newErrors.program_id = 'Program is required';\n    }\n    if (!course.department_id) {\n      newErrors.department_id = 'Department ID is required (should be set automatically)';\n    }\n    if (course.duration_minutes === '') {\n      newErrors.duration_minutes = 'Duration is required';\n    } else if (typeof course.duration_minutes === 'number' && course.duration_minutes <= 0) {\n      newErrors.duration_minutes = 'Duration must be greater than 0';\n    }\n    if (course.semesters.length === 0) {\n      newErrors.semesters = 'At least one semester must be selected';\n    }\n    console.log('Validation errors:', newErrors);\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSemesterChange = semester => {\n    setSelectedSemesters(prev => {\n      if (prev.includes(semester)) {\n        return prev.filter(s => s !== semester);\n      } else {\n        return [...prev, semester];\n      }\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) {\n      return;\n    }\n    try {\n      setSaving(true);\n      console.log('About to submit course data:', course);\n\n      // Create a properly structured courseData object with explicit mapping of program associations\n      const courseData = {\n        ...course,\n        semesters: selectedSemesters,\n        course_name: course.name,\n        // Ensure course_name is set for backend compatibility\n        duration_minutes: Number(course.duration_minutes),\n        // Force conversion to number\n        // Include ALL program associations with explicit boolean conversion\n        program_associations: programAssociations.map(pa => ({\n          program_id: pa.program_id,\n          is_core: pa.is_core === true,\n          // Ensure proper boolean conversion\n          num_classes: course.numClasses // Use the global numClasses value\n        }))\n      };\n      console.log('Submitting course data with associations:', courseData);\n      console.log('Program associations:', programAssociations);\n\n      // Use a try/catch specifically for the API call\n      try {\n        let result;\n        if (isEditing) {\n          result = await courseService.updateCourse(id, courseData);\n        } else {\n          result = await courseService.createCourse(courseData);\n        }\n        console.log('API call succeeded with result:', result);\n        setSnackbar({\n          open: true,\n          message: `Course ${isEditing ? 'updated' : 'created'} successfully`,\n          severity: 'success'\n        });\n\n        // Navigate back after a brief delay\n        setTimeout(() => {\n          navigate('/admin/courses');\n        }, 1500);\n      } catch (apiError) {\n        console.error('API call failed:', apiError);\n        setSnackbar({\n          open: true,\n          message: apiError.message || `Failed to ${isEditing ? 'update' : 'create'} course`,\n          severity: 'error'\n        });\n      }\n    } catch (error) {\n      console.error('Error in form submission:', error);\n      setSnackbar({\n        open: true,\n        message: error.message || `Unexpected error when ${isEditing ? 'updating' : 'creating'} course`,\n        severity: 'error'\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n  const handleChange = field => e => {\n    setCourse({\n      ...course,\n      [field]: e.target.value\n    });\n\n    // Clear the error for this field if it exists\n    if (errors[field]) {\n      setErrors({\n        ...errors,\n        [field]: ''\n      });\n    }\n  };\n  const handleProgramChange = event => {\n    const newProgramId = event.target.value;\n\n    // Find the selected program to get its department_id\n    const selectedProgram = programs.find(p => p.program_id === newProgramId);\n    const departmentId = selectedProgram ? selectedProgram.department_id : '';\n    setCourse({\n      ...course,\n      program_id: newProgramId,\n      department_id: departmentId // Add the department_id\n    });\n\n    // Clear any program_id error\n    if (errors.program_id) {\n      setErrors({\n        ...errors,\n        program_id: ''\n      });\n    }\n    // Add the selected program to program associations if it doesn't exist\n    if (newProgramId && !programAssociations.some(p => p.program_id === newProgramId) && selectedProgram) {\n      setProgramAssociations(prev => [...prev, {\n        program_id: newProgramId,\n        name: selectedProgram.name || '',\n        department_id: departmentId || '',\n        is_core: course.is_core\n      }]);\n    }\n  };\n  const handleDurationChange = value => {\n    setCourse({\n      ...course,\n      duration_minutes: value\n    });\n\n    // Clear any duration error\n    if (errors.duration_minutes) {\n      setErrors({\n        ...errors,\n        duration_minutes: ''\n      });\n    }\n  };\n\n  // Modified to handle numClasses changes\n  const handleNumClassesChange = value => {\n    setCourse({\n      ...course,\n      numClasses: value\n    });\n  };\n  const handleProgramAssociationChange = (programId, field, value) => {\n    // Log for debugging\n    console.log(`Changing ${field} for program ${programId} to:`, value);\n\n    // Create a new copy of the associations array rather than modifying in place\n    setProgramAssociations(prev => prev.map(p => p.program_id === programId ? {\n      ...p,\n      [field]: Boolean(value)\n    } : p));\n\n    // Only update the course-level is_core flag for the primary program\n    if (programId === course.program_id && field === 'is_core') {\n      setCourse(prev => ({\n        ...prev,\n        is_core: value\n      }));\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        my: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(MuiLink, {\n        component: Link,\n        to: \"/admin/courses\",\n        underline: \"hover\",\n        color: \"inherit\",\n        children: \"Courses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"text.primary\",\n        children: isEditing ? 'Edit Course' : 'New Course'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        children: isEditing ? 'Edit Course' : 'New Course'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 22\n        }, this),\n        component: Link,\n        to: \"/admin/courses\",\n        children: \"Back to List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(TextInput, {\n              id: \"course_id\",\n              label: \"Course ID\",\n              value: course.course_id,\n              onChange: handleChange('course_id'),\n              error: errors.course_id,\n              required: true,\n              disabled: isEditing // ID can't be changed once created\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              margin: \"normal\",\n              error: !!errors.program_id,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"program-select-label\",\n                children: \"Program *\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"program-select-label\",\n                id: \"program_id\",\n                value: course.program_id,\n                label: \"Program *\",\n                onChange: handleProgramChange,\n                disabled: isEditing // Can't change program once created\n                ,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"Please select a program\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 494,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 493,\n                  columnNumber: 19\n                }, this), programs.map(prog => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: prog.program_id,\n                  children: prog.name\n                }, prog.program_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 17\n              }, this), errors.program_id && /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"error\",\n                variant: \"caption\",\n                children: errors.program_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextInput, {\n              id: \"name\",\n              label: \"Course Name\",\n              value: course.name,\n              onChange: handleChange('name'),\n              error: errors.name,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              margin: \"normal\",\n              sx: {\n                mt: 0\n              },\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"duration_minutes\",\n                label: \"Duration (minutes)\",\n                type: \"number\",\n                value: course.duration_minutes,\n                onChange: e => handleDurationChange(Number(e.target.value) || ''),\n                error: !!errors.duration_minutes,\n                helperText: errors.duration_minutes || '',\n                required: true,\n                fullWidth: true,\n                inputProps: {\n                  min: 1,\n                  max: 300\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              margin: \"normal\",\n              sx: {\n                mt: 0\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"num-classes-global-label\",\n                children: \"Times offered per week\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"num-classes-global-label\",\n                id: \"numClasses\",\n                value: course.numClasses,\n                label: \"Times offered per week\",\n                onChange: e => handleNumClassesChange(Number(e.target.value)),\n                fullWidth: true,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: 1,\n                  children: \"Once (1)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: 2,\n                  children: \"Twice (2)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 549,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: 3,\n                  children: \"Thrice (3)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 550,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              component: \"fieldset\",\n              sx: {\n                mt: 2,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                component: \"legend\",\n                children: \"Semester\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 557,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                row: true,\n                children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: selectedSemesters.includes('Fall'),\n                    onChange: () => handleSemesterChange('Fall')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 561,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Fall\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: selectedSemesters.includes('Spring'),\n                    onChange: () => handleSemesterChange('Spring')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 570,\n                    columnNumber: 23\n                  }, this),\n                  label: \"Spring\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 568,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 15\n            }, this), errors.semesters && /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"error\",\n              variant: \"caption\",\n              children: errors.semesters\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                mt: 3,\n                mb: 1\n              },\n              children: \"Program Associations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              sx: {\n                mb: 2\n              },\n              children: \"Select which programs this course is associated with and specify if it's core for each program.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n              multiple: true,\n              id: \"program-associations\",\n              options: allPrograms,\n              disableCloseOnSelect: true,\n              getOptionLabel: option => `${option.name} (${option.department_id})`,\n              value: allPrograms.filter(p => programAssociations.some(pa => pa.program_id === p.program_id)),\n              onChange: (_, newValue) => {\n                // Update program associations based on selected programs\n                setProgramAssociations(prev => {\n                  // Keep existing associations for programs that are still selected\n                  const existing = prev.filter(p => newValue.some(nv => nv.program_id === p.program_id));\n\n                  // Add new associations\n                  const newAssociations = newValue.filter(nv => !existing.some(e => e.program_id === nv.program_id)).map(nv => ({\n                    program_id: nv.program_id,\n                    name: nv.name,\n                    department_id: nv.department_id,\n                    is_core: false\n                  }));\n                  return [...existing, ...newAssociations];\n                });\n              },\n              renderOption: (props, option, {\n                selected\n              }) => /*#__PURE__*/_jsxDEV(\"li\", {\n                ...props,\n                children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                  style: {\n                    marginRight: 8\n                  },\n                  checked: selected\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 624,\n                  columnNumber: 23\n                }, this), option.name, \" (\", option.department_id, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 21\n              }, this),\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                ...params,\n                label: \"Associated Programs\",\n                placeholder: \"Select programs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 632,\n                columnNumber: 21\n              }, this),\n              sx: {\n                mb: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 15\n            }, this), programAssociations.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n              variant: \"outlined\",\n              sx: {\n                p: 2,\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                gutterBottom: true,\n                children: \"Program Settings\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 21\n              }, this), programAssociations.map(association => {\n                // Debug logging inside the map function\n                console.log(`Rendering program ${association.program_id} with is_core:`, association.is_core);\n                return /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    mb: 2,\n                    p: 2,\n                    border: '1px solid #e0e0e0',\n                    borderRadius: 1,\n                    // Highlight the primary program with a different border\n                    borderColor: association.program_id === course.program_id ? '#00539F' : '#e0e0e0',\n                    borderWidth: association.program_id === course.program_id ? 2 : 1\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle2\",\n                    children: [association.name, \" (\", association.department_id, \")\", association.program_id === course.program_id && /*#__PURE__*/_jsxDEV(Chip, {\n                      label: \"Primary Program\",\n                      size: \"small\",\n                      color: \"primary\",\n                      sx: {\n                        ml: 1\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 666,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 663,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    spacing: 2,\n                    sx: {\n                      mt: 1\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 12,\n                      children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                        control: /*#__PURE__*/_jsxDEV(Switch, {\n                          checked: Boolean(association.is_core),\n                          onChange: e => handleProgramAssociationChange(association.program_id, 'is_core', e.target.checked)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 678,\n                          columnNumber: 31\n                        }, this),\n                        label: \"Core Course in this Program\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 676,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 675,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 674,\n                    columnNumber: 25\n                  }, this)]\n                }, association.program_id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sx: {\n              mt: 2,\n              display: 'flex',\n              justifyContent: 'flex-end'\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 28\n              }, this),\n              disabled: saving,\n              sx: {\n                bgcolor: '#00539F'\n              },\n              children: saving ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 24,\n                  sx: {\n                    mr: 1,\n                    color: 'white'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 21\n                }, this), \"Saving...\"]\n              }, void 0, true) : 'Save Course'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: () => setSnackbar({\n        ...snackbar,\n        open: false\n      }),\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setSnackbar({\n          ...snackbar,\n          open: false\n        }),\n        severity: snackbar.severity,\n        children: snackbar.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 442,\n    columnNumber: 5\n  }, this);\n};\n_s(CourseForm, \"VkwT8QlmX8cigf2I3RNsnY8rtAg=\", false, function () {\n  return [useNavigate, useLocation, useParams];\n});\n_c = CourseForm;\nexport default CourseForm;\nvar _c;\n$RefreshReg$(_c, \"CourseForm\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Typography","Paper","Grid","Snackbar","Alert","Checkbox","CircularProgress","Breadcrumbs","Link","MuiLink","FormControl","InputLabel","Select","MenuItem","FormControlLabel","Switch","FormGroup","FormLabel","TextField","Autocomplete","Chip","SaveIcon","ArrowBackIcon","useNavigate","useParams","useLocation","TextInput","programService","courseService","jsxDEV","_jsxDEV","Fragment","_Fragment","CourseForm","_s","navigate","location","id","isEditing","Boolean","queryParams","URLSearchParams","search","initialProgramId","get","programs","setPrograms","programAssociations","setProgramAssociations","allPrograms","setAllPrograms","selectedSemesters","setSelectedSemesters","course","setCourse","course_id","program_id","department_id","name","description","duration_minutes","is_core","numClasses","semesters","loading","setLoading","saving","setSaving","errors","setErrors","snackbar","setSnackbar","open","message","severity","loadPrograms","data","getAllPrograms","length","selectedProgram","find","p","prevCourse","error","console","loadCourse","log","getCourseById","loadedSemesters","Array","isArray","numClassesValue","course_name","associations","map","prog","some","prev","validateForm","newErrors","trim","Object","keys","handleSemesterChange","semester","includes","filter","s","handleSubmit","e","preventDefault","courseData","Number","program_associations","pa","num_classes","result","updateCourse","createCourse","setTimeout","apiError","handleChange","field","target","value","handleProgramChange","event","newProgramId","departmentId","handleDurationChange","handleNumClassesChange","handleProgramAssociationChange","programId","sx","display","justifyContent","my","children","fileName","_jsxFileName","lineNumber","columnNumber","mb","component","to","underline","color","alignItems","variant","startIcon","onSubmit","container","spacing","item","xs","md","label","onChange","required","disabled","fullWidth","margin","labelId","mt","type","helperText","inputProps","min","max","row","control","checked","multiple","options","disableCloseOnSelect","getOptionLabel","option","_","newValue","existing","nv","newAssociations","renderOption","props","selected","style","marginRight","renderInput","params","placeholder","gutterBottom","association","border","borderRadius","borderColor","borderWidth","size","ml","bgcolor","mr","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","_c","$RefreshReg$"],"sources":["/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/courses/CourseForm.tsx"],"sourcesContent":["// src/components/admin/courses/CourseForm.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Button, \n  Typography, \n  Paper, \n  Grid, \n  Snackbar, \n  Alert,\n  Checkbox,\n  CircularProgress,\n  Breadcrumbs,\n  Link as MuiLink,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  FormControlLabel,\n  Switch,\n  FormGroup,\n  FormLabel,\n  TextField\n} from '@mui/material';\n\nimport { Autocomplete, Chip, FormHelperText } from '@mui/material';\n\nimport SaveIcon from '@mui/icons-material/Save';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { Link, useNavigate, useParams, useLocation } from 'react-router-dom';\nimport { TextInput, NumberInput } from '../../../components/common/FormComponents';\n\n// Import services\nimport departmentService from '../../../services/departmentService';\nimport programService from '../../../services/programService';\nimport courseService, { Course } from '../../../services/courseService';\n\ninterface ProgramAssociation {\n  program_id: string;\n  name: string;\n  department_id: string;\n  is_core: boolean;\n}\n\nconst CourseForm: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { id } = useParams<{ id: string }>();\n  const isEditing = Boolean(id);\n  \n  // Get programId from query param if present (for new courses)\n  const queryParams = new URLSearchParams(location.search);\n  const initialProgramId = queryParams.get('programId') || '';\n  \n  const [programs, setPrograms] = useState<any[]>([]);\n  const [programAssociations, setProgramAssociations] = useState<ProgramAssociation[]>([]);\n  const [allPrograms, setAllPrograms] = useState<any[]>([]);\n  const [selectedSemesters, setSelectedSemesters] = useState<string[]>([]);\n  const [course, setCourse] = useState<{\n    course_id: string;\n    program_id: string;\n    department_id: string;\n    name: string;\n    description: string;\n    duration_minutes: number | '';\n    is_core: boolean;\n    numClasses: number;\n    semesters: string[];\n  }>({\n    course_id: '',\n    program_id: initialProgramId,\n    department_id: '',\n    name: '',\n    description: '',\n    duration_minutes: 55,\n    is_core: false,\n    numClasses: 1,\n    semesters: []\n  });\n  \n  const [loading, setLoading] = useState(isEditing);\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState<{[key: string]: string}>({});\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });\n\n  useEffect(() => {\n    const loadPrograms = async () => {\n      try {\n        const data = await programService.getAllPrograms();\n        setPrograms(data);\n        setAllPrograms(data);\n        \n        // If we have programs and an initialProgramId, set the department_id\n        if (data.length > 0 && initialProgramId) {\n          const selectedProgram = data.find(p => p.program_id === initialProgramId);\n          if (selectedProgram) {\n            setCourse(prevCourse => ({\n              ...prevCourse,\n              department_id: selectedProgram.department_id\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Error loading programs:', error);\n        setSnackbar({\n          open: true,\n          message: 'Failed to load programs',\n          severity: 'error'\n        });\n      }\n    };\n\n    loadPrograms();\n    \n    if (isEditing && id) {\n      const loadCourse = async () => {\n        try {\n          console.log(`Loading course with ID: ${id}`);\n          const data = await courseService.getCourseById(id);\n          \n          if (data) {\n            // Log the received data for debugging\n            console.log('Loaded course data:', data);\n            \n            // Ensure semesters are always handled as an array\n            const loadedSemesters = Array.isArray(data.semesters) ? data.semesters : \n                                  (data.semesters ? [data.semesters] : []);\n            \n            // Set semester checkboxes\n            setSelectedSemesters(loadedSemesters);\n            \n            // Get the numClasses value - log it for debugging\n            const numClassesValue = data.numClasses || 1;\n            console.log('numClasses loaded:', numClassesValue);\n            \n            // Ensure all required fields are set\n            setCourse({\n              course_id: data.course_id || '',\n              program_id: data.program_id || (data.programs && data.programs.length > 0 ? data.programs[0].program_id : ''),\n              department_id: data.department_id || '',\n              name: data.course_name || data.name || '',\n              description: data.description || '',\n              duration_minutes: typeof data.duration_minutes === 'number' ? data.duration_minutes : 55,\n              is_core: Boolean(data.is_core),\n              numClasses: numClassesValue,\n              semesters: loadedSemesters\n            });\n\n            // Add this section to handle program associations:\n            if (data.programs && Array.isArray(data.programs)) {\n              // Transform the data to ensure we have complete program association data\n              const associations = data.programs.map(prog => ({\n                program_id: prog.program_id,\n                name: prog.name || '',\n                department_id: prog.department_id || '',\n                is_core: prog.is_core === true, // Explicitly convert to boolean\n              }));\n              \n              console.log('Processed program associations:', associations);\n              setProgramAssociations(associations);\n            }\n          } else {\n            setSnackbar({\n              open: true,\n              message: 'Course not found',\n              severity: 'error'\n            });\n            navigate('/admin/courses');\n          }\n        } catch (error) {\n          console.error('Error loading course:', error);\n          setSnackbar({\n            open: true,\n            message: 'Failed to load course',\n            severity: 'error'\n          });\n        } finally {\n          setLoading(false);\n        }\n      };\n      \n      loadCourse();\n    } else {\n      // For new courses, set an empty course_id instead of generating one\n      setCourse(prevCourse => ({\n        ...prevCourse,\n        course_id: '', // Leave empty for user input\n        program_id: initialProgramId || ''\n      }));\n      setLoading(false);\n    }\n  }, [id, isEditing, navigate, initialProgramId]);\n\n  // Add this new useEffect to initialize program associations with primary program\n  useEffect(() => {\n    // For new courses, when program_id changes, update program associations\n    if (!isEditing && course.program_id && programs.length > 0) {\n      const selectedProgram = programs.find(p => p.program_id === course.program_id);\n      \n      if (selectedProgram && !programAssociations.some(p => p.program_id === course.program_id)) {\n        setProgramAssociations(prev => [\n          ...prev,\n          {\n            program_id: course.program_id,\n            name: selectedProgram.name || '',\n            department_id: selectedProgram.department_id || '',\n            is_core: course.is_core\n          }\n        ]);\n      }\n    }\n  }, [course.program_id, course.is_core, isEditing, programs, programAssociations]);\n\n  // Update course.semesters when selectedSemesters changes\n  useEffect(() => {\n    setCourse(prev => ({\n      ...prev,\n      semesters: selectedSemesters\n    }));\n  }, [selectedSemesters]);\n\n  const validateForm = () => {\n    const newErrors: {[key: string]: string} = {};\n    \n    if (!course.course_id.trim()) {\n      newErrors.course_id = 'Course ID is required';\n    }\n    \n    if (!course.name.trim()) {\n      newErrors.name = 'Course name is required';\n    }\n    \n    if (!course.program_id) {\n      newErrors.program_id = 'Program is required';\n    }\n    \n    if (!course.department_id) {\n      newErrors.department_id = 'Department ID is required (should be set automatically)';\n    }\n    \n    if (course.duration_minutes === '') {\n      newErrors.duration_minutes = 'Duration is required';\n    } else if (typeof course.duration_minutes === 'number' && course.duration_minutes <= 0) {\n      newErrors.duration_minutes = 'Duration must be greater than 0';\n    }\n    \n    if (course.semesters.length === 0) {\n      newErrors.semesters = 'At least one semester must be selected';\n    }\n    \n    console.log('Validation errors:', newErrors);\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSemesterChange = (semester: string) => {\n    setSelectedSemesters(prev => {\n      if (prev.includes(semester)) {\n        return prev.filter(s => s !== semester);\n      } else {\n        return [...prev, semester];\n      }\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n  \n    try {\n      setSaving(true);\n      \n      console.log('About to submit course data:', course);\n    \n      // Create a properly structured courseData object with explicit mapping of program associations\n      const courseData = {\n        ...course,\n        semesters: selectedSemesters,\n        course_name: course.name, // Ensure course_name is set for backend compatibility\n        duration_minutes: Number(course.duration_minutes), // Force conversion to number\n        // Include ALL program associations with explicit boolean conversion\n        program_associations: programAssociations.map(pa => ({\n          program_id: pa.program_id,\n          is_core: pa.is_core === true, // Ensure proper boolean conversion\n          num_classes: course.numClasses // Use the global numClasses value\n        }))\n      };\n  \n      console.log('Submitting course data with associations:', courseData);\n      console.log('Program associations:', programAssociations);\n      \n      // Use a try/catch specifically for the API call\n      try {\n        let result;\n        if (isEditing) {\n          result = await courseService.updateCourse(id!, courseData);\n        } else {\n          result = await courseService.createCourse(courseData);\n        }\n        \n        console.log('API call succeeded with result:', result);\n        \n        setSnackbar({\n          open: true,\n          message: `Course ${isEditing ? 'updated' : 'created'} successfully`,\n          severity: 'success'\n        });\n        \n        // Navigate back after a brief delay\n        setTimeout(() => {\n          navigate('/admin/courses');\n        }, 1500);\n      } catch (apiError: any) {\n        console.error('API call failed:', apiError);\n        \n        setSnackbar({\n          open: true,\n          message: apiError.message || `Failed to ${isEditing ? 'update' : 'create'} course`,\n          severity: 'error'\n        });\n      }\n    } catch (error: any) {\n      console.error('Error in form submission:', error);\n      setSnackbar({\n        open: true,\n        message: error.message || `Unexpected error when ${isEditing ? 'updating' : 'creating'} course`,\n        severity: 'error'\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleChange = (field: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCourse({\n      ...course,\n      [field]: e.target.value\n    });\n    \n    // Clear the error for this field if it exists\n    if (errors[field]) {\n      setErrors({\n        ...errors,\n        [field]: ''\n      });\n    }\n  };\n\n  const handleProgramChange = (event: SelectChangeEvent) => {\n    const newProgramId = event.target.value;\n    \n    // Find the selected program to get its department_id\n    const selectedProgram = programs.find(p => p.program_id === newProgramId);\n    const departmentId = selectedProgram ? selectedProgram.department_id : '';\n    \n    setCourse({\n      ...course,\n      program_id: newProgramId,\n      department_id: departmentId // Add the department_id\n    });\n    \n    // Clear any program_id error\n    if (errors.program_id) {\n      setErrors({\n        ...errors,\n        program_id: ''\n      });\n    }\n    // Add the selected program to program associations if it doesn't exist\n    if (newProgramId && !programAssociations.some(p => p.program_id === newProgramId) && selectedProgram) {\n      setProgramAssociations(prev => [\n        ...prev,\n        {\n          program_id: newProgramId,\n          name: selectedProgram.name || '',\n          department_id: departmentId || '',\n          is_core: course.is_core\n        }\n      ]);\n    }\n  };\n\n  const handleDurationChange = (value: number | '') => {\n    setCourse({\n      ...course,\n      duration_minutes: value\n    });\n    \n    // Clear any duration error\n    if (errors.duration_minutes) {\n      setErrors({\n        ...errors,\n        duration_minutes: ''\n      });\n    }\n  };\n\n  // Modified to handle numClasses changes\n  const handleNumClassesChange = (value: number) => {\n    setCourse({\n      ...course,\n      numClasses: value\n    });\n  };\n\n  const handleProgramAssociationChange = (programId: string, field: 'is_core', value: boolean) => {\n    // Log for debugging\n    console.log(`Changing ${field} for program ${programId} to:`, value);\n    \n    // Create a new copy of the associations array rather than modifying in place\n    setProgramAssociations(prev => \n      prev.map(p => \n        p.program_id === programId \n        ? { ...p, [field]: Boolean(value) }\n          : p\n      )\n    );\n    \n    // Only update the course-level is_core flag for the primary program\n    if (programId === course.program_id && field === 'is_core') {\n      setCourse(prev => ({\n        ...prev,\n        is_core: value as boolean\n      }));\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Breadcrumbs sx={{ mb: 2 }}>\n        <MuiLink component={Link} to=\"/admin/courses\" underline=\"hover\" color=\"inherit\">\n          Courses\n        </MuiLink>\n        <Typography color=\"text.primary\">\n          {isEditing ? 'Edit Course' : 'New Course'}\n        </Typography>\n      </Breadcrumbs>\n\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          {isEditing ? 'Edit Course' : 'New Course'}\n        </Typography>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          startIcon={<ArrowBackIcon />}\n          component={Link}\n          to=\"/admin/courses\"\n        >\n          Back to List\n        </Button>\n      </Box>\n\n      <Paper sx={{ p: 3 }}>\n        <Box component=\"form\" onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n              <TextInput\n                id=\"course_id\"\n                label=\"Course ID\"\n                value={course.course_id}\n                onChange={handleChange('course_id')}\n                error={errors.course_id}\n                required\n                disabled={isEditing} // ID can't be changed once created\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth margin=\"normal\" error={!!errors.program_id}>\n                <InputLabel id=\"program-select-label\">Program *</InputLabel>\n                <Select\n                  labelId=\"program-select-label\"\n                  id=\"program_id\"\n                  value={course.program_id}\n                  label=\"Program *\"\n                  onChange={handleProgramChange}\n                  disabled={isEditing} // Can't change program once created\n                  required\n                >\n                  <MenuItem value=\"\">\n                    <em>Please select a program</em>\n                  </MenuItem>\n                  {programs.map((prog) => (\n                    <MenuItem key={prog.program_id} value={prog.program_id}>\n                      {prog.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n                {errors.program_id && (\n                  <Typography color=\"error\" variant=\"caption\">\n                    {errors.program_id}\n                  </Typography>\n                )}\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextInput\n                id=\"name\"\n                label=\"Course Name\"\n                value={course.name}\n                onChange={handleChange('name')}\n                error={errors.name}\n                required\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth margin=\"normal\" sx={{ mt: 0 }}>\n                <TextField\n                  id=\"duration_minutes\"\n                  label=\"Duration (minutes)\"\n                  type=\"number\"\n                  value={course.duration_minutes}\n                  onChange={(e) => handleDurationChange(Number(e.target.value) || '')}\n                  error={!!errors.duration_minutes}\n                  helperText={errors.duration_minutes || ''}\n                  required\n                  fullWidth\n                  inputProps={{ min: 1, max: 300 }}\n                />\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth margin=\"normal\" sx={{ mt: 0 }}>\n                <InputLabel id=\"num-classes-global-label\">Times offered per week</InputLabel>\n                <Select\n                  labelId=\"num-classes-global-label\"\n                  id=\"numClasses\"\n                  value={course.numClasses}\n                  label=\"Times offered per week\"\n                  onChange={(e) => handleNumClassesChange(Number(e.target.value))}\n                  fullWidth\n                >\n                  <MenuItem value={1}>Once (1)</MenuItem>\n                  <MenuItem value={2}>Twice (2)</MenuItem>\n                  <MenuItem value={3}>Thrice (3)</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <FormControl component=\"fieldset\" sx={{ mt: 2, mb: 2 }}>\n                <FormLabel component=\"legend\">Semester</FormLabel>\n                <FormGroup row>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={selectedSemesters.includes('Fall')}\n                        onChange={() => handleSemesterChange('Fall')}\n                      />\n                    }\n                    label=\"Fall\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={selectedSemesters.includes('Spring')}\n                        onChange={() => handleSemesterChange('Spring')}\n                      />\n                    }\n                    label=\"Spring\"\n                  />\n                </FormGroup>\n              </FormControl>\n              {errors.semesters && (\n                <Typography color=\"error\" variant=\"caption\">\n                  {errors.semesters}\n                </Typography>\n              )}\n            </Grid>\n\n            <Grid item xs={12}>\n              <Typography variant=\"h6\" sx={{ mt: 3, mb: 1 }}>Program Associations</Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                Select which programs this course is associated with and specify if it's core for each program.\n              </Typography>\n  \n              <Autocomplete\n                multiple\n                id=\"program-associations\"\n                options={allPrograms}\n                disableCloseOnSelect\n                getOptionLabel={(option) => `${option.name} (${option.department_id})`}\n                value={allPrograms.filter(p => \n                  programAssociations.some(pa => pa.program_id === p.program_id)\n                )}\n                onChange={(_, newValue) => {\n                  // Update program associations based on selected programs\n                  setProgramAssociations(prev => {\n                    // Keep existing associations for programs that are still selected\n                      const existing = prev.filter(p => \n                        newValue.some(nv => nv.program_id === p.program_id)\n                      );\n        \n                      // Add new associations\n                      const newAssociations = newValue\n                        .filter(nv => !existing.some(e => e.program_id === nv.program_id))\n                        .map(nv => ({\n                          program_id: nv.program_id,\n                          name: nv.name,\n                          department_id: nv.department_id,\n                          is_core: false\n                        }));\n        \n                      return [...existing, ...newAssociations];\n                    });\n                  }}\n                  renderOption={(props, option, { selected }) => (\n                    <li {...props}>\n                      <Checkbox\n                        style={{ marginRight: 8 }}\n                        checked={selected}\n                      />\n                      {option.name} ({option.department_id})\n                    </li>\n                  )}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Associated Programs\"\n                      placeholder=\"Select programs\"\n                    />\n                  )}\n                  sx={{ mb: 2 }}\n                />\n  \n                {programAssociations.length > 0 && (\n                  <Paper variant=\"outlined\" sx={{ p: 2, mt: 2 }}>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      Program Settings\n                    </Typography>\n                  {programAssociations.map((association) => {\n                    // Debug logging inside the map function\n                    console.log(`Rendering program ${association.program_id} with is_core:`, association.is_core);\n                    \n                    return (\n                      <Box \n                        key={association.program_id} \n                        sx={{ \n                          mb: 2, \n                          p: 2, \n                          border: '1px solid #e0e0e0', \n                          borderRadius: 1,\n                          // Highlight the primary program with a different border\n                          borderColor: association.program_id === course.program_id ? '#00539F' : '#e0e0e0',\n                          borderWidth: association.program_id === course.program_id ? 2 : 1,\n                        }}\n                      >\n                        <Typography variant=\"subtitle2\">\n                          {association.name} ({association.department_id})\n                          {association.program_id === course.program_id && (\n                            <Chip \n                              label=\"Primary Program\" \n                              size=\"small\" \n                              color=\"primary\" \n                              sx={{ ml: 1 }}\n                            />\n                          )}\n                        </Typography>\n                        <Grid container spacing={2} sx={{ mt: 1 }}>\n                          <Grid item xs={12}>\n                          <FormControlLabel\n                            control={\n                              <Switch\n                                checked={Boolean(association.is_core)}\n                                onChange={(e) => handleProgramAssociationChange(\n                                  association.program_id,\n                                  'is_core',\n                                  e.target.checked\n                                )}\n                              />\n                            }\n                            label=\"Core Course in this Program\"\n                          />\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    );\n                  })}\n                </Paper>\n              )}\n            </Grid>\n\n            <Grid item xs={12} sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<SaveIcon />}\n                disabled={saving}\n                sx={{ bgcolor: '#00539F' }}\n              >\n                {saving ? (\n                  <>\n                    <CircularProgress size={24} sx={{ mr: 1, color: 'white' }} />\n                    Saving...\n                  </>\n                ) : (\n                  'Save Course'\n                )}\n              </Button>\n            </Grid>\n          </Grid>\n        </Box>\n      </Paper>\n\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity}>\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default CourseForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}