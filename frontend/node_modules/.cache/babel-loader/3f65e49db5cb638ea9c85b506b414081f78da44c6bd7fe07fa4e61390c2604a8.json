{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Documents\\\\Master's Colleges\\\\UNIVERSITY OF DELAWARE\\\\COURSES\\\\Project\\\\university-scheduler\\\\frontend\\\\src\\\\components\\\\admin\\\\professors\\\\ProfessorForm.tsx\",\n  _s = $RefreshSig$();\n// ProfessorForm.tsx \nimport React, { useState, useEffect } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, TextField, Box, Checkbox, FormControlLabel, ListItemText, Typography, IconButton, Paper } from '@mui/material';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\n\n// Interface for course selection with semester information\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfessorForm = ({\n  open,\n  professor,\n  departments,\n  courses,\n  onClose,\n  onSave\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    professor_id: '',\n    department_id: '',\n    first_name: '',\n    last_name: '',\n    email: '',\n    password_hash: '',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  });\n  const [errors, setErrors] = useState({});\n\n  // State to manage course selections with their respective semesters\n  const [courseSelections, setCourseSelections] = useState([]);\n\n  // Filter courses based on selected department\n  const filteredCourses = formData.department_id ? courses.filter(course => course.department_id === formData.department_id) : [];\n  useEffect(() => {\n    if (professor) {\n      setFormData({\n        ...professor\n      });\n\n      // Initialize course selections from existing data\n      if (professor.course_ids && Array.isArray(professor.course_ids) && professor.course_ids.length > 0) {\n        console.log('Loading professor course IDs:', professor.course_ids);\n\n        // Create course selections with proper semester information\n        const selections = professor.course_ids.map(courseId => {\n          return {\n            courseId,\n            // Default to 'Fall' semester if no specific semester info is available\n            semesters: professor.semesters || ['Fall']\n          };\n        });\n        console.log('Setting course selections:', selections);\n        setCourseSelections(selections);\n      } else {\n        console.log('No course IDs found, setting empty selections');\n        setCourseSelections([]);\n      }\n    } else {\n      // For new professors, reset the form\n      setFormData({\n        professor_id: '',\n        department_id: departments.length > 0 ? departments[0].department_id : '',\n        first_name: '',\n        last_name: '',\n        email: '',\n        password_hash: '',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      setCourseSelections([]);\n    }\n    setErrors({});\n  }, [professor, departments]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name) {\n      setFormData(prev => ({\n        ...prev,\n        [name]: value\n      }));\n\n      // Clear error for this field when user types\n      if (errors[name]) {\n        setErrors(prev => {\n          const newErrors = {\n            ...prev\n          };\n          delete newErrors[name];\n          return newErrors;\n        });\n      }\n    }\n  };\n\n  // Add a new course selection\n  const handleAddCourse = () => {\n    setCourseSelections([...courseSelections, {\n      courseId: '',\n      semesters: []\n    }]);\n  };\n\n  // Remove a course selection\n  const handleRemoveCourse = index => {\n    const updatedSelections = [...courseSelections];\n    updatedSelections.splice(index, 1);\n    setCourseSelections(updatedSelections);\n  };\n\n  // Update a specific course selection\n  const handleCourseChange = (index, courseId) => {\n    const updatedSelections = [...courseSelections];\n    updatedSelections[index] = {\n      ...updatedSelections[index],\n      courseId\n    };\n    setCourseSelections(updatedSelections);\n  };\n\n  // Handle semester selection for a specific course\n  const handleSemesterChange = (index, semester) => {\n    const updatedSelections = [...courseSelections];\n    const currentSemesters = [...updatedSelections[index].semesters];\n    const semesterIndex = currentSemesters.indexOf(semester);\n    if (semesterIndex > -1) {\n      // Remove semester if already selected\n      currentSemesters.splice(semesterIndex, 1);\n    } else {\n      // Add semester if not selected\n      currentSemesters.push(semester);\n    }\n    updatedSelections[index] = {\n      ...updatedSelections[index],\n      semesters: currentSemesters\n    };\n    setCourseSelections(updatedSelections);\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.first_name.trim()) {\n      newErrors.first_name = 'First name is required';\n    }\n    if (!formData.last_name.trim()) {\n      newErrors.last_name = 'Last name is required';\n    }\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Invalid email format';\n    }\n    if (!formData.department_id) {\n      newErrors.department_id = 'Department is required';\n    }\n\n    // Generate a professor_id if creating a new professor\n    if (!professor && !formData.professor_id) {\n      // We can either generate an ID here or let the backend generate it\n      // For consistency with other forms, let's generate one\n      formData.professor_id = `PROF-${Math.random().toString(36).substring(2, 10).toUpperCase()}`;\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = () => {\n    if (validateForm()) {\n      // Extract course IDs and collect all semesters\n      const courseIds = courseSelections.filter(selection => selection.courseId !== '').map(selection => selection.courseId);\n\n      // Collect all unique semesters from all course selections\n      const allSemesters = courseSelections.filter(selection => selection.courseId !== '').flatMap(selection => selection.semesters).filter((value, index, self) => self.indexOf(value) === index);\n      console.log('Course selections at submission:', courseSelections);\n      console.log('Course IDs being submitted:', courseIds);\n      console.log('Semesters being submitted:', allSemesters);\n      const professorData = {\n        ...formData,\n        course_ids: courseIds,\n        semesters: allSemesters,\n        updated_at: new Date().toISOString()\n      };\n\n      // No password handling here\n\n      console.log('Submitting professor data:', professorData);\n      onSave(professorData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: onClose,\n    maxWidth: \"md\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: professor ? 'Edit Professor' : 'Add New Professor'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"first_name\",\n            label: \"First Name\",\n            fullWidth: true,\n            value: formData.first_name,\n            onChange: handleChange,\n            error: !!errors.first_name,\n            helperText: errors.first_name,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"last_name\",\n            label: \"Last Name\",\n            fullWidth: true,\n            value: formData.last_name,\n            onChange: handleChange,\n            error: !!errors.last_name,\n            helperText: errors.last_name,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"email\",\n            label: \"Email\",\n            type: \"email\",\n            fullWidth: true,\n            value: formData.email,\n            onChange: handleChange,\n            error: !!errors.email,\n            helperText: errors.email,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            error: !!errors.department_id,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"department-label\",\n              children: \"Department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"department-label\",\n              name: \"department_id\",\n              value: formData.department_id,\n              onChange: handleChange,\n              label: \"Department\",\n              required: true,\n              children: departments.map(dept => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: dept.department_id,\n                children: dept.name\n              }, dept.department_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this), errors.department_id && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: errors.department_id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), !professor && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"professor_id\",\n            label: \"Professor ID (optional)\",\n            fullWidth: true,\n            value: formData.professor_id,\n            onChange: handleChange,\n            helperText: \"Leave blank for auto-generated ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Assigned Courses\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 30\n                }, this),\n                onClick: handleAddCourse,\n                variant: \"outlined\",\n                size: \"small\",\n                disabled: !formData.department_id,\n                children: \"Add Course\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this), courseSelections.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: \"No courses assigned. Click \\\"Add Course\\\" to assign courses.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexDirection: 'column',\n                gap: 2\n              },\n              children: courseSelections.map((selection, index) => /*#__PURE__*/_jsxDEV(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: 2\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                      fullWidth: true,\n                      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                        id: `course-select-label-${index}`,\n                        children: \"Course\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 356,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(Select, {\n                        labelId: `course-select-label-${index}`,\n                        value: selection.courseId,\n                        onChange: e => handleCourseChange(index, e.target.value),\n                        label: \"Course\",\n                        disabled: !formData.department_id,\n                        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                          value: \"\",\n                          children: /*#__PURE__*/_jsxDEV(\"em\", {\n                            children: \"Select a course\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 365,\n                            columnNumber: 33\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 364,\n                          columnNumber: 31\n                        }, this), filteredCourses.map(course => /*#__PURE__*/_jsxDEV(MenuItem, {\n                          value: course.course_id,\n                          disabled: courseSelections.some(s => s.courseId === course.course_id && courseSelections.indexOf(s) !== index),\n                          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                            primary: course.course_name,\n                            secondary: `${course.course_id} (${course.is_core ? 'Core' : 'Elective'})`\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 375,\n                            columnNumber: 35\n                          }, this)\n                        }, course.course_id, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 368,\n                          columnNumber: 33\n                        }, this))]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 357,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 355,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                      color: \"error\",\n                      onClick: () => handleRemoveCourse(index),\n                      size: \"small\",\n                      children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 388,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 383,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 354,\n                    columnNumber: 25\n                  }, this), selection.courseId && /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      mt: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      sx: {\n                        mb: 1,\n                        display: 'block'\n                      },\n                      children: \"Semester Availability:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 395,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Box, {\n                      sx: {\n                        display: 'flex',\n                        gap: 2\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: selection.semesters.includes('Fall'),\n                          onChange: () => handleSemesterChange(index, 'Fall'),\n                          size: \"small\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 401,\n                          columnNumber: 35\n                        }, this),\n                        label: \"Fall\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 399,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: selection.semesters.includes('Spring'),\n                          onChange: () => handleSemesterChange(index, 'Spring'),\n                          size: \"small\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 411,\n                          columnNumber: 35\n                        }, this),\n                        label: \"Spring\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 409,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 398,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 394,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this), filteredCourses.length === 0 && formData.department_id && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              sx: {\n                mt: 1\n              },\n              children: \"No courses available for this department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), professor && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"professor_id\",\n            label: \"Professor ID\",\n            fullWidth: true,\n            value: formData.professor_id,\n            InputProps: {\n              readOnly: true\n            },\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfessorForm, \"0fTLlerAAx2nooABVfwIBuoZPCw=\");\n_c = ProfessorForm;\nexport default ProfessorForm;\nvar _c;\n$RefreshReg$(_c, \"ProfessorForm\");","map":{"version":3,"names":["React","useState","useEffect","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormControl","FormHelperText","Grid","InputLabel","MenuItem","Select","TextField","Box","Checkbox","FormControlLabel","ListItemText","Typography","IconButton","Paper","Add","AddIcon","Delete","DeleteIcon","jsxDEV","_jsxDEV","ProfessorForm","open","professor","departments","courses","onClose","onSave","_s","formData","setFormData","professor_id","department_id","first_name","last_name","email","password_hash","created_at","Date","toISOString","updated_at","errors","setErrors","courseSelections","setCourseSelections","filteredCourses","filter","course","course_ids","Array","isArray","length","console","log","selections","map","courseId","semesters","handleChange","e","name","value","target","prev","newErrors","handleAddCourse","handleRemoveCourse","index","updatedSelections","splice","handleCourseChange","handleSemesterChange","semester","currentSemesters","semesterIndex","indexOf","push","validateForm","trim","test","Math","random","toString","substring","toUpperCase","Object","keys","handleSubmit","courseIds","selection","allSemesters","flatMap","self","professorData","maxWidth","fullWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","sx","mt","item","xs","md","label","onChange","error","helperText","required","type","id","labelId","dept","display","justifyContent","alignItems","mb","variant","startIcon","onClick","size","disabled","color","flexDirection","gap","p","course_id","some","s","primary","course_name","secondary","is_core","control","checked","includes","InputProps","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/components/admin/professors/ProfessorForm.tsx"],"sourcesContent":["// ProfessorForm.tsx \r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  FormControl,\r\n  FormHelperText,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Box,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  ListItemText,\r\n  Typography,\r\n  IconButton,\r\n  Paper\r\n} from '@mui/material';\r\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\r\nimport { Professor } from '../../../services/professorService';\r\nimport { Department } from '../../../services/departmentService';\r\nimport { Course } from '../../../services/courseService';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\n\r\ninterface ProfessorFormProps {\r\n  open: boolean;\r\n  professor: Professor | null;\r\n  departments: Department[];\r\n  courses: Course[];\r\n  onClose: () => void;\r\n  onSave: (professor: Professor) => void;\r\n}\r\n\r\n// Interface for course selection with semester information\r\ninterface CourseSelection {\r\n  courseId: string;\r\n  semesters: string[];\r\n}\r\n\r\nconst ProfessorForm: React.FC<ProfessorFormProps> = ({\r\n  open,\r\n  professor,\r\n  departments,\r\n  courses,\r\n  onClose,\r\n  onSave\r\n}) => {\r\n  const [formData, setFormData] = useState<Professor>({\r\n    professor_id: '',\r\n    department_id: '',\r\n    first_name: '',\r\n    last_name: '',\r\n    email: '',\r\n    password_hash: '',\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  });\r\n  \r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  \r\n  // State to manage course selections with their respective semesters\r\n  const [courseSelections, setCourseSelections] = useState<CourseSelection[]>([]);\r\n  \r\n  // Filter courses based on selected department\r\n  const filteredCourses = formData.department_id\r\n    ? courses.filter(course => course.department_id === formData.department_id)\r\n    : [];\r\n\r\n  useEffect(() => {\r\n    if (professor) {\r\n      setFormData({\r\n        ...professor,\r\n      });\r\n      \r\n      // Initialize course selections from existing data\r\n      if (professor.course_ids && Array.isArray(professor.course_ids) && professor.course_ids.length > 0) {\r\n        console.log('Loading professor course IDs:', professor.course_ids);\r\n        \r\n        // Create course selections with proper semester information\r\n        const selections = professor.course_ids.map(courseId => {\r\n          return {\r\n            courseId,\r\n            // Default to 'Fall' semester if no specific semester info is available\r\n            semesters: professor.semesters || ['Fall']\r\n          };\r\n        });\r\n        \r\n        console.log('Setting course selections:', selections);\r\n        setCourseSelections(selections);\r\n      } else {\r\n        console.log('No course IDs found, setting empty selections');\r\n        setCourseSelections([]);\r\n      }\r\n    } else {\r\n      // For new professors, reset the form\r\n      setFormData({\r\n        professor_id: '',\r\n        department_id: departments.length > 0 ? departments[0].department_id : '',\r\n        first_name: '',\r\n        last_name: '',\r\n        email: '',\r\n        password_hash: '',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      });\r\n      setCourseSelections([]);\r\n    }\r\n    \r\n    setErrors({});\r\n  }, [professor, departments]);\r\n\r\n  const handleChange = (\r\n    e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }> | SelectChangeEvent\r\n  ) => {\r\n    const { name, value } = e.target;\r\n    if (name) {\r\n      setFormData((prev: Professor) => ({\r\n        ...prev,\r\n        [name]: value\r\n      }));\r\n      \r\n      // Clear error for this field when user types\r\n      if (errors[name]) {\r\n        setErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors[name];\r\n          return newErrors;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Add a new course selection\r\n  const handleAddCourse = () => {\r\n    setCourseSelections([...courseSelections, { courseId: '', semesters: [] }]);\r\n  };\r\n\r\n  // Remove a course selection\r\n  const handleRemoveCourse = (index: number) => {\r\n    const updatedSelections = [...courseSelections];\r\n    updatedSelections.splice(index, 1);\r\n    setCourseSelections(updatedSelections);\r\n  };\r\n\r\n  // Update a specific course selection\r\n  const handleCourseChange = (index: number, courseId: string) => {\r\n    const updatedSelections = [...courseSelections];\r\n    updatedSelections[index] = {\r\n      ...updatedSelections[index],\r\n      courseId\r\n    };\r\n    setCourseSelections(updatedSelections);\r\n  };\r\n\r\n  // Handle semester selection for a specific course\r\n  const handleSemesterChange = (index: number, semester: string) => {\r\n    const updatedSelections = [...courseSelections];\r\n    const currentSemesters = [...updatedSelections[index].semesters];\r\n    \r\n    const semesterIndex = currentSemesters.indexOf(semester);\r\n    \r\n    if (semesterIndex > -1) {\r\n      // Remove semester if already selected\r\n      currentSemesters.splice(semesterIndex, 1);\r\n    } else {\r\n      // Add semester if not selected\r\n      currentSemesters.push(semester);\r\n    }\r\n    \r\n    updatedSelections[index] = {\r\n      ...updatedSelections[index],\r\n      semesters: currentSemesters\r\n    };\r\n    \r\n    setCourseSelections(updatedSelections);\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n    \r\n    if (!formData.first_name.trim()) {\r\n      newErrors.first_name = 'First name is required';\r\n    }\r\n    \r\n    if (!formData.last_name.trim()) {\r\n      newErrors.last_name = 'Last name is required';\r\n    }\r\n    \r\n    if (!formData.email.trim()) {\r\n      newErrors.email = 'Email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      newErrors.email = 'Invalid email format';\r\n    }\r\n    \r\n    if (!formData.department_id) {\r\n      newErrors.department_id = 'Department is required';\r\n    }\r\n    \r\n    // Generate a professor_id if creating a new professor\r\n    if (!professor && !formData.professor_id) {\r\n      // We can either generate an ID here or let the backend generate it\r\n      // For consistency with other forms, let's generate one\r\n      formData.professor_id = `PROF-${Math.random().toString(36).substring(2, 10).toUpperCase()}`;\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (validateForm()) {\r\n      // Extract course IDs and collect all semesters\r\n      const courseIds = courseSelections\r\n        .filter(selection => selection.courseId !== '')\r\n        .map(selection => selection.courseId);\r\n      \r\n      // Collect all unique semesters from all course selections\r\n      const allSemesters = courseSelections\r\n        .filter(selection => selection.courseId !== '')\r\n        .flatMap(selection => selection.semesters)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n      \r\n      console.log('Course selections at submission:', courseSelections);\r\n      console.log('Course IDs being submitted:', courseIds);\r\n      console.log('Semesters being submitted:', allSemesters);\r\n      \r\n      const professorData: any = {\r\n        ...formData,\r\n        course_ids: courseIds,\r\n        semesters: allSemesters,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      \r\n      // No password handling here\r\n      \r\n      console.log('Submitting professor data:', professorData);\r\n      onSave(professorData as Professor);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\r\n      <DialogTitle>\r\n        {professor ? 'Edit Professor' : 'Add New Professor'}\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <Grid container spacing={2} sx={{ mt: 1 }}>\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              name=\"first_name\"\r\n              label=\"First Name\"\r\n              fullWidth\r\n              value={formData.first_name}\r\n              onChange={handleChange}\r\n              error={!!errors.first_name}\r\n              helperText={errors.first_name}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              name=\"last_name\"\r\n              label=\"Last Name\"\r\n              fullWidth\r\n              value={formData.last_name}\r\n              onChange={handleChange}\r\n              error={!!errors.last_name}\r\n              helperText={errors.last_name}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              type=\"email\"\r\n              fullWidth\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n              error={!!errors.email}\r\n              helperText={errors.email}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth error={!!errors.department_id}>\r\n              <InputLabel id=\"department-label\">Department</InputLabel>\r\n              <Select\r\n                labelId=\"department-label\"\r\n                name=\"department_id\"\r\n                value={formData.department_id}\r\n                onChange={handleChange}\r\n                label=\"Department\"\r\n                required\r\n              >\r\n                {departments.map((dept) => (\r\n                  <MenuItem key={dept.department_id} value={dept.department_id}>\r\n                    {dept.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.department_id && (\r\n                <FormHelperText>{errors.department_id}</FormHelperText>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          {/* Custom Professor ID field for new professors */}\r\n          {!professor && (\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"professor_id\"\r\n                label=\"Professor ID (optional)\"\r\n                fullWidth\r\n                value={formData.professor_id}\r\n                onChange={handleChange}\r\n                helperText=\"Leave blank for auto-generated ID\"\r\n              />\r\n            </Grid>\r\n          )}\r\n          \r\n          {/* Password field removed */}\r\n          \r\n          {/* Multiple Course Selection Section with Per-Course Semester Selection */}\r\n          <Grid item xs={12}>\r\n            <Box sx={{ mt: 2 }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                <Typography variant=\"subtitle2\">Assigned Courses</Typography>\r\n                <Button\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleAddCourse}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  disabled={!formData.department_id}\r\n                >\r\n                  Add Course\r\n                </Button>\r\n              </Box>\r\n              \r\n              {courseSelections.length === 0 ? (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  No courses assigned. Click \"Add Course\" to assign courses.\r\n                </Typography>\r\n              ) : (\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                  {courseSelections.map((selection, index) => (\r\n                    <Paper key={index} variant=\"outlined\" sx={{ p: 2 }}>\r\n                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                          <FormControl fullWidth>\r\n                            <InputLabel id={`course-select-label-${index}`}>Course</InputLabel>\r\n                            <Select\r\n                              labelId={`course-select-label-${index}`}\r\n                              value={selection.courseId}\r\n                              onChange={(e) => handleCourseChange(index, e.target.value)}\r\n                              label=\"Course\"\r\n                              disabled={!formData.department_id}\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>Select a course</em>\r\n                              </MenuItem>\r\n                              {filteredCourses.map((course) => (\r\n                                <MenuItem\r\n                                  key={course.course_id}\r\n                                  value={course.course_id}\r\n                                  disabled={courseSelections.some(\r\n                                    s => s.courseId === course.course_id && courseSelections.indexOf(s) !== index\r\n                                  )}\r\n                                >\r\n                                  <ListItemText\r\n                                    primary={course.course_name}\r\n                                    secondary={`${course.course_id} (${course.is_core ? 'Core' : 'Elective'})`}\r\n                                  />\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <IconButton\r\n                            color=\"error\"\r\n                            onClick={() => handleRemoveCourse(index)}\r\n                            size=\"small\"\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Box>\r\n                        \r\n                        {/* Semester selection for this course */}\r\n                        {selection.courseId && (\r\n                          <Box sx={{ mt: 1 }}>\r\n                            <Typography variant=\"caption\" sx={{ mb: 1, display: 'block' }}>\r\n                              Semester Availability:\r\n                            </Typography>\r\n                            <Box sx={{ display: 'flex', gap: 2 }}>\r\n                              <FormControlLabel\r\n                                control={\r\n                                  <Checkbox\r\n                                    checked={selection.semesters.includes('Fall')}\r\n                                    onChange={() => handleSemesterChange(index, 'Fall')}\r\n                                    size=\"small\"\r\n                                  />\r\n                                }\r\n                                label=\"Fall\"\r\n                              />\r\n                              <FormControlLabel\r\n                                control={\r\n                                  <Checkbox\r\n                                    checked={selection.semesters.includes('Spring')}\r\n                                    onChange={() => handleSemesterChange(index, 'Spring')}\r\n                                    size=\"small\"\r\n                                  />\r\n                                }\r\n                                label=\"Spring\"\r\n                              />\r\n                            </Box>\r\n                          </Box>\r\n                        )}\r\n                      </Box>\r\n                    </Paper>\r\n                  ))}\r\n                </Box>\r\n              )}\r\n              \r\n              {filteredCourses.length === 0 && formData.department_id && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n                  No courses available for this department\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          </Grid>\r\n          \r\n          {professor && (\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"professor_id\"\r\n                label=\"Professor ID\"\r\n                fullWidth\r\n                value={formData.professor_id}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n                disabled\r\n              />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose}>Cancel</Button>\r\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ProfessorForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}