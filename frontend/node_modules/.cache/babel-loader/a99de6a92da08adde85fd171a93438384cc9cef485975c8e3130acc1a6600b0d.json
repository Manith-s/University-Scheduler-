{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Documents\\\\Master's Colleges\\\\UNIVERSITY OF DELAWARE\\\\COURSES\\\\Project\\\\university-scheduler\\\\frontend\\\\src\\\\components\\\\admin\\\\professors\\\\ProfessorAvailabilityTab.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, CircularProgress, FormControlLabel, Grid, Paper, Switch, Typography, Divider, Alert, Snackbar, IconButton, Collapse } from '@mui/material';\nimport { Save as SaveIcon, ExpandMore as ExpandMoreIcon, ExpandLess as ExpandLessIcon } from '@mui/icons-material';\nimport professorService from '../../../services/professorService';\nimport timeSlotService from '../../../services/timeSlotService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Days of the week for scheduling\nconst DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\nconst ProfessorAvailabilityTab = ({\n  professorId,\n  availabilities,\n  onAvailabilityChange\n}) => {\n  _s();\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [availabilityMap, setAvailabilityMap] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n\n  // Track expanded state for each day\n  const [expandedDays, setExpandedDays] = useState({\n    Monday: true,\n    Tuesday: true,\n    Wednesday: true,\n    Thursday: true,\n    Friday: true\n  });\n\n  // Track day availability (all timeslots for that day)\n  const [dayAvailability, setDayAvailability] = useState({\n    Monday: false,\n    Tuesday: false,\n    Wednesday: false,\n    Thursday: false,\n    Friday: false\n  });\n  useEffect(() => {\n    const fetchTimeSlots = async () => {\n      try {\n        setLoading(true);\n        const timeSlotsData = await timeSlotService.getAllTimeSlots();\n        setTimeSlots(timeSlotsData);\n      } catch (err) {\n        setError('Failed to fetch time slots');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTimeSlots();\n  }, []);\n  useEffect(() => {\n    // Convert availabilities array to a map for easier access\n    const map = {};\n    console.log('Processing availabilities:', availabilities);\n\n    // Make sure we handle both structured and flat availability data\n    const processedAvailabilities = Array.isArray(availabilities) ? availabilities : [];\n    processedAvailabilities.forEach(availability => {\n      const key = `${availability.day_of_week}-${availability.timeslot_id}`;\n      map[key] = availability.is_available;\n      console.log(`Setting availability for ${key} to ${availability.is_available}`);\n    });\n    setAvailabilityMap(map);\n\n    // Calculate day availability based on timeslot availabilities\n    //const newDayAvailability = {}; // Create a new object instead of using spread\n    const newDayAvailability = {};\n    for (const day of DAYS_OF_WEEK) {\n      // Get time slots for this day\n      const dayTimeSlots = timeSlots.filter(ts => ts.day_of_week === day);\n      if (dayTimeSlots.length === 0) {\n        console.log(`No time slots found for ${day}`);\n        newDayAvailability[day] = false;\n        continue;\n      }\n\n      // Check if all time slots for this day are available\n      const daySlotsAvailable = dayTimeSlots.every(timeSlot => {\n        const key = `${day}-${timeSlot.timeslot_id}`;\n        return map[key] || false;\n      });\n      newDayAvailability[day] = daySlotsAvailable;\n      console.log(`Day availability for ${day} set to ${daySlotsAvailable}`);\n    }\n    setDayAvailability(newDayAvailability);\n  }, [availabilities, timeSlots]); // Remove dayAvailability from dependencies\n\n  const handleAvailabilityChange = (day, timeSlotId, isAvailable) => {\n    const key = `${day}-${timeSlotId}`;\n    setAvailabilityMap(prev => ({\n      ...prev,\n      [key]: isAvailable\n    }));\n\n    // Update day availability if needed\n    updateDayAvailability(day);\n  };\n  const toggleDayExpand = day => {\n    setExpandedDays(prev => ({\n      ...prev,\n      [day]: !prev[day]\n    }));\n  };\n  const handleDayAvailabilityChange = (day, isAvailable) => {\n    // Update all time slots for this day\n    const newAvailabilityMap = {\n      ...availabilityMap\n    };\n    timeSlots.filter(ts => ts.day_of_week === day || !ts.day_of_week).forEach(timeSlot => {\n      const key = `${day}-${timeSlot.timeslot_id}`;\n      newAvailabilityMap[key] = isAvailable;\n    });\n    setAvailabilityMap(newAvailabilityMap);\n\n    // Update day availability state\n    setDayAvailability(prev => ({\n      ...prev,\n      [day]: isAvailable\n    }));\n  };\n  const updateDayAvailability = day => {\n    const relevantTimeSlots = timeSlots.filter(ts => ts.day_of_week === day || !ts.day_of_week);\n    if (relevantTimeSlots.length === 0) return;\n    const allAvailable = relevantTimeSlots.every(timeSlot => {\n      const key = `${day}-${timeSlot.timeslot_id}`;\n      return availabilityMap[key] || false;\n    });\n    setDayAvailability(prev => ({\n      ...prev,\n      [day]: allAvailable\n    }));\n  };\n  const saveAvailability = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n\n      // Convert the map back to an array of availabilities\n      const availabilityUpdates = [];\n      console.log('Saving availability for professor ID:', professorId);\n      for (const day of DAYS_OF_WEEK) {\n        // Get time slots for this day\n        const dayTimeSlots = timeSlots.filter(ts => ts.day_of_week === day);\n        if (dayTimeSlots.length === 0) {\n          console.log(`No time slots found for ${day}`);\n          continue;\n        }\n\n        // Process each time slot for this day\n        for (const timeSlot of dayTimeSlots) {\n          const key = `${day}-${timeSlot.timeslot_id}`;\n          const isAvailable = availabilityMap[key] !== undefined ? availabilityMap[key] : false;\n          availabilityUpdates.push({\n            availability_id: '',\n            // will be assigned by the backend\n            professor_id: professorId,\n            timeslot_id: timeSlot.timeslot_id,\n            day_of_week: day,\n            is_available: isAvailable,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          });\n        }\n      }\n      console.log(`Saving ${availabilityUpdates.length} availability records`);\n\n      // Use professorService to save the availability\n      const result = await professorService.setProfessorAvailability(professorId, availabilityUpdates);\n      console.log('Save result:', result);\n\n      // Fetch the updated availabilities\n      const updatedAvailabilities = await professorService.getProfessorAvailability(professorId);\n\n      // Update the parent component\n      onAvailabilityChange(updatedAvailabilities);\n\n      // Show success message\n      setSuccessMessage('Availability successfully updated');\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (err) {\n      setError(`Failed to save availability: ${err.message || 'Unknown error'}`);\n      console.error('Error saving availability:', err);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Format time in a readable format using 24-hour clock (e.g., \"09:10 - 10:05\")\n  const formatTimeSlot = timeSlot => {\n    const formatTime = time => {\n      // Just take the first 5 characters (HH:MM) if needed\n      return time.substring(0, 5);\n    };\n    return `${formatTime(timeSlot.start_time)} - ${formatTime(timeSlot.end_time)}`;\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"200px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Professor Availability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: \"Set when the professor is available to teach across the week.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 28\n              }, this),\n              onClick: saveAvailability,\n              disabled: saving,\n              children: saving ? 'Saving...' : 'Save Availability'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            my: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: DAYS_OF_WEEK.map(day => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              sx: {\n                p: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'center',\n                  mb: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle1\",\n                    fontWeight: \"bold\",\n                    children: day\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    control: /*#__PURE__*/_jsxDEV(Switch, {\n                      checked: dayAvailability[day] || false,\n                      onChange: e => handleDayAvailabilityChange(day, e.target.checked),\n                      color: \"primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 304,\n                      columnNumber: 27\n                    }, this),\n                    label: dayAvailability[day] ? \"Available all day\" : \"Not available\",\n                    sx: {\n                      ml: 2\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => toggleDayExpand(day),\n                  children: expandedDays[day] ? /*#__PURE__*/_jsxDEV(ExpandLessIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 44\n                  }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 65\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {\n                sx: {\n                  mb: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n                in: expandedDays[day],\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: timeSlots.filter(ts => ts.day_of_week === day || !ts.day_of_week).map(timeSlot => {\n                    const key = `${day}-${timeSlot.timeslot_id}`;\n                    const isAvailable = availabilityMap[key] || false;\n                    return /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 12,\n                      sm: 6,\n                      md: 4,\n                      children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                        control: /*#__PURE__*/_jsxDEV(Switch, {\n                          checked: isAvailable,\n                          onChange: e => handleAvailabilityChange(day, timeSlot.timeslot_id, e.target.checked),\n                          color: \"primary\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 332,\n                          columnNumber: 35\n                        }, this),\n                        label: /*#__PURE__*/_jsxDEV(Box, {\n                          children: [/*#__PURE__*/_jsxDEV(Typography, {\n                            variant: \"body2\",\n                            fontWeight: \"medium\",\n                            children: timeSlot.name\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 340,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            variant: \"body2\",\n                            color: \"text.secondary\",\n                            children: formatTimeSlot(timeSlot)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 343,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            variant: \"caption\",\n                            color: \"text.secondary\",\n                            children: [\"(\", timeSlot.duration_minutes, \" min)\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 346,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 339,\n                          columnNumber: 35\n                        }, this),\n                        sx: {\n                          display: 'flex',\n                          border: '1px solid',\n                          borderColor: 'divider',\n                          borderRadius: 1,\n                          p: 1,\n                          width: '100%'\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 330,\n                        columnNumber: 31\n                      }, this)\n                    }, timeSlot.timeslot_id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 329,\n                      columnNumber: 29\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 17\n            }, this)\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!successMessage,\n      autoHideDuration: 3000,\n      onClose: () => setSuccessMessage(null),\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setSuccessMessage(null),\n        severity: \"success\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfessorAvailabilityTab, \"C8yUFnMyxllnle0D28fu2Y4b60w=\");\n_c = ProfessorAvailabilityTab;\nexport default ProfessorAvailabilityTab;\nvar _c;\n$RefreshReg$(_c, \"ProfessorAvailabilityTab\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Card","CardContent","CircularProgress","FormControlLabel","Grid","Paper","Switch","Typography","Divider","Alert","Snackbar","IconButton","Collapse","Save","SaveIcon","ExpandMore","ExpandMoreIcon","ExpandLess","ExpandLessIcon","professorService","timeSlotService","jsxDEV","_jsxDEV","DAYS_OF_WEEK","ProfessorAvailabilityTab","professorId","availabilities","onAvailabilityChange","_s","timeSlots","setTimeSlots","availabilityMap","setAvailabilityMap","loading","setLoading","saving","setSaving","error","setError","successMessage","setSuccessMessage","expandedDays","setExpandedDays","Monday","Tuesday","Wednesday","Thursday","Friday","dayAvailability","setDayAvailability","fetchTimeSlots","timeSlotsData","getAllTimeSlots","err","console","map","log","processedAvailabilities","Array","isArray","forEach","availability","key","day_of_week","timeslot_id","is_available","newDayAvailability","day","dayTimeSlots","filter","ts","length","daySlotsAvailable","every","timeSlot","handleAvailabilityChange","timeSlotId","isAvailable","prev","updateDayAvailability","toggleDayExpand","handleDayAvailabilityChange","newAvailabilityMap","relevantTimeSlots","allAvailable","saveAvailability","availabilityUpdates","undefined","push","availability_id","professor_id","created_at","Date","toISOString","updated_at","result","setProfessorAvailability","updatedAvailabilities","getProfessorAvailability","setTimeout","message","formatTimeSlot","formatTime","time","substring","start_time","end_time","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","mb","container","item","variant","gutterBottom","color","startIcon","onClick","disabled","my","severity","spacing","xs","p","fontWeight","control","checked","onChange","e","target","label","ml","in","sm","md","name","duration_minutes","border","borderColor","borderRadius","width","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","_c","$RefreshReg$"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/components/admin/professors/ProfessorAvailabilityTab.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CircularProgress,\r\n  FormControlLabel,\r\n  Grid,\r\n  Paper,\r\n  Switch,\r\n  Typography,\r\n  Divider,\r\n  Alert,\r\n  Snackbar,\r\n  IconButton,\r\n  Collapse\r\n} from '@mui/material';\r\nimport { \r\n  Save as SaveIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  ExpandLess as ExpandLessIcon \r\n} from '@mui/icons-material';\r\nimport professorService, { ProfessorAvailability } from '../../../services/professorService';\r\nimport timeSlotService, { TimeSlot } from '../../../services/timeSlotService';\r\n\r\ninterface ProfessorAvailabilityTabProps {\r\n  professorId: string;\r\n  availabilities: ProfessorAvailability[];\r\n  onAvailabilityChange: (availabilities: ProfessorAvailability[]) => void;\r\n}\r\n\r\n// Days of the week for scheduling\r\nconst DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\r\n\r\nconst ProfessorAvailabilityTab: React.FC<ProfessorAvailabilityTabProps> = ({\r\n  professorId,\r\n  availabilities,\r\n  onAvailabilityChange\r\n}) => {\r\n  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);\r\n  const [availabilityMap, setAvailabilityMap] = useState<Record<string, boolean>>({});\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [saving, setSaving] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n  \r\n  // Track expanded state for each day\r\n  const [expandedDays, setExpandedDays] = useState<Record<string, boolean>>({\r\n    Monday: true,\r\n    Tuesday: true,\r\n    Wednesday: true,\r\n    Thursday: true,\r\n    Friday: true\r\n  });\r\n  \r\n  // Track day availability (all timeslots for that day)\r\n  const [dayAvailability, setDayAvailability] = useState<Record<string, boolean>>({\r\n    Monday: false,\r\n    Tuesday: false,\r\n    Wednesday: false,\r\n    Thursday: false,\r\n    Friday: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchTimeSlots = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const timeSlotsData = await timeSlotService.getAllTimeSlots();\r\n        setTimeSlots(timeSlotsData);\r\n      } catch (err) {\r\n        setError('Failed to fetch time slots');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTimeSlots();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Convert availabilities array to a map for easier access\r\n    const map: Record<string, boolean> = {};\r\n    \r\n    console.log('Processing availabilities:', availabilities);\r\n    \r\n    // Make sure we handle both structured and flat availability data\r\n    const processedAvailabilities = Array.isArray(availabilities) ? availabilities : [];\r\n    \r\n    processedAvailabilities.forEach(availability => {\r\n      const key = `${availability.day_of_week}-${availability.timeslot_id}`;\r\n      map[key] = availability.is_available;\r\n      console.log(`Setting availability for ${key} to ${availability.is_available}`);\r\n    });\r\n    \r\n    setAvailabilityMap(map);\r\n    \r\n    // Calculate day availability based on timeslot availabilities\r\n    //const newDayAvailability = {}; // Create a new object instead of using spread\r\n    const newDayAvailability: Record<string, boolean> = {}; \r\n    \r\n    for (const day of DAYS_OF_WEEK) {\r\n      // Get time slots for this day\r\n      const dayTimeSlots = timeSlots.filter(ts => ts.day_of_week === day);\r\n      \r\n      if (dayTimeSlots.length === 0) {\r\n        console.log(`No time slots found for ${day}`);\r\n        newDayAvailability[day] = false;\r\n        continue;\r\n      }\r\n      \r\n      // Check if all time slots for this day are available\r\n      const daySlotsAvailable = dayTimeSlots.every(timeSlot => {\r\n        const key = `${day}-${timeSlot.timeslot_id}`;\r\n        return map[key] || false;\r\n      });\r\n      \r\n      newDayAvailability[day] = daySlotsAvailable;\r\n      console.log(`Day availability for ${day} set to ${daySlotsAvailable}`);\r\n    }\r\n    \r\n    setDayAvailability(newDayAvailability);\r\n  }, [availabilities, timeSlots]); // Remove dayAvailability from dependencies\r\n\r\n  const handleAvailabilityChange = (day: string, timeSlotId: string, isAvailable: boolean) => {\r\n    const key = `${day}-${timeSlotId}`;\r\n    \r\n    setAvailabilityMap(prev => ({\r\n      ...prev,\r\n      [key]: isAvailable\r\n    }));\r\n    \r\n    // Update day availability if needed\r\n    updateDayAvailability(day);\r\n  };\r\n  \r\n  const toggleDayExpand = (day: string) => {\r\n    setExpandedDays(prev => ({\r\n      ...prev,\r\n      [day]: !prev[day]\r\n    }));\r\n  };\r\n  \r\n  const handleDayAvailabilityChange = (day: string, isAvailable: boolean) => {\r\n    // Update all time slots for this day\r\n    const newAvailabilityMap = { ...availabilityMap };\r\n    \r\n    timeSlots\r\n      .filter(ts => ts.day_of_week === day || !ts.day_of_week)\r\n      .forEach(timeSlot => {\r\n        const key = `${day}-${timeSlot.timeslot_id}`;\r\n        newAvailabilityMap[key] = isAvailable;\r\n      });\r\n    \r\n    setAvailabilityMap(newAvailabilityMap);\r\n    \r\n    // Update day availability state\r\n    setDayAvailability(prev => ({\r\n      ...prev,\r\n      [day]: isAvailable\r\n    }));\r\n  };\r\n  \r\n  const updateDayAvailability = (day: string) => {\r\n    const relevantTimeSlots = timeSlots.filter(ts => ts.day_of_week === day || !ts.day_of_week);\r\n    \r\n    if (relevantTimeSlots.length === 0) return;\r\n    \r\n    const allAvailable = relevantTimeSlots.every(timeSlot => {\r\n      const key = `${day}-${timeSlot.timeslot_id}`;\r\n      return availabilityMap[key] || false;\r\n    });\r\n    \r\n    setDayAvailability(prev => ({\r\n      ...prev,\r\n      [day]: allAvailable\r\n    }));\r\n  };\r\n\r\n  const saveAvailability = async () => {\r\n    try {\r\n      setSaving(true);\r\n      setError(null);\r\n      \r\n      // Convert the map back to an array of availabilities\r\n      const availabilityUpdates: ProfessorAvailability[] = [];\r\n      \r\n      console.log('Saving availability for professor ID:', professorId);\r\n      \r\n      for (const day of DAYS_OF_WEEK) {\r\n        // Get time slots for this day\r\n        const dayTimeSlots = timeSlots.filter(ts => ts.day_of_week === day);\r\n        \r\n        if (dayTimeSlots.length === 0) {\r\n          console.log(`No time slots found for ${day}`);\r\n          continue;\r\n        }\r\n        \r\n        // Process each time slot for this day\r\n        for (const timeSlot of dayTimeSlots) {\r\n          const key = `${day}-${timeSlot.timeslot_id}`;\r\n          const isAvailable = availabilityMap[key] !== undefined ? availabilityMap[key] : false;\r\n          \r\n          availabilityUpdates.push({\r\n            availability_id: '', // will be assigned by the backend\r\n            professor_id: professorId,\r\n            timeslot_id: timeSlot.timeslot_id,\r\n            day_of_week: day,\r\n            is_available: isAvailable,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          });\r\n        }\r\n      }\r\n      \r\n      console.log(`Saving ${availabilityUpdates.length} availability records`);\r\n      \r\n      // Use professorService to save the availability\r\n      const result = await professorService.setProfessorAvailability(professorId, availabilityUpdates);\r\n      console.log('Save result:', result);\r\n      \r\n      // Fetch the updated availabilities\r\n      const updatedAvailabilities = await professorService.getProfessorAvailability(professorId);\r\n      \r\n      // Update the parent component\r\n      onAvailabilityChange(updatedAvailabilities);\r\n      \r\n      // Show success message\r\n      setSuccessMessage('Availability successfully updated');\r\n      setTimeout(() => setSuccessMessage(null), 3000);\r\n      \r\n    } catch (err: any) {\r\n      setError(`Failed to save availability: ${err.message || 'Unknown error'}`);\r\n      console.error('Error saving availability:', err);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  // Format time in a readable format using 24-hour clock (e.g., \"09:10 - 10:05\")\r\n  const formatTimeSlot = (timeSlot: TimeSlot) => {\r\n    const formatTime = (time: string) => {\r\n      // Just take the first 5 characters (HH:MM) if needed\r\n      return time.substring(0, 5);\r\n    };\r\n    \r\n    return `${formatTime(timeSlot.start_time)} - ${formatTime(timeSlot.end_time)}`;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Grid item>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Professor Availability\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Set when the professor is available to teach across the week.\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<SaveIcon />}\r\n                onClick={saveAvailability}\r\n                disabled={saving}\r\n              >\r\n                {saving ? 'Saving...' : 'Save Availability'}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider sx={{ my: 2 }} />\r\n          \r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n          \r\n          <Grid container spacing={3}>\r\n            {DAYS_OF_WEEK.map((day) => (\r\n              <Grid item xs={12} key={day}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                        {day}\r\n                      </Typography>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={dayAvailability[day] || false}\r\n                            onChange={(e) => handleDayAvailabilityChange(day, e.target.checked)}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label={dayAvailability[day] ? \"Available all day\" : \"Not available\"}\r\n                        sx={{ ml: 2 }}\r\n                      />\r\n                    </Box>\r\n                    <IconButton onClick={() => toggleDayExpand(day)}>\r\n                      {expandedDays[day] ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                    </IconButton>\r\n                  </Box>\r\n                  <Divider sx={{ mb: 2 }} />\r\n                  \r\n                  <Collapse in={expandedDays[day]}>\r\n                    <Grid container spacing={2}>\r\n                      {timeSlots\r\n                        .filter(ts => ts.day_of_week === day || !ts.day_of_week)\r\n                        .map((timeSlot) => {\r\n                          const key = `${day}-${timeSlot.timeslot_id}`;\r\n                          const isAvailable = availabilityMap[key] || false;\r\n                          \r\n                          return (\r\n                            <Grid item xs={12} sm={6} md={4} key={timeSlot.timeslot_id}>\r\n                              <FormControlLabel\r\n                                control={\r\n                                  <Switch\r\n                                    checked={isAvailable}\r\n                                    onChange={(e) => handleAvailabilityChange(day, timeSlot.timeslot_id, e.target.checked)}\r\n                                    color=\"primary\"\r\n                                  />\r\n                                }\r\n                                label={\r\n                                  <Box>\r\n                                    <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                                      {timeSlot.name}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                      {formatTimeSlot(timeSlot)}\r\n                                    </Typography>\r\n                                    <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                      ({timeSlot.duration_minutes} min)\r\n                                    </Typography>\r\n                                  </Box>\r\n                                }\r\n                                sx={{ \r\n                                  display: 'flex',\r\n                                  border: '1px solid',\r\n                                  borderColor: 'divider',\r\n                                  borderRadius: 1,\r\n                                  p: 1,\r\n                                  width: '100%'\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n                          );\r\n                        })}\r\n                    </Grid>\r\n                  </Collapse>\r\n                </Paper>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n      \r\n      <Snackbar\r\n        open={!!successMessage}\r\n        autoHideDuration={3000}\r\n        onClose={() => setSuccessMessage(null)}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert onClose={() => setSuccessMessage(null)} severity=\"success\">\r\n          {successMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProfessorAvailabilityTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}