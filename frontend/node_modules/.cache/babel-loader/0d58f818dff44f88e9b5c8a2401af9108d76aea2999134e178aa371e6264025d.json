{"ast":null,"code":"var _jsxFileName = \"/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/schedule/ScheduleTab.tsx\",\n  _s = $RefreshSig$();\n// src/components/admin/schedule/ScheduleTab.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { Box } from '@mui/material';\nimport ScheduleGenerator from './ScheduleGenerator';\nimport ScheduleList from './ScheduleList';\nimport ConflictManagement from './ConflictManagement';\nimport programService from '../../../services/programService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScheduleTab = () => {\n  _s();\n  const [selectedScheduleId, setSelectedScheduleId] = useState(undefined);\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const [programs, setPrograms] = useState([]);\n  const [selectedProgram, setSelectedProgram] = useState('');\n  const [loadingPrograms, setLoadingPrograms] = useState(true);\n  console.log(\"ScheduleTab rendering with selectedScheduleId:\", selectedScheduleId);\n\n  // Fetch all programs on component mount\n  useEffect(() => {\n    const fetchPrograms = async () => {\n      try {\n        setLoadingPrograms(true);\n\n        // Get all programs instead of filtering by department\n        const data = await programService.getAllPrograms();\n        setPrograms(data);\n      } catch (error) {\n        console.error('Error fetching programs:', error);\n      } finally {\n        setLoadingPrograms(false);\n      }\n    };\n    fetchPrograms();\n  }, []);\n  const handleProgramChange = event => {\n    setSelectedProgram(event.target.value);\n  };\n  const handleScheduleGenerated = scheduleId => {\n    console.log(\"Schedule generated with ID:\", scheduleId);\n    // Update selectedScheduleId when a new schedule is generated\n    setSelectedScheduleId(scheduleId);\n    // Force refresh the schedule list\n    setRefreshCounter(prev => prev + 1);\n  };\n  const handleScheduleSelected = scheduleId => {\n    console.log(\"Schedule selected with ID:\", scheduleId);\n    // Update the selected schedule when user selects from the list\n    setSelectedScheduleId(scheduleId);\n  };\n  const handleConflictResolved = () => {\n    console.log(\"Conflict resolved, refreshing data\");\n    // Refresh schedule list when a conflict is resolved\n    // (we keep the same selectedScheduleId)\n    setRefreshCounter(prev => prev + 1);\n  };\n  const handleScheduleDeleted = () => {\n    console.log(\"Schedule deleted, clearing selection\");\n    // When a schedule is deleted, clear the selected schedule ID\n    setSelectedScheduleId(undefined);\n    // Force refresh the schedule list\n    setRefreshCounter(prev => prev + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(ScheduleGenerator, {\n      onScheduleGenerated: handleScheduleGenerated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScheduleList, {\n      selectedScheduleId: selectedScheduleId,\n      forceRefresh: refreshCounter,\n      onScheduleDeleted: handleScheduleDeleted,\n      onScheduleSelected: handleScheduleSelected,\n      programs: programs,\n      selectedProgram: selectedProgram,\n      loadingPrograms: loadingPrograms,\n      onProgramChange: handleProgramChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConflictManagement, {\n      scheduleId: selectedScheduleId,\n      onConflictResolved: handleConflictResolved\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleTab, \"QZecBknb8K6Q8dcxo7HGtyQAe1Q=\");\n_c = ScheduleTab;\nexport default ScheduleTab;\nvar _c;\n$RefreshReg$(_c, \"ScheduleTab\");","map":{"version":3,"names":["React","useState","useEffect","Box","ScheduleGenerator","ScheduleList","ConflictManagement","programService","jsxDEV","_jsxDEV","ScheduleTab","_s","selectedScheduleId","setSelectedScheduleId","undefined","refreshCounter","setRefreshCounter","programs","setPrograms","selectedProgram","setSelectedProgram","loadingPrograms","setLoadingPrograms","console","log","fetchPrograms","data","getAllPrograms","error","handleProgramChange","event","target","value","handleScheduleGenerated","scheduleId","prev","handleScheduleSelected","handleConflictResolved","handleScheduleDeleted","children","onScheduleGenerated","fileName","_jsxFileName","lineNumber","columnNumber","forceRefresh","onScheduleDeleted","onScheduleSelected","onProgramChange","onConflictResolved","_c","$RefreshReg$"],"sources":["/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/schedule/ScheduleTab.tsx"],"sourcesContent":["// src/components/admin/schedule/ScheduleTab.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, SelectChangeEvent } from '@mui/material';\nimport ScheduleGenerator from './ScheduleGenerator';\nimport ScheduleList from './ScheduleList';\nimport ConflictManagement from './ConflictManagement';\nimport programService from '../../../services/programService';\n\ninterface Program {\n  program_id: string;\n  name: string;\n}\n\nconst ScheduleTab: React.FC = () => {\n  const [selectedScheduleId, setSelectedScheduleId] = useState<string | undefined>(undefined);\n  const [refreshCounter, setRefreshCounter] = useState<number>(0);\n  const [programs, setPrograms] = useState<Program[]>([]);\n  const [selectedProgram, setSelectedProgram] = useState<string>('');\n  const [loadingPrograms, setLoadingPrograms] = useState<boolean>(true);\n\n  console.log(\"ScheduleTab rendering with selectedScheduleId:\", selectedScheduleId);\n\n  // Fetch all programs on component mount\n  useEffect(() => {\n    const fetchPrograms = async () => {\n      try {\n        setLoadingPrograms(true);\n        \n        // Get all programs instead of filtering by department\n        const data = await programService.getAllPrograms();\n        setPrograms(data);\n      } catch (error) {\n        console.error('Error fetching programs:', error);\n      } finally {\n        setLoadingPrograms(false);\n      }\n    };\n\n    fetchPrograms();\n  }, []);\n\n  const handleProgramChange = (event: SelectChangeEvent) => {\n    setSelectedProgram(event.target.value);\n  };\n\n  const handleScheduleGenerated = (scheduleId: string) => {\n    console.log(\"Schedule generated with ID:\", scheduleId);\n    // Update selectedScheduleId when a new schedule is generated\n    setSelectedScheduleId(scheduleId);\n    // Force refresh the schedule list\n    setRefreshCounter(prev => prev + 1);\n  };\n\n  const handleScheduleSelected = (scheduleId: string) => {\n    console.log(\"Schedule selected with ID:\", scheduleId);\n    // Update the selected schedule when user selects from the list\n    setSelectedScheduleId(scheduleId);\n  };\n\n  const handleConflictResolved = () => {\n    console.log(\"Conflict resolved, refreshing data\");\n    // Refresh schedule list when a conflict is resolved\n    // (we keep the same selectedScheduleId)\n    setRefreshCounter(prev => prev + 1);\n  };\n\n  const handleScheduleDeleted = () => {\n    console.log(\"Schedule deleted, clearing selection\");\n    // When a schedule is deleted, clear the selected schedule ID\n    setSelectedScheduleId(undefined);\n    // Force refresh the schedule list\n    setRefreshCounter(prev => prev + 1);\n  };\n\n  return (\n    <Box>\n      <ScheduleGenerator onScheduleGenerated={handleScheduleGenerated} />\n      <ScheduleList\n        selectedScheduleId={selectedScheduleId}\n        forceRefresh={refreshCounter}\n        onScheduleDeleted={handleScheduleDeleted}\n        onScheduleSelected={handleScheduleSelected}\n        programs={programs}\n        selectedProgram={selectedProgram}\n        loadingPrograms={loadingPrograms}\n        onProgramChange={handleProgramChange}\n      />\n      <ConflictManagement\n        scheduleId={selectedScheduleId}\n        onConflictResolved={handleConflictResolved}\n      />\n    </Box>\n  );\n};\n\nexport default ScheduleTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}