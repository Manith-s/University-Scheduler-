{"ast":null,"code":"// src/services/scheduleService.ts\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define the base API URL\n//const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n// Types\n\n// Get active schedule for a semester\nexport const getActiveSchedule = async semesterId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}/active`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch active schedule');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getActiveSchedule for semester ${semesterId}:`, error);\n\n    // Return mock data for development - remove in production\n    return {\n      schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\n      semester_id: semesterId,\n      semester_name: \"Spring 2025\",\n      name: \"Active Schedule\",\n      is_final: true,\n      courses: [{\n        scheduled_course_id: `SC-${uuidv4().substring(0, 8)}`,\n        schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\n        course_id: \"COURSE-001\",\n        course_name: \"Introduction to Programming\",\n        professor_id: \"PROF-001\",\n        professor_name: \"John Smith\",\n        timeslot_id: \"TS1-MON\",\n        day_of_week: \"Monday\",\n        time_slot_id: \"TS1-MON\",\n        room: \"MEM 201\",\n        is_core: true,\n        is_override: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }, {\n        scheduled_course_id: `SC-${uuidv4().substring(0, 8)}`,\n        schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\n        course_id: \"COURSE-002\",\n        course_name: \"Database Systems\",\n        professor_id: \"PROF-002\",\n        professor_name: \"Jane Doe\",\n        timeslot_id: \"TS2-TUE\",\n        day_of_week: \"Tuesday\",\n        time_slot_id: \"TS2-TUE\",\n        room: \"PRN 105\",\n        is_core: false,\n        is_override: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }],\n      conflicts: [],\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n  }\n};\n\n// Get all schedules for a semester\nexport const getSchedulesBySemester = async semesterId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedules by semester');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getSchedulesBySemester for semester ${semesterId}:`, error);\n    throw error;\n  }\n};\n\n// Get schedule by ID with courses\nexport const getScheduleById = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedule');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getScheduleById for ID ${id}:`, error);\n    throw error;\n  }\n};\nconst scheduleService = {\n  getActiveSchedule,\n  getSchedulesBySemester,\n  getScheduleById\n};\nexport default scheduleService;","map":{"version":3,"names":["v4","uuidv4","API_URL","process","env","REACT_APP_API_URL","getActiveSchedule","semesterId","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","error","console","schedule_id","substring","semester_id","semester_name","name","is_final","courses","scheduled_course_id","course_id","course_name","professor_id","professor_name","timeslot_id","day_of_week","time_slot_id","room","is_core","is_override","created_at","Date","toISOString","updated_at","conflicts","getSchedulesBySemester","getScheduleById","id","scheduleService"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/scheduleService.ts"],"sourcesContent":["// src/services/scheduleService.ts\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Define the base API URL\r\n//const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n// Types\r\nexport interface ScheduledCourse {\r\n  scheduled_course_id: string;\r\n  schedule_id: string;\r\n  course_id: string;\r\n  course_name: string;\r\n  professor_id: string;\r\n  professor_name: string;\r\n  timeslot_id: string;\r\n  day_of_week: string;\r\n  time_slot_id: string;\r\n  room?: string;\r\n  is_core: boolean;\r\n  is_override: boolean;\r\n  override_reason?: string;\r\n  conflicts?: any[];\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Schedule {\r\n  schedule_id: string;\r\n  semester_id: string;\r\n  semester_name: string;\r\n  name: string;\r\n  is_final: boolean;\r\n  courses: ScheduledCourse[];\r\n  conflicts: any[];\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n// Get active schedule for a semester\r\nexport const getActiveSchedule = async (semesterId: string): Promise<Schedule> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}/active`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch active schedule');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getActiveSchedule for semester ${semesterId}:`, error);\r\n    \r\n    // Return mock data for development - remove in production\r\n    return {\r\n      schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\r\n      semester_id: semesterId,\r\n      semester_name: \"Spring 2025\",\r\n      name: \"Active Schedule\",\r\n      is_final: true,\r\n      courses: [\r\n        {\r\n          scheduled_course_id: `SC-${uuidv4().substring(0, 8)}`,\r\n          schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\r\n          course_id: \"COURSE-001\",\r\n          course_name: \"Introduction to Programming\",\r\n          professor_id: \"PROF-001\",\r\n          professor_name: \"John Smith\",\r\n          timeslot_id: \"TS1-MON\",\r\n          day_of_week: \"Monday\",\r\n          time_slot_id: \"TS1-MON\",\r\n          room: \"MEM 201\",\r\n          is_core: true,\r\n          is_override: false,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        },\r\n        {\r\n          scheduled_course_id: `SC-${uuidv4().substring(0, 8)}`,\r\n          schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\r\n          course_id: \"COURSE-002\",\r\n          course_name: \"Database Systems\",\r\n          professor_id: \"PROF-002\",\r\n          professor_name: \"Jane Doe\",\r\n          timeslot_id: \"TS2-TUE\",\r\n          day_of_week: \"Tuesday\",\r\n          time_slot_id: \"TS2-TUE\",\r\n          room: \"PRN 105\",\r\n          is_core: false,\r\n          is_override: false,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        }\r\n      ],\r\n      conflicts: [],\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n  }\r\n};\r\n\r\n// Get all schedules for a semester\r\nexport const getSchedulesBySemester = async (semesterId: string): Promise<Schedule[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedules by semester');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getSchedulesBySemester for semester ${semesterId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get schedule by ID with courses\r\nexport const getScheduleById = async (id: string): Promise<Schedule> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/${id}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedule');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getScheduleById for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst scheduleService = {\r\n  getActiveSchedule,\r\n  getSchedulesBySemester,\r\n  getScheduleById\r\n};\r\n\r\nexport default scheduleService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}