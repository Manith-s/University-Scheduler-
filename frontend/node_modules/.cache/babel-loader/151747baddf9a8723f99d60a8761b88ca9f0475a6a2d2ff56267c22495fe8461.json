{"ast":null,"code":"// src/services/programService.ts\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define the base API URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Types\n\n// Fetch all programs\nexport const getAllPrograms = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/programs`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch programs');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in getAllPrograms:', error);\n    return [];\n  }\n};\n\n// Fetch programs by department\nexport const getProgramsByDepartment = async departmentId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/programs/department/${departmentId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch programs by department');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getProgramsByDepartment for departmentId ${departmentId}:`, error);\n    return [];\n  }\n};\n\n// Fetch a single program by ID\nexport const getProgramById = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/programs/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch program');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getProgramById for ID ${id}:`, error);\n    return null;\n  }\n};\n\n// Create a new program\nexport const createProgram = async program => {\n  try {\n    const token = localStorage.getItem('token');\n\n    // If no ID is provided, generate one\n    if (!program.program_id) {\n      program.program_id = `PROG-${uuidv4().substring(0, 8)}`;\n    }\n    const response = await fetch(`${API_URL}/programs`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(program)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create program');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in createProgram:', error);\n    throw error;\n  }\n};\n\n// Update an existing program\nexport const updateProgram = async (id, program) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/programs/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(program)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update program');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in updateProgram for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a program\nexport const deleteProgram = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/programs/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete program');\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      message: data.message || 'Program deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Error in deleteProgram for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple programs\nexport const deletePrograms = async ids => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/programs/batch-delete`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ids\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete programs');\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      message: data.message || 'Programs deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Error in deletePrograms:`, error);\n    throw error;\n  }\n};\nconst programService = {\n  getAllPrograms,\n  getProgramsByDepartment,\n  getProgramById,\n  createProgram,\n  updateProgram,\n  deleteProgram,\n  deletePrograms\n};\nexport default programService;","map":{"version":3,"names":["v4","uuidv4","API_URL","process","env","REACT_APP_API_URL","getAllPrograms","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","error","console","getProgramsByDepartment","departmentId","getProgramById","id","createProgram","program","program_id","substring","method","body","JSON","stringify","errorData","message","updateProgram","deleteProgram","success","deletePrograms","ids","programService"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/programService.ts"],"sourcesContent":["// src/services/programService.ts\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Define the base API URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Types\r\nexport interface Program {\r\n  program_id: string;\r\n  department_id: string;\r\n  name: string;\r\n  description?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport interface ProgramDetail extends Program {\r\n  department?: any;\r\n  courses?: any[];\r\n}\r\n\r\n// Fetch all programs\r\nexport const getAllPrograms = async (): Promise<Program[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/programs`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch programs');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in getAllPrograms:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Fetch programs by department\r\nexport const getProgramsByDepartment = async (departmentId: string): Promise<Program[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/programs/department/${departmentId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch programs by department');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getProgramsByDepartment for departmentId ${departmentId}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Fetch a single program by ID\r\nexport const getProgramById = async (id: string): Promise<ProgramDetail | null> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/programs/${id}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch program');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getProgramById for ID ${id}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Create a new program\r\nexport const createProgram = async (program: Partial<Program>): Promise<Program> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // If no ID is provided, generate one\r\n    if (!program.program_id) {\r\n      program.program_id = `PROG-${uuidv4().substring(0, 8)}`;\r\n    }\r\n    \r\n    const response = await fetch(`${API_URL}/programs`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(program)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to create program');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in createProgram:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing program\r\nexport const updateProgram = async (id: string, program: Partial<Program>): Promise<Program> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/programs/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(program)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update program');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in updateProgram for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a program\r\nexport const deleteProgram = async (id: string): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/programs/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete program');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return { success: true, message: data.message || 'Program deleted successfully' };\r\n  } catch (error) {\r\n    console.error(`Error in deleteProgram for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete multiple programs\r\nexport const deletePrograms = async (ids: string[]): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/programs/batch-delete`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ ids })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete programs');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return { success: true, message: data.message || 'Programs deleted successfully' };\r\n  } catch (error) {\r\n    console.error(`Error in deletePrograms:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst programService = {\r\n  getAllPrograms,\r\n  getProgramsByDepartment,\r\n  getProgramById,\r\n  createProgram,\r\n  updateProgram,\r\n  deleteProgram,\r\n  deletePrograms\r\n};\r\n\r\nexport default programService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}