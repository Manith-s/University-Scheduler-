{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Documents\\\\Master's Colleges\\\\UNIVERSITY OF DELAWARE\\\\COURSES\\\\Project\\\\university-scheduler\\\\frontend\\\\src\\\\components\\\\admin\\\\schedule\\\\ScheduleView.tsx\",\n  _s = $RefreshSig$();\n// src/components/admin/schedules/ScheduleView.tsx\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Box, Button, Container, Typography, Card, CardContent, FormControl, InputLabel, MenuItem, Select, Grid, Paper, CircularProgress, Alert, AlertTitle, Tabs, Tab, Tooltip, TextField } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport SearchIcon from '@mui/icons-material/Search';\nimport GetAppIcon from '@mui/icons-material/GetApp';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\n\n// Import services\nimport scheduleService from '../../../services/scheduleService';\nimport departmentService from '../../../services/departmentService';\nimport programService from '../../../services/programService';\nimport semesterService from '../../../services/semesterService';\nimport GenerateSchedule from './GenerateSchedule';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScheduleView = () => {\n  _s();\n  // State variables\n  const [scheduleData, setScheduleData] = useState(null);\n  const [availableSchedules, setAvailableSchedules] = useState([]);\n  const [scheduledCourses, setScheduledCourses] = useState([]);\n  const [filteredCourses, setFilteredCourses] = useState([]);\n  const [conflicts, setConflicts] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [programs, setPrograms] = useState([]);\n  const [semesters, setSemesters] = useState([]);\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedProgram, setSelectedProgram] = useState('all');\n  const [selectedSemester, setSelectedSemester] = useState('');\n  const [selectedScheduleId, setSelectedScheduleId] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [viewMode, setViewMode] = useState('week');\n  const [showGenerateForm, setShowGenerateForm] = useState(false);\n  const [currentDay, setCurrentDay] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showResolvedConflicts, setShowResolvedConflicts] = useState(false);\n\n  // Days and time slots for schedule display\n  const daysOfWeek = useMemo(() => ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'], []);\n  const timeSlots = [{\n    id: 1,\n    name: 'Time Slot 1',\n    start: '09:10',\n    end: '10:05'\n  }, {\n    id: 2,\n    name: 'Time Slot 2',\n    start: '10:20',\n    end: '11:15'\n  }, {\n    id: 3,\n    name: 'Time Slot 3',\n    start: '11:30',\n    end: '12:25'\n  }, {\n    id: 4,\n    name: 'Time Slot 4',\n    start: '12:45',\n    end: '14:05'\n  }, {\n    id: 5,\n    name: 'Time Slot 5',\n    start: '13:30',\n    end: '14:50'\n  }, {\n    id: 6,\n    name: 'Time Slot 6',\n    start: '17:30',\n    end: '20:30'\n  }, {\n    id: 7,\n    name: 'Time Slot 7',\n    start: '18:00',\n    end: '21:00'\n  }];\n\n  // Helper function for normalizing day names\n  const normalizeDayName = day => {\n    if (!day) return '';\n\n    // Convert common day code formats to full names\n    const dayMap = {\n      'MON': 'Monday',\n      'TUE': 'Tuesday',\n      'WED': 'Wednesday',\n      'THU': 'Thursday',\n      'FRI': 'Friday'\n    };\n\n    // Try direct mapping first\n    const upperDay = day.toUpperCase();\n    if (dayMap[upperDay]) return dayMap[upperDay];\n\n    // Check if it's already a full day name\n    if (daysOfWeek.includes(day)) return day;\n\n    // Try to extract code from timeslot format (e.g. \"TS1-MON\")\n    const dashIndex = day.indexOf('-');\n    if (dashIndex !== -1) {\n      const code = day.substring(dashIndex + 1);\n      if (dayMap[code]) return dayMap[code];\n    }\n\n    // Try partial matching (e.g. \"Mon\" for \"Monday\")\n    for (const [code, fullName] of Object.entries(dayMap)) {\n      if (upperDay.includes(code) || fullName.toLowerCase().includes(day.toLowerCase())) {\n        return fullName;\n      }\n    }\n\n    // Default to the original value if no match found\n    return day;\n  };\n\n  // Extract slot number from timeslot ID\n  const extractSlotNumber = timeslotId => {\n    if (!timeslotId) return null;\n    const match = timeslotId.match(/TS(\\d+)/i);\n    if (match && match[1]) {\n      return parseInt(match[1], 10);\n    }\n    return null;\n  };\n\n  // Fetch available schedules for a semester\n  const fetchAvailableSchedules = useCallback(async semesterId => {\n    if (!semesterId) return;\n    try {\n      setLoading(true);\n      const data = await scheduleService.getSchedulesBySemester(semesterId);\n      console.log(`Found ${data.length} schedules for semester ${semesterId}`);\n      setAvailableSchedules(data);\n\n      // If we have schedules and none is selected yet, select the first one\n      if (data.length > 0 && !selectedScheduleId) {\n        setSelectedScheduleId(data[0].schedule_id);\n        console.log(`Auto-selecting first schedule: ${data[0].schedule_id}`);\n      }\n    } catch (err) {\n      console.error('Error fetching schedules for semester:', err);\n      setError('Failed to load schedules for this semester');\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedScheduleId]);\n\n  // Load a specific schedule by ID\n  const loadScheduleById = useCallback(async scheduleId => {\n    if (!scheduleId) return;\n\n    // Define normalizeCoursesData function inside the callback\n    const normalizeCoursesData = courses => {\n      if (!courses || !Array.isArray(courses) || courses.length === 0) {\n        return [];\n      }\n      return courses.map(course => {\n        // Handle different nesting patterns\n        const courseData = course.Course || course.course || course;\n        const professorData = course.Professor || course.professor || {};\n        const timeSlotData = course.TimeSlot || course.time_slot || {};\n\n        // Extract key information\n        const courseId = course.course_id || courseData.course_id || '';\n        const courseName = course.course_name || courseData.course_name || '';\n        const isCore = course.is_core !== undefined ? course.is_core : courseData.is_core || false;\n\n        // Format professor name\n        const firstName = course.professor_first_name || professorData.first_name || '';\n        const lastName = course.professor_last_name || professorData.last_name || '';\n        const professorName = course.professor_name || `${firstName} ${lastName}`.trim() || 'TBA';\n\n        // Process timeslot and day information\n        const timeslotId = course.timeslot_id || course.time_slot_id || '';\n\n        // Extract slot number from timeslot ID\n        let slotNumber = null;\n        if (timeslotId) {\n          const match = timeslotId.match(/TS(\\d+)/i);\n          if (match && match[1]) {\n            slotNumber = parseInt(match[1], 10);\n          }\n        } else if (course.time_slot_number !== undefined) {\n          slotNumber = course.time_slot_number;\n        }\n\n        // Handle day of week\n        const rawDay = course.day_of_week || timeSlotData.day_of_week || '';\n\n        // Normalize day name\n        const dayMap = {\n          'MON': 'Monday',\n          'TUE': 'Tuesday',\n          'WED': 'Wednesday',\n          'THU': 'Thursday',\n          'FRI': 'Friday'\n        };\n        let dayOfWeek = rawDay;\n        // Try direct mapping\n        const upperDay = rawDay.toUpperCase();\n        if (dayMap[upperDay]) {\n          dayOfWeek = dayMap[upperDay];\n        } else if (daysOfWeek.includes(rawDay)) {\n          // Already a full day name\n          dayOfWeek = rawDay;\n        } else if (rawDay.includes('-')) {\n          // Try to extract code from timeslot format (e.g. \"TS1-MON\")\n          const parts = rawDay.split('-');\n          const code = parts[1];\n          if (dayMap[code]) {\n            dayOfWeek = dayMap[code];\n          }\n        } else {\n          // Try partial matching\n          for (const [code, fullName] of Object.entries(dayMap)) {\n            if (upperDay.includes(code) || fullName.toLowerCase().includes(rawDay.toLowerCase())) {\n              dayOfWeek = fullName;\n              break;\n            }\n          }\n        }\n\n        // Return normalized course object\n        return {\n          ...course,\n          course_id: courseId,\n          course_name: courseName,\n          is_core: isCore,\n          professor_name: professorName,\n          timeslot_id: timeslotId,\n          time_slot_id: timeslotId,\n          // Alternative naming\n          time_slot_number: slotNumber,\n          day_of_week: dayOfWeek,\n          department_id: course.department_id || courseData.department_id || '',\n          scheduled_course_id: course.scheduled_course_id || ''\n        };\n      });\n    };\n    try {\n      setLoading(true);\n      setError(null);\n      console.log(`Loading schedule details for ID: ${scheduleId}`);\n      const scheduleData = await scheduleService.getScheduleById(scheduleId);\n      console.log('Raw schedule data:', scheduleData);\n\n      // Get conflicts data\n      const conflictsData = await scheduleService.getScheduleConflicts(scheduleId);\n      console.log(`Found ${conflictsData.length} conflicts`);\n\n      // Identify where the courses are in the response\n      let rawCourses = [];\n      if (scheduleData.courses && Array.isArray(scheduleData.courses)) {\n        console.log(`Found ${scheduleData.courses.length} courses in 'courses' property`);\n        rawCourses = scheduleData.courses;\n      } else if (scheduleData.ScheduledCourses && Array.isArray(scheduleData.ScheduledCourses)) {\n        console.log(`Found ${scheduleData.ScheduledCourses.length} courses in 'ScheduledCourses' property`);\n        rawCourses = scheduleData.ScheduledCourses;\n      }\n\n      // Normalize course data\n      const normalizedCourses = normalizeCoursesData(rawCourses);\n      console.log(`Normalized ${normalizedCourses.length} courses`);\n      if (normalizedCourses.length > 0) {\n        console.log('Sample normalized course:', normalizedCourses[0]);\n      }\n\n      // Update state with complete data\n      const enhancedScheduleData = {\n        ...scheduleData,\n        courses: normalizedCourses\n      };\n      setScheduleData(enhancedScheduleData);\n      setScheduledCourses(normalizedCourses);\n      setFilteredCourses(normalizedCourses);\n      setConflicts(conflictsData);\n    } catch (err) {\n      console.error(`Error loading schedule ${scheduleId}:`, err);\n      setError('Failed to load the selected schedule');\n      setScheduleData(null);\n      setScheduledCourses([]);\n      setFilteredCourses([]);\n      setConflicts([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [daysOfWeek]); // Empty dependency array since all dependencies are now inside\n\n  // Refresh schedules and schedule data\n  const handleRefresh = useCallback(async () => {\n    if (!selectedSemester) return;\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Refreshing schedule data for semester: ${selectedSemester}`);\n\n      // First, refresh the list of available schedules\n      await fetchAvailableSchedules(selectedSemester);\n\n      // If we have a selected schedule, reload it\n      if (selectedScheduleId) {\n        await loadScheduleById(selectedScheduleId);\n      }\n\n      // Reset filters\n      setSelectedDepartment('');\n      setSelectedProgram('all');\n    } catch (err) {\n      console.error(\"Error refreshing data:\", err);\n      setError(\"Failed to refresh data. Please ensure schedules exist for this semester.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedSemester, selectedScheduleId, fetchAvailableSchedules, loadScheduleById]);\n\n  // Check URL parameters (for direct navigation from schedule generation)\n  useEffect(() => {\n    const queryParams = new URLSearchParams(window.location.search);\n    const semesterParam = queryParams.get('semester');\n    const refreshParam = queryParams.get('refresh');\n    if (semesterParam) {\n      console.log(`URL has semester param: ${semesterParam}, setting as selected`);\n      setSelectedSemester(semesterParam);\n\n      // If refresh=true is in the URL, force a refresh\n      if (refreshParam === 'true') {\n        // Use setTimeout to ensure the semester state is updated first\n        setTimeout(() => handleRefresh(), 500);\n      }\n    }\n  }, [handleRefresh]);\n\n  // Initial data loading\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Get semesters\n        const semestersData = await semesterService.getAllSemesters();\n        setSemesters(semestersData);\n\n        // Get departments and programs\n        const departmentsData = await departmentService.getAllDepartments();\n        const programsData = await programService.getAllPrograms();\n        setDepartments(departmentsData);\n        setPrograms(programsData);\n\n        // If we have semesters, try to get a schedule\n        if (semestersData.length > 0) {\n          // Find the current semester or use the first one\n          const currentSemester = semestersData.find(s => s.is_current) || semestersData[0];\n          setSelectedSemester(currentSemester.semester_id);\n\n          // Load schedules for this semester\n          await fetchAvailableSchedules(currentSemester.semester_id);\n        } else {\n          setError('No semesters found. Please create a semester before generating schedules.');\n        }\n      } catch (err) {\n        console.error('Error fetching initial data:', err);\n        setError('Failed to load data. Please ensure your backend server is running.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [fetchAvailableSchedules]);\n\n  // Fetch schedules when semester changes\n  useEffect(() => {\n    if (selectedSemester) {\n      fetchAvailableSchedules(selectedSemester);\n    }\n  }, [selectedSemester, fetchAvailableSchedules]);\n\n  // Load the selected schedule when selectedScheduleId changes\n  useEffect(() => {\n    if (selectedScheduleId) {\n      loadScheduleById(selectedScheduleId);\n    }\n  }, [selectedScheduleId, loadScheduleById]);\n\n  // Apply filters when department, program, or search term changes\n  useEffect(() => {\n    if (!scheduledCourses.length) return;\n    let filtered = [...scheduledCourses];\n\n    // Filter by department\n    if (selectedDepartment) {\n      filtered = filtered.filter(course => course.department_id === selectedDepartment);\n    }\n\n    // Filter by program - if \"all\" is selected, don't filter by program\n    if (selectedProgram && selectedProgram !== 'all') {\n      filtered = filtered.filter(course => {\n        var _course$program_ids;\n        return (_course$program_ids = course.program_ids) === null || _course$program_ids === void 0 ? void 0 : _course$program_ids.includes(selectedProgram);\n      });\n    }\n\n    // Filter by search term\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      filtered = filtered.filter(course => course.course_name && course.course_name.toLowerCase().includes(search) || course.course_id && course.course_id.toLowerCase().includes(search) || course.professor_name && course.professor_name.toLowerCase().includes(search));\n    }\n    setFilteredCourses(filtered);\n  }, [scheduledCourses, selectedDepartment, selectedProgram, searchTerm]);\n\n  // Event handlers\n  const handleDepartmentChange = event => {\n    const deptId = event.target.value;\n    setSelectedDepartment(deptId);\n    setSelectedProgram('all');\n  };\n  const handleProgramChange = event => {\n    setSelectedProgram(event.target.value);\n  };\n  const handleSemesterChange = event => {\n    setSelectedSemester(event.target.value);\n  };\n  const handleScheduleChange = event => {\n    console.log(`Selected schedule changed to: ${event.target.value}`);\n    setSelectedScheduleId(event.target.value);\n  };\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  const handleViewModeChange = (_event, newValue) => {\n    setViewMode(newValue);\n  };\n  const handleDayChange = (_event, newValue) => {\n    setCurrentDay(newValue);\n  };\n  const handleCreateSchedule = () => {\n    setShowGenerateForm(true);\n  };\n  const handleScheduleGenerated = semesterId => {\n    console.log(`Schedule generated for semester: ${semesterId}, refreshing data`);\n    setSelectedSemester(semesterId);\n    setShowGenerateForm(false);\n    // Reload the schedule data\n    setTimeout(() => {\n      handleRefresh();\n    }, 500);\n  };\n\n  // Export schedule data to CSV\n  const handleExport = () => {\n    if (!scheduleData || !filteredCourses.length) {\n      setError(\"No schedule data available to export\");\n      return;\n    }\n    try {\n      var _semesters$find;\n      // Get semester name\n      const semesterName = ((_semesters$find = semesters.find(s => s.semester_id === selectedSemester)) === null || _semesters$find === void 0 ? void 0 : _semesters$find.name) || 'Current Semester';\n\n      // Create CSV header\n      let csvContent = \"Course Schedule - \" + semesterName + \"\\n\";\n      csvContent += \"Generated on: \" + new Date().toLocaleString() + \"\\n\\n\";\n      csvContent += \"Course ID,Course Name,Professor,Day,Time,Type\\n\";\n\n      // Add course data rows\n      filteredCourses.forEach(course => {\n        // Find the time slot info\n        let timeSlotInfo = \"Unknown\";\n        if (course.time_slot_number !== null) {\n          const slot = timeSlots.find(ts => ts.id === course.time_slot_number);\n          if (slot) {\n            timeSlotInfo = `${slot.start}-${slot.end}`;\n          }\n        }\n        const row = [course.course_id, course.course_name, course.professor_name || 'TBA', course.day_of_week, timeSlotInfo, course.is_core ? 'Core' : 'Elective'];\n        csvContent += row.join(',') + '\\n';\n      });\n\n      // Create and download the file\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.setAttribute('href', url);\n      link.setAttribute('download', `schedule_${semesterName.replace(/\\s+/g, '_')}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (err) {\n      console.error(\"Error exporting schedule:\", err);\n      setError(\"Failed to export schedule\");\n    }\n  };\n\n  // Check if a course has conflicts\n  const hasConflict = course => {\n    if (!conflicts || !Array.isArray(conflicts)) return false;\n    return conflicts.some(conflict => {\n      if (!conflict.ScheduledCourses && !conflict.courses) return false;\n      const conflictCourses = conflict.ScheduledCourses || conflict.courses || [];\n      return conflictCourses.some(c => c.scheduled_course_id === course.scheduled_course_id) && !conflict.is_resolved;\n    });\n  };\n\n  // Find courses for a specific time slot and day\n  const getCoursesForTimeSlot = (slotNumber, day) => {\n    // Add a unique ID for debugging\n    const requestId = Math.random().toString(36).substring(2, 8);\n    console.log(`[${requestId}] Finding courses for slot ${slotNumber} on ${day}`);\n    if (!(scheduleData !== null && scheduleData !== void 0 && scheduleData.courses) || !Array.isArray(scheduleData.courses) || scheduleData.courses.length === 0) {\n      console.log(`[${requestId}] No courses available`);\n      return [];\n    }\n\n    // Explicitly log the first few courses to see their structure\n    console.log(`[${requestId}] Schedule has ${scheduleData.courses.length} courses. Sample:`, scheduleData.courses.slice(0, 3).map(c => ({\n      id: c.scheduled_course_id,\n      name: c.course_name || 'Unknown',\n      day: c.day_of_week,\n      slot: c.time_slot_number,\n      timeslotId: c.timeslot_id\n    })));\n\n    // Try multiple matching strategies\n    const matchingCourses = scheduleData.courses.filter(course => {\n      // 1. Easy case: direct match by time_slot_number and day\n      if (course.time_slot_number === slotNumber && course.day_of_week === day) {\n        console.log(`[${requestId}] DIRECT MATCH: ${course.course_name || 'Unknown course'}`);\n        return true;\n      }\n\n      // 2. Try to extract slot number from timeslot_id (e.g., TS3-MON)\n      let extractedSlotNumber = null;\n      if (course.timeslot_id) {\n        const match = course.timeslot_id.match(/TS(\\d+)/i);\n        if (match && match[1]) {\n          extractedSlotNumber = parseInt(match[1], 10);\n        }\n      }\n\n      // 3. Try to match by day code in timeslot_id\n      let dayCodeMatches = false;\n      if (course.timeslot_id) {\n        const dayCode = day.substring(0, 3).toUpperCase();\n        dayCodeMatches = course.timeslot_id.includes(`-${dayCode}`);\n      }\n\n      // 4. Try day normalization\n      const normalizedCourseDay = normalizeDayName(course.day_of_week);\n      const dayMatches = normalizedCourseDay === day;\n\n      // Log slot number matches\n      if ((extractedSlotNumber === slotNumber || course.time_slot_number === slotNumber) && (dayMatches || dayCodeMatches)) {\n        console.log(`[${requestId}] MATCH: ${course.course_name || 'Unknown course'} - Slot match: ${extractedSlotNumber} or ${course.time_slot_number}, Day match: ${dayMatches} or ${dayCodeMatches}`);\n        return true;\n      }\n      return false;\n    });\n    console.log(`[${requestId}] Found ${matchingCourses.length} courses for slot ${slotNumber} on ${day}`);\n    return matchingCourses;\n  };\n\n  // Handle conflict resolution\n  const handleAcceptConflict = async conflictId => {\n    try {\n      await scheduleService.resolveConflict(conflictId, {\n        action: 'ACCEPT',\n        notes: 'Conflict accepted by administrator'\n      });\n\n      // Update local state\n      setConflicts(conflicts.map(conflict => conflict.conflict_id === conflictId ? {\n        ...conflict,\n        is_resolved: true,\n        resolution_notes: 'Conflict accepted by administrator'\n      } : conflict));\n    } catch (err) {\n      console.error(\"Error accepting conflict:\", err);\n      setError(\"Failed to accept conflict\");\n    }\n  };\n\n  // Handle conflict override\n  const handleOverrideConflict = async conflictId => {\n    try {\n      // Simplified implementation - in a real app, would open a dialog to collect details\n      setConflicts(conflicts.map(conflict => conflict.conflict_id === conflictId ? {\n        ...conflict,\n        is_resolved: true,\n        resolution_notes: 'Conflict overridden by administrator'\n      } : conflict));\n    } catch (err) {\n      console.error(\"Error overriding conflict:\", err);\n      setError(\"Failed to override conflict\");\n    }\n  };\n\n  // Determine background color for course blocks\n  const getCourseColor = course => {\n    if (course.is_override) return 'rgba(255, 152, 0, 0.8)'; // Orange for overrides\n    if (course.is_core) return 'rgba(25, 118, 210, 0.8)'; // Blue for core courses\n    return 'rgba(76, 175, 80, 0.8)'; // Green for electives\n  };\n\n  // Render a single course block in the timetable\n  const renderCourseBlock = course => {\n    const courseHasConflict = hasConflict(course);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        backgroundColor: getCourseColor(course),\n        color: 'white',\n        p: 1,\n        borderRadius: 1,\n        mb: 1,\n        position: 'relative',\n        cursor: 'pointer',\n        '&:hover': {\n          opacity: 0.9\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        fontWeight: \"bold\",\n        noWrap: true,\n        children: course.course_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        display: \"block\",\n        noWrap: true,\n        children: course.course_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        display: \"block\",\n        noWrap: true,\n        children: [\"Prof. \", course.professor_name || 'TBA']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this), courseHasConflict && /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"This course has scheduling conflicts\",\n        children: /*#__PURE__*/_jsxDEV(WarningIcon, {\n          sx: {\n            position: 'absolute',\n            top: 5,\n            right: 5,\n            color: 'orange',\n            fontSize: 20\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 11\n      }, this)]\n    }, course.scheduled_course_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render week view\n  const renderWeekView = () => {\n    var _scheduleData$courses, _scheduleData$courses2;\n    console.log('Rendering week view with data:', {\n      scheduleId: scheduleData === null || scheduleData === void 0 ? void 0 : scheduleData.schedule_id,\n      courseCount: (scheduleData === null || scheduleData === void 0 ? void 0 : (_scheduleData$courses = scheduleData.courses) === null || _scheduleData$courses === void 0 ? void 0 : _scheduleData$courses.length) || 0,\n      sampleCourse: (scheduleData === null || scheduleData === void 0 ? void 0 : (_scheduleData$courses2 = scheduleData.courses) === null || _scheduleData$courses2 === void 0 ? void 0 : _scheduleData$courses2[0]) || 'none'\n    });\n    if (!scheduleData || !scheduleData.courses || scheduleData.courses.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          mt: 2,\n          p: 3,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No schedule data available or no courses found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Log each time slot and how many courses are found for debugging\n    timeSlots.forEach(slot => {\n      daysOfWeek.forEach(day => {\n        const coursesForSlot = getCoursesForTimeSlot(slot.id, day);\n        if (coursesForSlot.length > 0) {\n          console.log(`Found ${coursesForSlot.length} courses for ${day} at slot ${slot.id}`);\n        }\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        mt: 2,\n        overflowX: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          minWidth: 800\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                borderRight: 1,\n                borderColor: 'divider',\n                height: '100%',\n                pt: 7\n              },\n              children: timeSlots.map(slot => /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  height: 120,\n                  p: 1,\n                  borderBottom: 1,\n                  borderColor: 'divider',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n                },\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  children: [slot.start, \" - \", slot.end]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 745,\n                  columnNumber: 21\n                }, this)\n              }, slot.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 733,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 731,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 13\n          }, this), daysOfWeek.map((day, index) => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                borderRight: index < daysOfWeek.length - 1 ? 1 : 0,\n                borderColor: 'divider'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  p: 2,\n                  borderBottom: 1,\n                  borderColor: 'divider',\n                  textAlign: 'center',\n                  fontWeight: 'bold',\n                  bgcolor: 'grey.100'\n                },\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  children: day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 768,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 19\n              }, this), timeSlots.map(slot => {\n                const coursesForSlot = getCoursesForTimeSlot(slot.id, day);\n                return /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    height: 120,\n                    p: 1,\n                    borderBottom: 1,\n                    borderColor: 'divider',\n                    overflow: 'auto'\n                  },\n                  children: coursesForSlot.length > 0 ? coursesForSlot.map(course => renderCourseBlock(course)) : /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    color: \"text.secondary\",\n                    children: \"No courses\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 788,\n                    columnNumber: 27\n                  }, this)\n                }, `${day}-${slot.id}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 775,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 17\n            }, this)\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render day view\n  const renderDayView = () => {\n    if (!filteredCourses.length) {\n      return /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 3,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No schedule data available or no courses match your filters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 9\n      }, this);\n    }\n    const day = daysOfWeek[currentDay];\n\n    // Get courses for this specific day\n    const dayFilteredCourses = filteredCourses.filter(course => course.day_of_week === day || normalizeDayName(course.day_of_week) === day);\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: [day, \"'s Schedule\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: timeSlots.map(slot => {\n            // Get courses for this time slot on this day\n            const slotCourses = dayFilteredCourses.filter(course => {\n              const courseSlotNumber = course.time_slot_number || extractSlotNumber(course.timeslot_id);\n              return courseSlotNumber === slot.id;\n            });\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Paper, {\n                elevation: 1,\n                sx: {\n                  p: 2,\n                  borderLeft: 4,\n                  borderColor: slotCourses.length > 0 ? 'primary.main' : 'grey.300'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  color: \"textSecondary\",\n                  children: [slot.start, \" - \", slot.end]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 846,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    mt: 1\n                  },\n                  children: slotCourses.length > 0 ? slotCourses.map(course => renderCourseBlock(course)) : /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\",\n                    children: \"No courses scheduled\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 853,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 849,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 838,\n                columnNumber: 19\n              }, this)\n            }, slot.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 837,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 822,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the conflicts section\n  const renderConflicts = () => {\n    const displayConflicts = showResolvedConflicts ? conflicts : conflicts.filter(conflict => !conflict.is_resolved);\n    if (!displayConflicts || displayConflicts.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mt: 3\n        },\n        children: \"No unresolved conflicts in this schedule.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        mt: 3,\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: [\"Conflicts (\", displayConflicts.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          size: \"small\",\n          onClick: () => setShowResolvedConflicts(!showResolvedConflicts),\n          children: showResolvedConflicts ? 'Hide Resolved' : 'Show Resolved'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: displayConflicts.map(conflict => {\n          var _conflict$time_slot;\n          // Handle different ways conflict courses might be structured\n          const conflictCourses = conflict.courses || conflict.ScheduledCourses || [];\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              elevation: 1,\n              sx: {\n                p: 2,\n                borderLeft: 4,\n                borderColor: conflict.is_resolved ? 'success.main' : 'warning.main'\n              },\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'flex-start'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle1\",\n                    sx: {\n                      fontWeight: 'bold'\n                    },\n                    children: conflict.conflict_type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 914,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    children: conflict.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 917,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: [\"Time: \", conflict.day_of_week, \", \", ((_conflict$time_slot = conflict.time_slot) === null || _conflict$time_slot === void 0 ? void 0 : _conflict$time_slot.name) || 'Unknown time slot']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 920,\n                    columnNumber: 23\n                  }, this), conflictCourses.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      mt: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      sx: {\n                        fontWeight: 'medium'\n                      },\n                      children: \"Affected Courses:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 926,\n                      columnNumber: 27\n                    }, this), conflictCourses.map(course => {\n                      // Extract course data which might be nested\n                      const courseData = course.Course || course;\n                      const professorData = course.Professor || course.professor || {};\n                      const professorName = `${professorData.first_name || ''} ${professorData.last_name || ''}`.trim() || 'TBA';\n                      const courseName = courseData.course_name || course.course_name || 'Unknown Course';\n                      return /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"body2\",\n                        sx: {\n                          ml: 2\n                        },\n                        children: [\"\\u2022 \", courseName, \" (Prof. \", professorName, \")\"]\n                      }, course.scheduled_course_id, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 937,\n                        columnNumber: 31\n                      }, this);\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 925,\n                    columnNumber: 25\n                  }, this), conflict.is_resolved && /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      mt: 1,\n                      p: 1,\n                      bgcolor: 'success.light',\n                      borderRadius: 1\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      color: \"success.contrastText\",\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Resolution:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 948,\n                        columnNumber: 29\n                      }, this), \" \", conflict.resolution_notes]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 947,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 946,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 913,\n                  columnNumber: 21\n                }, this), !conflict.is_resolved && /*#__PURE__*/_jsxDEV(Box, {\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"outlined\",\n                    color: \"primary\",\n                    size: \"small\",\n                    onClick: () => handleOverrideConflict(conflict.conflict_id),\n                    sx: {\n                      mr: 1\n                    },\n                    children: \"Override\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 956,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"contained\",\n                    color: \"primary\",\n                    size: \"small\",\n                    onClick: () => handleAcceptConflict(conflict.conflict_id),\n                    children: \"Accept\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 965,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 955,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 912,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 17\n            }, this)\n          }, conflict.conflict_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 897,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Main render\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"400px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 989,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 988,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h1\",\n          children: \"Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 999,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1006,\n              columnNumber: 26\n            }, this),\n            onClick: handleRefresh,\n            sx: {\n              mr: 2\n            },\n            children: \"Refresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1003,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(GetAppIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1015,\n              columnNumber: 26\n            }, this),\n            onClick: handleExport,\n            sx: {\n              mr: 2\n            },\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1012,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1024,\n              columnNumber: 26\n            }, this),\n            onClick: handleCreateSchedule,\n            children: \"Generate New Schedule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1021,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 13\n        }, this), error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mb: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"semester-select-label\",\n                  children: \"Semester\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1047,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"semester-select-label\",\n                  value: selectedSemester,\n                  onChange: handleSemesterChange,\n                  label: \"Semester\",\n                  children: semesters.map(semester => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: semester.semester_id,\n                    children: semester.name\n                  }, semester.semester_id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1055,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1048,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1046,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1045,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"schedule-select-label\",\n                  children: \"Schedule\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1066,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"schedule-select-label\",\n                  value: selectedScheduleId,\n                  onChange: handleScheduleChange,\n                  label: \"Schedule\",\n                  disabled: availableSchedules.length === 0,\n                  children: availableSchedules.map(schedule => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: schedule.schedule_id,\n                    children: [schedule.name, \" \", schedule.is_final ? '(Final)' : '']\n                  }, schedule.schedule_id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1075,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1067,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1065,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1064,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"department-select-label\",\n                  children: \"Department\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1086,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"department-select-label\",\n                  value: selectedDepartment,\n                  onChange: handleDepartmentChange,\n                  label: \"Department\",\n                  children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"\",\n                    children: /*#__PURE__*/_jsxDEV(\"em\", {\n                      children: \"All Departments\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1094,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1093,\n                    columnNumber: 21\n                  }, this), departments.map(department => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: department.department_id,\n                    children: department.name\n                  }, department.department_id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1097,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1087,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1085,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1084,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"program-select-label\",\n                  children: \"Program\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1108,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"program-select-label\",\n                  value: selectedProgram,\n                  onChange: handleProgramChange,\n                  label: \"Program\",\n                  disabled: !selectedDepartment,\n                  children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"all\",\n                    children: /*#__PURE__*/_jsxDEV(\"em\", {\n                      children: \"All Programs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1117,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1116,\n                    columnNumber: 21\n                  }, this), programs.filter(program => !selectedDepartment || program.department_id === selectedDepartment).map(program => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: program.program_id,\n                    children: program.name\n                  }, program.program_id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1122,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1109,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1107,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 2.4,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \"Search\",\n                variant: \"outlined\",\n                value: searchTerm,\n                onChange: handleSearchChange,\n                placeholder: \"Search courses\",\n                InputProps: {\n                  endAdornment: /*#__PURE__*/_jsxDEV(SearchIcon, {\n                    color: \"action\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1140,\n                    columnNumber: 35\n                  }, this)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1132,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1043,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1042,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          borderBottom: 1,\n          borderColor: 'divider',\n          mb: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: viewMode,\n          onChange: handleViewModeChange,\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Week View\",\n            value: \"week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Day View\",\n            value: \"day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 9\n      }, this), viewMode === 'day' && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          borderBottom: 1,\n          borderColor: 'divider',\n          mb: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: currentDay,\n          onChange: handleDayChange,\n          children: daysOfWeek.map((day, index) => /*#__PURE__*/_jsxDEV(Tab, {\n            label: day,\n            value: index\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1161,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1159,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 11\n      }, this), viewMode === 'week' ? renderWeekView() : renderDayView(), renderConflicts(), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 3,\n          display: 'flex',\n          alignItems: 'center',\n          flexWrap: 'wrap'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mr: 3,\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: 16,\n              height: 16,\n              bgcolor: 'rgba(25, 118, 210, 0.8)',\n              mr: 1,\n              borderRadius: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: \"Core Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mr: 3,\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: 16,\n              height: 16,\n              bgcolor: 'rgba(76, 175, 80, 0.8)',\n              mr: 1,\n              borderRadius: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: \"Elective Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mr: 3,\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: 16,\n              height: 16,\n              bgcolor: 'rgba(255, 152, 0, 0.8)',\n              mr: 1,\n              borderRadius: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: \"Overridden Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1185,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(WarningIcon, {\n            sx: {\n              color: 'orange',\n              fontSize: 16,\n              mr: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: \"Scheduling Conflict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 996,\n      columnNumber: 7\n    }, this), showGenerateForm && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showGenerateForm,\n      onClose: () => setShowGenerateForm(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Generate New Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(GenerateSchedule, {\n          onScheduleGenerated: handleScheduleGenerated,\n          onClose: () => setShowGenerateForm(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1199,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowGenerateForm(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1205,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1204,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1196,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 995,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleView, \"8GICZH9F14aDp6iGzwlo5NPDJqE=\");\n_c = ScheduleView;\nexport default ScheduleView;\nvar _c;\n$RefreshReg$(_c, \"ScheduleView\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","Box","Button","Container","Typography","Card","CardContent","FormControl","InputLabel","MenuItem","Select","Grid","Paper","CircularProgress","Alert","AlertTitle","Tabs","Tab","Tooltip","TextField","AddIcon","RefreshIcon","WarningIcon","SearchIcon","GetAppIcon","Dialog","DialogTitle","DialogContent","DialogActions","scheduleService","departmentService","programService","semesterService","GenerateSchedule","jsxDEV","_jsxDEV","ScheduleView","_s","scheduleData","setScheduleData","availableSchedules","setAvailableSchedules","scheduledCourses","setScheduledCourses","filteredCourses","setFilteredCourses","conflicts","setConflicts","departments","setDepartments","programs","setPrograms","semesters","setSemesters","selectedDepartment","setSelectedDepartment","selectedProgram","setSelectedProgram","selectedSemester","setSelectedSemester","selectedScheduleId","setSelectedScheduleId","searchTerm","setSearchTerm","viewMode","setViewMode","showGenerateForm","setShowGenerateForm","currentDay","setCurrentDay","loading","setLoading","error","setError","showResolvedConflicts","setShowResolvedConflicts","daysOfWeek","timeSlots","id","name","start","end","normalizeDayName","day","dayMap","upperDay","toUpperCase","includes","dashIndex","indexOf","code","substring","fullName","Object","entries","toLowerCase","extractSlotNumber","timeslotId","match","parseInt","fetchAvailableSchedules","semesterId","data","getSchedulesBySemester","console","log","length","schedule_id","err","loadScheduleById","scheduleId","normalizeCoursesData","courses","Array","isArray","map","course","courseData","Course","professorData","Professor","professor","timeSlotData","TimeSlot","time_slot","courseId","course_id","courseName","course_name","isCore","is_core","undefined","firstName","professor_first_name","first_name","lastName","professor_last_name","last_name","professorName","professor_name","trim","timeslot_id","time_slot_id","slotNumber","time_slot_number","rawDay","day_of_week","dayOfWeek","parts","split","department_id","scheduled_course_id","getScheduleById","conflictsData","getScheduleConflicts","rawCourses","ScheduledCourses","normalizedCourses","enhancedScheduleData","handleRefresh","queryParams","URLSearchParams","window","location","search","semesterParam","get","refreshParam","setTimeout","fetchInitialData","semestersData","getAllSemesters","departmentsData","getAllDepartments","programsData","getAllPrograms","currentSemester","find","s","is_current","semester_id","filtered","filter","_course$program_ids","program_ids","handleDepartmentChange","event","deptId","target","value","handleProgramChange","handleSemesterChange","handleScheduleChange","handleSearchChange","handleViewModeChange","_event","newValue","handleDayChange","handleCreateSchedule","handleScheduleGenerated","handleExport","_semesters$find","semesterName","csvContent","Date","toLocaleString","forEach","timeSlotInfo","slot","ts","row","join","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","setAttribute","replace","style","visibility","body","appendChild","click","removeChild","hasConflict","some","conflict","conflictCourses","c","is_resolved","getCoursesForTimeSlot","requestId","Math","random","toString","slice","matchingCourses","extractedSlotNumber","dayCodeMatches","dayCode","normalizedCourseDay","dayMatches","handleAcceptConflict","conflictId","resolveConflict","action","notes","conflict_id","resolution_notes","handleOverrideConflict","getCourseColor","is_override","renderCourseBlock","courseHasConflict","sx","backgroundColor","color","p","borderRadius","mb","position","cursor","opacity","children","variant","fontWeight","noWrap","fileName","_jsxFileName","lineNumber","columnNumber","display","title","top","right","fontSize","renderWeekView","_scheduleData$courses","_scheduleData$courses2","courseCount","sampleCourse","mt","textAlign","coursesForSlot","overflowX","minWidth","container","item","xs","borderRight","borderColor","height","pt","borderBottom","alignItems","justifyContent","index","bgcolor","overflow","renderDayView","dayFilteredCourses","gutterBottom","spacing","slotCourses","courseSlotNumber","elevation","borderLeft","renderConflicts","displayConflicts","severity","size","onClick","_conflict$time_slot","conflict_type","description","ml","mr","minHeight","maxWidth","component","startIcon","md","fullWidth","labelId","onChange","label","semester","disabled","schedule","is_final","department","program","program_id","placeholder","InputProps","endAdornment","flexWrap","width","open","onClose","onScheduleGenerated","_c","$RefreshReg$"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/components/admin/schedule/ScheduleView.tsx"],"sourcesContent":["// src/components/admin/schedules/ScheduleView.tsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Grid,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert,\r\n  AlertTitle,\r\n  Tabs,\r\n  Tab,\r\n  Tooltip,\r\n  TextField\r\n} from '@mui/material';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport WarningIcon from '@mui/icons-material/Warning';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport GetAppIcon from '@mui/icons-material/GetApp';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\n\r\n// Import services\r\nimport scheduleService from '../../../services/scheduleService';\r\nimport departmentService from '../../../services/departmentService';\r\nimport programService from '../../../services/programService';\r\nimport semesterService from '../../../services/semesterService';\r\nimport GenerateSchedule from './GenerateSchedule';\r\n\r\nconst ScheduleView: React.FC = () => {\r\n  // State variables\r\n  const [scheduleData, setScheduleData] = useState<any>(null);\r\n  const [availableSchedules, setAvailableSchedules] = useState<any[]>([]);\r\n  const [scheduledCourses, setScheduledCourses] = useState<any[]>([]);\r\n  const [filteredCourses, setFilteredCourses] = useState<any[]>([]);\r\n  const [conflicts, setConflicts] = useState<any[]>([]);\r\n  const [departments, setDepartments] = useState<any[]>([]);\r\n  const [programs, setPrograms] = useState<any[]>([]);\r\n  const [semesters, setSemesters] = useState<any[]>([]);\r\n  \r\n  const [selectedDepartment, setSelectedDepartment] = useState<string>('');\r\n  const [selectedProgram, setSelectedProgram] = useState<string>('all');\r\n  const [selectedSemester, setSelectedSemester] = useState<string>('');\r\n  const [selectedScheduleId, setSelectedScheduleId] = useState<string>('');\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [viewMode, setViewMode] = useState<string>('week');\r\n  const [showGenerateForm, setShowGenerateForm] = useState<boolean>(false);\r\n  const [currentDay, setCurrentDay] = useState<number>(0);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showResolvedConflicts, setShowResolvedConflicts] = useState<boolean>(false);\r\n  \r\n  // Days and time slots for schedule display\r\n  const daysOfWeek = useMemo(() => ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'], []);\r\n  const timeSlots = [\r\n    { id: 1, name: 'Time Slot 1', start: '09:10', end: '10:05' },\r\n    { id: 2, name: 'Time Slot 2', start: '10:20', end: '11:15' },\r\n    { id: 3, name: 'Time Slot 3', start: '11:30', end: '12:25' },\r\n    { id: 4, name: 'Time Slot 4', start: '12:45', end: '14:05' },\r\n    { id: 5, name: 'Time Slot 5', start: '13:30', end: '14:50' },\r\n    { id: 6, name: 'Time Slot 6', start: '17:30', end: '20:30' },\r\n    { id: 7, name: 'Time Slot 7', start: '18:00', end: '21:00' }\r\n  ];\r\n\r\n  // Helper function for normalizing day names\r\n  const normalizeDayName = (day: string | undefined | null): string => {\r\n    if (!day) return '';\r\n    \r\n    // Convert common day code formats to full names\r\n    const dayMap: Record<string, string> = {\r\n      'MON': 'Monday',\r\n      'TUE': 'Tuesday',\r\n      'WED': 'Wednesday',\r\n      'THU': 'Thursday',\r\n      'FRI': 'Friday'\r\n    };\r\n    \r\n    // Try direct mapping first\r\n    const upperDay = day.toUpperCase();\r\n    if (dayMap[upperDay]) return dayMap[upperDay];\r\n    \r\n    // Check if it's already a full day name\r\n    if (daysOfWeek.includes(day)) return day;\r\n    \r\n    // Try to extract code from timeslot format (e.g. \"TS1-MON\")\r\n    const dashIndex = day.indexOf('-');\r\n    if (dashIndex !== -1) {\r\n      const code = day.substring(dashIndex + 1);\r\n      if (dayMap[code]) return dayMap[code];\r\n    }\r\n    \r\n    // Try partial matching (e.g. \"Mon\" for \"Monday\")\r\n    for (const [code, fullName] of Object.entries(dayMap)) {\r\n      if (upperDay.includes(code) || fullName.toLowerCase().includes(day.toLowerCase())) {\r\n        return fullName;\r\n      }\r\n    }\r\n    \r\n    // Default to the original value if no match found\r\n    return day;\r\n  };\r\n\r\n  // Extract slot number from timeslot ID\r\n  const extractSlotNumber = (timeslotId: string | undefined | null): number | null => {\r\n    if (!timeslotId) return null;\r\n    \r\n    const match = timeslotId.match(/TS(\\d+)/i);\r\n    if (match && match[1]) {\r\n      return parseInt(match[1], 10);\r\n    }\r\n    return null;\r\n  };\r\n \r\n\r\n  // Fetch available schedules for a semester\r\n  const fetchAvailableSchedules = useCallback(async (semesterId: string) => {\r\n    if (!semesterId) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const data = await scheduleService.getSchedulesBySemester(semesterId);\r\n      console.log(`Found ${data.length} schedules for semester ${semesterId}`);\r\n      setAvailableSchedules(data);\r\n      \r\n      // If we have schedules and none is selected yet, select the first one\r\n      if (data.length > 0 && !selectedScheduleId) {\r\n        setSelectedScheduleId(data[0].schedule_id);\r\n        console.log(`Auto-selecting first schedule: ${data[0].schedule_id}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching schedules for semester:', err);\r\n      setError('Failed to load schedules for this semester');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [selectedScheduleId]);\r\n\r\n  // Load a specific schedule by ID\r\n  const loadScheduleById = useCallback(async (scheduleId: string) => {\r\n    if (!scheduleId) return;\r\n    \r\n    // Define normalizeCoursesData function inside the callback\r\n    const normalizeCoursesData = (courses: any[] | undefined): any[] => {\r\n      if (!courses || !Array.isArray(courses) || courses.length === 0) {\r\n        return [];\r\n      }\r\n      \r\n      return courses.map(course => {\r\n        // Handle different nesting patterns\r\n        const courseData = course.Course || course.course || course;\r\n        const professorData = course.Professor || course.professor || {};\r\n        const timeSlotData = course.TimeSlot || course.time_slot || {};\r\n        \r\n        // Extract key information\r\n        const courseId = course.course_id || courseData.course_id || '';\r\n        const courseName = course.course_name || courseData.course_name || '';\r\n        const isCore = course.is_core !== undefined ? course.is_core : courseData.is_core || false;\r\n        \r\n        // Format professor name\r\n        const firstName = course.professor_first_name || professorData.first_name || '';\r\n        const lastName = course.professor_last_name || professorData.last_name || '';\r\n        const professorName = course.professor_name || `${firstName} ${lastName}`.trim() || 'TBA';\r\n        \r\n        // Process timeslot and day information\r\n        const timeslotId = course.timeslot_id || course.time_slot_id || '';\r\n        \r\n        // Extract slot number from timeslot ID\r\n        let slotNumber = null;\r\n        if (timeslotId) {\r\n          const match = timeslotId.match(/TS(\\d+)/i);\r\n          if (match && match[1]) {\r\n            slotNumber = parseInt(match[1], 10);\r\n          }\r\n        } else if (course.time_slot_number !== undefined) {\r\n          slotNumber = course.time_slot_number;\r\n        }\r\n        \r\n        // Handle day of week\r\n        const rawDay = course.day_of_week || timeSlotData.day_of_week || '';\r\n        \r\n        // Normalize day name\r\n        const dayMap: Record<string, string> = {\r\n          'MON': 'Monday',\r\n          'TUE': 'Tuesday',\r\n          'WED': 'Wednesday',\r\n          'THU': 'Thursday',\r\n          'FRI': 'Friday'\r\n        };\r\n        \r\n        let dayOfWeek = rawDay;\r\n        // Try direct mapping\r\n        const upperDay = rawDay.toUpperCase();\r\n        if (dayMap[upperDay]) {\r\n          dayOfWeek = dayMap[upperDay];\r\n        } else if (daysOfWeek.includes(rawDay)) {\r\n          // Already a full day name\r\n          dayOfWeek = rawDay;\r\n        } else if (rawDay.includes('-')) {\r\n          // Try to extract code from timeslot format (e.g. \"TS1-MON\")\r\n          const parts = rawDay.split('-');\r\n          const code = parts[1];\r\n          if (dayMap[code]) {\r\n            dayOfWeek = dayMap[code];\r\n          }\r\n        } else {\r\n          // Try partial matching\r\n          for (const [code, fullName] of Object.entries(dayMap)) {\r\n            if (upperDay.includes(code) || fullName.toLowerCase().includes(rawDay.toLowerCase())) {\r\n              dayOfWeek = fullName;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Return normalized course object\r\n        return {\r\n          ...course,\r\n          course_id: courseId,\r\n          course_name: courseName,\r\n          is_core: isCore,\r\n          professor_name: professorName,\r\n          timeslot_id: timeslotId,\r\n          time_slot_id: timeslotId, // Alternative naming\r\n          time_slot_number: slotNumber,\r\n          day_of_week: dayOfWeek,\r\n          department_id: course.department_id || courseData.department_id || '',\r\n          scheduled_course_id: course.scheduled_course_id || ''\r\n        };\r\n      });\r\n    };\r\n    \r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log(`Loading schedule details for ID: ${scheduleId}`);\r\n      const scheduleData = await scheduleService.getScheduleById(scheduleId);\r\n      console.log('Raw schedule data:', scheduleData);\r\n      \r\n      // Get conflicts data\r\n      const conflictsData = await scheduleService.getScheduleConflicts(scheduleId);\r\n      console.log(`Found ${conflictsData.length} conflicts`);\r\n      \r\n      // Identify where the courses are in the response\r\n      let rawCourses: any[] = [];\r\n      if (scheduleData.courses && Array.isArray(scheduleData.courses)) {\r\n        console.log(`Found ${scheduleData.courses.length} courses in 'courses' property`);\r\n        rawCourses = scheduleData.courses;\r\n      } else if (scheduleData.ScheduledCourses && Array.isArray(scheduleData.ScheduledCourses)) {\r\n        console.log(`Found ${scheduleData.ScheduledCourses.length} courses in 'ScheduledCourses' property`);\r\n        rawCourses = scheduleData.ScheduledCourses;\r\n      }\r\n      \r\n      // Normalize course data\r\n      const normalizedCourses = normalizeCoursesData(rawCourses);\r\n      console.log(`Normalized ${normalizedCourses.length} courses`);\r\n      if (normalizedCourses.length > 0) {\r\n        console.log('Sample normalized course:', normalizedCourses[0]);\r\n      }\r\n      \r\n      // Update state with complete data\r\n      const enhancedScheduleData = {\r\n        ...scheduleData,\r\n        courses: normalizedCourses\r\n      };\r\n      \r\n      setScheduleData(enhancedScheduleData);\r\n      setScheduledCourses(normalizedCourses);\r\n      setFilteredCourses(normalizedCourses);\r\n      setConflicts(conflictsData);\r\n    } catch (err) {\r\n      console.error(`Error loading schedule ${scheduleId}:`, err);\r\n      setError('Failed to load the selected schedule');\r\n      setScheduleData(null);\r\n      setScheduledCourses([]);\r\n      setFilteredCourses([]);\r\n      setConflicts([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [daysOfWeek]); // Empty dependency array since all dependencies are now inside\r\n\r\n  // Refresh schedules and schedule data\r\n  const handleRefresh = useCallback(async () => {\r\n    if (!selectedSemester) return;\r\n  \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log(`Refreshing schedule data for semester: ${selectedSemester}`);\r\n      \r\n      // First, refresh the list of available schedules\r\n      await fetchAvailableSchedules(selectedSemester);\r\n      \r\n      // If we have a selected schedule, reload it\r\n      if (selectedScheduleId) {\r\n        await loadScheduleById(selectedScheduleId);\r\n      }\r\n      \r\n      // Reset filters\r\n      setSelectedDepartment('');\r\n      setSelectedProgram('all');\r\n      \r\n    } catch (err) {\r\n      console.error(\"Error refreshing data:\", err);\r\n      setError(\"Failed to refresh data. Please ensure schedules exist for this semester.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [selectedSemester, selectedScheduleId, fetchAvailableSchedules, loadScheduleById]);\r\n\r\n  // Check URL parameters (for direct navigation from schedule generation)\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(window.location.search);\r\n    const semesterParam = queryParams.get('semester');\r\n    const refreshParam = queryParams.get('refresh');\r\n\r\n    if (semesterParam) {\r\n      console.log(`URL has semester param: ${semesterParam}, setting as selected`);\r\n      setSelectedSemester(semesterParam);\r\n      \r\n      // If refresh=true is in the URL, force a refresh\r\n      if (refreshParam === 'true') {\r\n        // Use setTimeout to ensure the semester state is updated first\r\n        setTimeout(() => handleRefresh(), 500);\r\n      }\r\n    }\r\n  }, [handleRefresh]);\r\n\r\n  // Initial data loading\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        // Get semesters\r\n        const semestersData = await semesterService.getAllSemesters();\r\n        setSemesters(semestersData);\r\n        \r\n        // Get departments and programs\r\n        const departmentsData = await departmentService.getAllDepartments();\r\n        const programsData = await programService.getAllPrograms();\r\n        \r\n        setDepartments(departmentsData);\r\n        setPrograms(programsData);\r\n        \r\n        // If we have semesters, try to get a schedule\r\n        if (semestersData.length > 0) {\r\n          // Find the current semester or use the first one\r\n          const currentSemester = semestersData.find((s: any) => s.is_current) || semestersData[0];\r\n          setSelectedSemester(currentSemester.semester_id);\r\n          \r\n          // Load schedules for this semester\r\n          await fetchAvailableSchedules(currentSemester.semester_id);\r\n        } else {\r\n          setError('No semesters found. Please create a semester before generating schedules.');\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching initial data:', err);\r\n        setError('Failed to load data. Please ensure your backend server is running.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, [fetchAvailableSchedules]);\r\n\r\n  // Fetch schedules when semester changes\r\n  useEffect(() => {\r\n    if (selectedSemester) {\r\n      fetchAvailableSchedules(selectedSemester);\r\n    }\r\n  }, [selectedSemester, fetchAvailableSchedules]);\r\n  \r\n  // Load the selected schedule when selectedScheduleId changes\r\n  useEffect(() => {\r\n    if (selectedScheduleId) {\r\n      loadScheduleById(selectedScheduleId);\r\n    }\r\n  }, [selectedScheduleId, loadScheduleById]);\r\n  \r\n  // Apply filters when department, program, or search term changes\r\n  useEffect(() => {\r\n    if (!scheduledCourses.length) return;\r\n    \r\n    let filtered = [...scheduledCourses];\r\n    \r\n    // Filter by department\r\n    if (selectedDepartment) {\r\n      filtered = filtered.filter(course => \r\n        course.department_id === selectedDepartment\r\n      );\r\n    }\r\n    \r\n    // Filter by program - if \"all\" is selected, don't filter by program\r\n    if (selectedProgram && selectedProgram !== 'all') {\r\n      filtered = filtered.filter(course => \r\n        course.program_ids?.includes(selectedProgram)\r\n      );\r\n    }\r\n    \r\n    // Filter by search term\r\n    if (searchTerm) {\r\n      const search = searchTerm.toLowerCase();\r\n      filtered = filtered.filter(course => \r\n        (course.course_name && course.course_name.toLowerCase().includes(search)) ||\r\n        (course.course_id && course.course_id.toLowerCase().includes(search)) ||\r\n        (course.professor_name && course.professor_name.toLowerCase().includes(search))\r\n      );\r\n    }\r\n    \r\n    setFilteredCourses(filtered);\r\n  }, [scheduledCourses, selectedDepartment, selectedProgram, searchTerm]);\r\n  \r\n  // Event handlers\r\n  const handleDepartmentChange = (event: SelectChangeEvent) => {\r\n    const deptId = event.target.value as string;\r\n    setSelectedDepartment(deptId);\r\n    setSelectedProgram('all');\r\n  };\r\n  \r\n  const handleProgramChange = (event: SelectChangeEvent) => {\r\n    setSelectedProgram(event.target.value as string);\r\n  };\r\n  \r\n  const handleSemesterChange = (event: SelectChangeEvent) => {\r\n    setSelectedSemester(event.target.value as string);\r\n  };\r\n\r\n  const handleScheduleChange = (event: SelectChangeEvent) => {\r\n    console.log(`Selected schedule changed to: ${event.target.value}`);\r\n    setSelectedScheduleId(event.target.value as string);\r\n  };\r\n  \r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n  \r\n  const handleViewModeChange = (_event: React.SyntheticEvent, newValue: string) => {\r\n    setViewMode(newValue);\r\n  };\r\n  \r\n  const handleDayChange = (_event: React.SyntheticEvent, newValue: number) => {\r\n    setCurrentDay(newValue);\r\n  };\r\n  \r\n  const handleCreateSchedule = () => {\r\n    setShowGenerateForm(true);\r\n  };\r\n\r\n  const handleScheduleGenerated = (semesterId: string) => {\r\n    console.log(`Schedule generated for semester: ${semesterId}, refreshing data`);\r\n    setSelectedSemester(semesterId);\r\n    setShowGenerateForm(false);\r\n    // Reload the schedule data\r\n    setTimeout(() => {\r\n      handleRefresh();\r\n    }, 500);\r\n  };\r\n\r\n  // Export schedule data to CSV\r\n  const handleExport = () => {\r\n    if (!scheduleData || !filteredCourses.length) {\r\n      setError(\"No schedule data available to export\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get semester name\r\n      const semesterName = semesters.find(s => s.semester_id === selectedSemester)?.name || 'Current Semester';\r\n      \r\n      // Create CSV header\r\n      let csvContent = \"Course Schedule - \" + semesterName + \"\\n\";\r\n      csvContent += \"Generated on: \" + new Date().toLocaleString() + \"\\n\\n\";\r\n      csvContent += \"Course ID,Course Name,Professor,Day,Time,Type\\n\";\r\n      \r\n      // Add course data rows\r\n      filteredCourses.forEach(course => {\r\n        // Find the time slot info\r\n        let timeSlotInfo = \"Unknown\";\r\n        if (course.time_slot_number !== null) {\r\n          const slot = timeSlots.find(ts => ts.id === course.time_slot_number);\r\n          if (slot) {\r\n            timeSlotInfo = `${slot.start}-${slot.end}`;\r\n          }\r\n        }\r\n        \r\n        const row = [\r\n          course.course_id,\r\n          course.course_name,\r\n          course.professor_name || 'TBA',\r\n          course.day_of_week,\r\n          timeSlotInfo,\r\n          course.is_core ? 'Core' : 'Elective'\r\n        ];\r\n        \r\n        csvContent += row.join(',') + '\\n';\r\n      });\r\n      \r\n      // Create and download the file\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', `schedule_${semesterName.replace(/\\s+/g, '_')}.csv`);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    } catch (err) {\r\n      console.error(\"Error exporting schedule:\", err);\r\n      setError(\"Failed to export schedule\");\r\n    }\r\n  };\r\n\r\n  // Check if a course has conflicts\r\n  const hasConflict = (course: any) => {\r\n    if (!conflicts || !Array.isArray(conflicts)) return false;\r\n    \r\n    return conflicts.some(conflict => {\r\n      if (!conflict.ScheduledCourses && !conflict.courses) return false;\r\n      \r\n      const conflictCourses = conflict.ScheduledCourses || conflict.courses || [];\r\n      return (\r\n        conflictCourses.some((c: any) => c.scheduled_course_id === course.scheduled_course_id) && \r\n        !conflict.is_resolved\r\n      );\r\n    });\r\n  };\r\n\r\n  // Find courses for a specific time slot and day\r\n  const getCoursesForTimeSlot = (slotNumber: number, day: string): any[] => {\r\n    // Add a unique ID for debugging\r\n    const requestId = Math.random().toString(36).substring(2, 8);\r\n    console.log(`[${requestId}] Finding courses for slot ${slotNumber} on ${day}`);\r\n    \r\n    if (!scheduleData?.courses || !Array.isArray(scheduleData.courses) || scheduleData.courses.length === 0) {\r\n      console.log(`[${requestId}] No courses available`);\r\n      return [];\r\n    }\r\n    \r\n    // Explicitly log the first few courses to see their structure\r\n    console.log(`[${requestId}] Schedule has ${scheduleData.courses.length} courses. Sample:`, \r\n      scheduleData.courses.slice(0, 3).map((c:any) => ({\r\n        id: c.scheduled_course_id,\r\n        name: c.course_name || 'Unknown',\r\n        day: c.day_of_week,\r\n        slot: c.time_slot_number,\r\n        timeslotId: c.timeslot_id\r\n      }))\r\n    );\r\n    \r\n    // Try multiple matching strategies\r\n    const matchingCourses = scheduleData.courses.filter((course: any) => {\r\n      // 1. Easy case: direct match by time_slot_number and day\r\n      if (course.time_slot_number === slotNumber && course.day_of_week === day) {\r\n        console.log(`[${requestId}] DIRECT MATCH: ${course.course_name || 'Unknown course'}`);\r\n        return true;\r\n      }\r\n      \r\n      // 2. Try to extract slot number from timeslot_id (e.g., TS3-MON)\r\n      let extractedSlotNumber = null;\r\n      if (course.timeslot_id) {\r\n        const match = course.timeslot_id.match(/TS(\\d+)/i);\r\n        if (match && match[1]) {\r\n          extractedSlotNumber = parseInt(match[1], 10);\r\n        }\r\n      }\r\n      \r\n      // 3. Try to match by day code in timeslot_id\r\n      let dayCodeMatches = false;\r\n      if (course.timeslot_id) {\r\n        const dayCode = day.substring(0, 3).toUpperCase();\r\n        dayCodeMatches = course.timeslot_id.includes(`-${dayCode}`);\r\n      }\r\n      \r\n      // 4. Try day normalization\r\n      const normalizedCourseDay = normalizeDayName(course.day_of_week);\r\n      const dayMatches = normalizedCourseDay === day;\r\n      \r\n      // Log slot number matches\r\n      if ((extractedSlotNumber === slotNumber || course.time_slot_number === slotNumber) &&\r\n          (dayMatches || dayCodeMatches)) {\r\n        console.log(`[${requestId}] MATCH: ${course.course_name || 'Unknown course'} - Slot match: ${extractedSlotNumber} or ${course.time_slot_number}, Day match: ${dayMatches} or ${dayCodeMatches}`);\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    });\r\n    \r\n    console.log(`[${requestId}] Found ${matchingCourses.length} courses for slot ${slotNumber} on ${day}`);\r\n    return matchingCourses;\r\n  };\r\n\r\n  // Handle conflict resolution\r\n  const handleAcceptConflict = async (conflictId: string) => {\r\n    try {\r\n      await scheduleService.resolveConflict(conflictId, {\r\n        action: 'ACCEPT',\r\n        notes: 'Conflict accepted by administrator'\r\n      });\r\n      \r\n      // Update local state\r\n      setConflicts(conflicts.map(conflict => \r\n        conflict.conflict_id === conflictId \r\n          ? { ...conflict, is_resolved: true, resolution_notes: 'Conflict accepted by administrator' }\r\n          : conflict\r\n      ));\r\n    } catch (err) {\r\n      console.error(\"Error accepting conflict:\", err);\r\n      setError(\"Failed to accept conflict\");\r\n    }\r\n  };\r\n\r\n  // Handle conflict override\r\n  const handleOverrideConflict = async (conflictId: string) => {\r\n    try {\r\n      // Simplified implementation - in a real app, would open a dialog to collect details\r\n      setConflicts(conflicts.map(conflict => \r\n        conflict.conflict_id === conflictId \r\n          ? { ...conflict, is_resolved: true, resolution_notes: 'Conflict overridden by administrator' }\r\n          : conflict\r\n      ));\r\n    } catch (err) {\r\n      console.error(\"Error overriding conflict:\", err);\r\n      setError(\"Failed to override conflict\");\r\n    }\r\n  };\r\n\r\n  // Determine background color for course blocks\r\n  const getCourseColor = (course: any) => {\r\n    if (course.is_override) return 'rgba(255, 152, 0, 0.8)'; // Orange for overrides\r\n    if (course.is_core) return 'rgba(25, 118, 210, 0.8)'; // Blue for core courses\r\n    return 'rgba(76, 175, 80, 0.8)'; // Green for electives\r\n  };\r\n\r\n  // Render a single course block in the timetable\r\n  const renderCourseBlock = (course: any) => {\r\n    const courseHasConflict = hasConflict(course);\r\n    \r\n    return (\r\n      <Box\r\n        key={course.scheduled_course_id}\r\n        sx={{\r\n          backgroundColor: getCourseColor(course),\r\n          color: 'white',\r\n          p: 1,\r\n          borderRadius: 1,\r\n          mb: 1,\r\n          position: 'relative',\r\n          cursor: 'pointer',\r\n          '&:hover': {\r\n            opacity: 0.9,\r\n          }\r\n        }}\r\n      >\r\n        <Typography variant=\"subtitle2\" fontWeight=\"bold\" noWrap>\r\n          {course.course_name}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" noWrap>\r\n          {course.course_id}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" noWrap>\r\n          Prof. {course.professor_name || 'TBA'}\r\n        </Typography>\r\n        \r\n        {courseHasConflict && (\r\n          <Tooltip title=\"This course has scheduling conflicts\">\r\n            <WarningIcon \r\n              sx={{ \r\n                position: 'absolute', \r\n                top: 5, \r\n                right: 5, \r\n                color: 'orange',\r\n                fontSize: 20\r\n              }} \r\n            />\r\n          </Tooltip>\r\n        )}\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  // Render week view\r\n  const renderWeekView = () => {\r\n    console.log('Rendering week view with data:', {\r\n      scheduleId: scheduleData?.schedule_id,\r\n      courseCount: scheduleData?.courses?.length || 0,\r\n      sampleCourse: scheduleData?.courses?.[0] || 'none'\r\n    });\r\n    \r\n    if (!scheduleData || !scheduleData.courses || scheduleData.courses.length === 0) {\r\n      return (\r\n        <Paper sx={{ mt: 2, p: 3, textAlign: 'center' }}>\r\n          <Typography>No schedule data available or no courses found.</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    \r\n    // Log each time slot and how many courses are found for debugging\r\n    timeSlots.forEach(slot => {\r\n      daysOfWeek.forEach(day => {\r\n        const coursesForSlot = getCoursesForTimeSlot(slot.id, day);\r\n        if (coursesForSlot.length > 0) {\r\n          console.log(`Found ${coursesForSlot.length} courses for ${day} at slot ${slot.id}`);\r\n        }\r\n      });\r\n    });\r\n\r\n    return (\r\n      <Paper sx={{ mt: 2, overflowX: 'auto' }}>\r\n        <Box sx={{ minWidth: 800 }}>\r\n          <Grid container>\r\n            {/* Time slots column */}\r\n            <Grid item xs={1}>\r\n              <Box sx={{ borderRight: 1, borderColor: 'divider', height: '100%', pt: 7 }}>\r\n                {timeSlots.map(slot => (\r\n                  <Box \r\n                    key={slot.id} \r\n                    sx={{ \r\n                      height: 120, \r\n                      p: 1, \r\n                      borderBottom: 1, \r\n                      borderColor: 'divider',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"caption\">\r\n                      {slot.start} - {slot.end}\r\n                    </Typography>\r\n                  </Box>\r\n                ))}\r\n              </Box>\r\n            </Grid>\r\n\r\n            {/* Days columns */}\r\n            {daysOfWeek.map((day, index) => (\r\n              <Grid item xs key={day}>\r\n                <Box sx={{ borderRight: index < daysOfWeek.length - 1 ? 1 : 0, borderColor: 'divider' }}>\r\n                  {/* Day header */}\r\n                  <Box \r\n                    sx={{ \r\n                      p: 2, \r\n                      borderBottom: 1, \r\n                      borderColor: 'divider',\r\n                      textAlign: 'center',\r\n                      fontWeight: 'bold',\r\n                      bgcolor: 'grey.100'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"subtitle1\">{day}</Typography>\r\n                  </Box>\r\n\r\n                  {/* Time slots for this day */}\r\n                  {timeSlots.map(slot => {\r\n                    const coursesForSlot = getCoursesForTimeSlot(slot.id, day);\r\n                    return (\r\n                      <Box \r\n                        key={`${day}-${slot.id}`}\r\n                        sx={{ \r\n                          height: 120, \r\n                          p: 1, \r\n                          borderBottom: 1, \r\n                          borderColor: 'divider',\r\n                          overflow: 'auto'\r\n                        }}\r\n                      >\r\n                        {coursesForSlot.length > 0 ? (\r\n                          coursesForSlot.map(course => renderCourseBlock(course))\r\n                        ) : (\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            No courses\r\n                          </Typography>\r\n                        )}\r\n                      </Box>\r\n                    );\r\n                  })}\r\n                </Box>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Box>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Render day view\r\n  const renderDayView = () => {\r\n    if (!filteredCourses.length) {\r\n      return (\r\n        <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n          <Typography>No schedule data available or no courses match your filters.</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n\r\n    const day = daysOfWeek[currentDay];\r\n    \r\n    // Get courses for this specific day\r\n    const dayFilteredCourses = filteredCourses.filter(course => \r\n      course.day_of_week === day || normalizeDayName(course.day_of_week) === day\r\n    );\r\n\r\n    return (\r\n      <Paper sx={{ mt: 2 }}>\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {day}'s Schedule\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {timeSlots.map(slot => {\r\n              // Get courses for this time slot on this day\r\n              const slotCourses = dayFilteredCourses.filter(course => {\r\n                const courseSlotNumber = course.time_slot_number || \r\n                                        extractSlotNumber(course.timeslot_id);\r\n                return courseSlotNumber === slot.id;\r\n              });\r\n\r\n              return (\r\n                <Grid item xs={12} key={slot.id}>\r\n                  <Paper \r\n                    elevation={1} \r\n                    sx={{ \r\n                      p: 2, \r\n                      borderLeft: 4, \r\n                      borderColor: slotCourses.length > 0 ? 'primary.main' : 'grey.300'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                      {slot.start} - {slot.end}\r\n                    </Typography>\r\n                    <Box sx={{ mt: 1 }}>\r\n                      {slotCourses.length > 0 ? (\r\n                        slotCourses.map(course => renderCourseBlock(course))\r\n                      ) : (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          No courses scheduled\r\n                        </Typography>\r\n                      )}\r\n                    </Box>\r\n                  </Paper>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Box>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Render the conflicts section\r\n  const renderConflicts = () => {\r\n    const displayConflicts = showResolvedConflicts \r\n      ? conflicts \r\n      : conflicts.filter(conflict => !conflict.is_resolved);\r\n    \r\n    if (!displayConflicts || displayConflicts.length === 0) {\r\n      return (\r\n        <Alert severity=\"success\" sx={{ mt: 3 }}>\r\n          No unresolved conflicts in this schedule.\r\n        </Alert>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <Paper sx={{ mt: 3, p: 2 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n          <Typography variant=\"h6\">\r\n            Conflicts ({displayConflicts.length})\r\n          </Typography>\r\n          <Button \r\n            variant=\"outlined\" \r\n            size=\"small\"\r\n            onClick={() => setShowResolvedConflicts(!showResolvedConflicts)}\r\n          >\r\n            {showResolvedConflicts ? 'Hide Resolved' : 'Show Resolved'}\r\n          </Button>\r\n        </Box>\r\n        \r\n        <Grid container spacing={2}>\r\n          {displayConflicts.map(conflict => {\r\n            // Handle different ways conflict courses might be structured\r\n            const conflictCourses = conflict.courses || conflict.ScheduledCourses || [];\r\n            \r\n            return (\r\n              <Grid item xs={12} key={conflict.conflict_id}>\r\n                <Paper \r\n                  elevation={1} \r\n                  sx={{ \r\n                    p: 2, \r\n                    borderLeft: 4, \r\n                    borderColor: conflict.is_resolved ? 'success.main' : 'warning.main'\r\n                  }}\r\n                >\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                    <Box>\r\n                      <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>\r\n                        {conflict.conflict_type}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {conflict.description}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\">\r\n                        Time: {conflict.day_of_week}, {conflict.time_slot?.name || 'Unknown time slot'}\r\n                      </Typography>\r\n                      \r\n                      {conflictCourses.length > 0 && (\r\n                        <Box sx={{ mt: 1 }}>\r\n                          <Typography variant=\"body2\" sx={{ fontWeight: 'medium' }}>\r\n                            Affected Courses:\r\n                          </Typography>\r\n                          {conflictCourses.map((course: any) => {\r\n                            // Extract course data which might be nested\r\n                            const courseData = course.Course || course;\r\n                            const professorData = course.Professor || course.professor || {};\r\n                            const professorName = `${professorData.first_name || ''} ${professorData.last_name || ''}`.trim() || 'TBA';\r\n                            const courseName = courseData.course_name || course.course_name || 'Unknown Course';\r\n                            \r\n                            return (\r\n                              <Typography key={course.scheduled_course_id} variant=\"body2\" sx={{ ml: 2 }}>\r\n                                • {courseName} (Prof. {professorName})\r\n                              </Typography>\r\n                            );\r\n                          })}\r\n                        </Box>\r\n                      )}\r\n                      \r\n                      {conflict.is_resolved && (\r\n                        <Box sx={{ mt: 1, p: 1, bgcolor: 'success.light', borderRadius: 1 }}>\r\n                          <Typography variant=\"body2\" color=\"success.contrastText\">\r\n                            <strong>Resolution:</strong> {conflict.resolution_notes}\r\n                          </Typography>\r\n                        </Box>\r\n                      )}\r\n                    </Box>\r\n                    \r\n                    {!conflict.is_resolved && (\r\n                      <Box>\r\n                        <Button \r\n                          variant=\"outlined\" \r\n                          color=\"primary\" \r\n                          size=\"small\" \r\n                          onClick={() => handleOverrideConflict(conflict.conflict_id)}\r\n                          sx={{ mr: 1 }}\r\n                        >\r\n                          Override\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          onClick={() => handleAcceptConflict(conflict.conflict_id)}\r\n                        >\r\n                          Accept\r\n                        </Button>\r\n                      </Box>\r\n                    )}\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Main render\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\">\r\n      <Box sx={{ mt: 4, mb: 4 }}>\r\n        {/* Header */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n          <Typography variant=\"h4\" component=\"h1\">\r\n            Schedule\r\n          </Typography>\r\n          <Box>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={handleRefresh}\r\n              sx={{ mr: 2 }}\r\n            >\r\n              Refresh\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              startIcon={<GetAppIcon />}\r\n              onClick={handleExport}\r\n              sx={{ mr: 2 }}\r\n            >\r\n              Export\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<AddIcon />}\r\n              onClick={handleCreateSchedule}\r\n            >\r\n              Generate New Schedule\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n        \r\n        {/* Error Alert */}\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n            <AlertTitle>Error</AlertTitle>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Filters */}\r\n        <Card sx={{ mb: 4 }}>\r\n          <CardContent>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n              {/* Semester Selector */}\r\n              <Grid item xs={12} md={2.4}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                  <InputLabel id=\"semester-select-label\">Semester</InputLabel>\r\n                  <Select\r\n                    labelId=\"semester-select-label\"\r\n                    value={selectedSemester}\r\n                    onChange={handleSemesterChange}\r\n                    label=\"Semester\"\r\n                  >\r\n                    {semesters.map((semester: any) => (\r\n                      <MenuItem key={semester.semester_id} value={semester.semester_id}>\r\n                        {semester.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              {/* Schedule Selector */}\r\n              <Grid item xs={12} md={2.4}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                  <InputLabel id=\"schedule-select-label\">Schedule</InputLabel>\r\n                  <Select\r\n                    labelId=\"schedule-select-label\"\r\n                    value={selectedScheduleId}\r\n                    onChange={handleScheduleChange}\r\n                    label=\"Schedule\"\r\n                    disabled={availableSchedules.length === 0}\r\n                  >\r\n                    {availableSchedules.map((schedule) => (\r\n                      <MenuItem key={schedule.schedule_id} value={schedule.schedule_id}>\r\n                        {schedule.name} {schedule.is_final ? '(Final)' : ''}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              {/* Department Selector */}\r\n              <Grid item xs={12} md={2.4}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                  <InputLabel id=\"department-select-label\">Department</InputLabel>\r\n                  <Select\r\n                    labelId=\"department-select-label\"\r\n                    value={selectedDepartment}\r\n                    onChange={handleDepartmentChange}\r\n                    label=\"Department\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>All Departments</em>\r\n                    </MenuItem>\r\n                    {departments.map((department) => (\r\n                      <MenuItem key={department.department_id} value={department.department_id}>\r\n                        {department.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              {/* Program Selector */}\r\n              <Grid item xs={12} md={2.4}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                  <InputLabel id=\"program-select-label\">Program</InputLabel>\r\n                  <Select\r\n                    labelId=\"program-select-label\"\r\n                    value={selectedProgram}\r\n                    onChange={handleProgramChange}\r\n                    label=\"Program\"\r\n                    disabled={!selectedDepartment}\r\n                  >\r\n                    <MenuItem value=\"all\">\r\n                      <em>All Programs</em>\r\n                    </MenuItem>\r\n                    {programs\r\n                      .filter(program => !selectedDepartment || program.department_id === selectedDepartment)\r\n                      .map((program) => (\r\n                        <MenuItem key={program.program_id} value={program.program_id}>\r\n                          {program.name}\r\n                        </MenuItem>\r\n                      ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              {/* Search Field */}\r\n              <Grid item xs={12} md={2.4}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Search\"\r\n                  variant=\"outlined\"\r\n                  value={searchTerm}\r\n                  onChange={handleSearchChange}\r\n                  placeholder=\"Search courses\"\r\n                  InputProps={{\r\n                    endAdornment: <SearchIcon color=\"action\" />\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        {/* View Mode Tabs */}\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\r\n          <Tabs value={viewMode} onChange={handleViewModeChange}>\r\n            <Tab label=\"Week View\" value=\"week\" />\r\n            <Tab label=\"Day View\" value=\"day\" />\r\n          </Tabs>\r\n        </Box>\r\n\r\n        {/* Day Selection Tabs (for Day View) */}\r\n        {viewMode === 'day' && (\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\r\n            <Tabs value={currentDay} onChange={handleDayChange}>\r\n              {daysOfWeek.map((day, index) => (\r\n                <Tab key={day} label={day} value={index} />\r\n              ))}\r\n            </Tabs>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Schedule Display */}\r\n        {viewMode === 'week' ? renderWeekView() : renderDayView()}\r\n\r\n        {/* Conflicts */}\r\n        {renderConflicts()}\r\n\r\n        {/* Legend */}\r\n        <Box sx={{ mt: 3, display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', mr: 3, mb: 1 }}>\r\n            <Box sx={{ width: 16, height: 16, bgcolor: 'rgba(25, 118, 210, 0.8)', mr: 1, borderRadius: 1 }} />\r\n            <Typography variant=\"caption\">Core Course</Typography>\r\n          </Box>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', mr: 3, mb: 1 }}>\r\n            <Box sx={{ width: 16, height: 16, bgcolor: 'rgba(76, 175, 80, 0.8)', mr: 1, borderRadius: 1 }} />\r\n            <Typography variant=\"caption\">Elective Course</Typography>\r\n          </Box>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', mr: 3, mb: 1 }}>\r\n            <Box sx={{ width: 16, height: 16, bgcolor: 'rgba(255, 152, 0, 0.8)', mr: 1, borderRadius: 1 }} />\r\n            <Typography variant=\"caption\">Overridden Course</Typography>\r\n          </Box>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n            <WarningIcon sx={{ color: 'orange', fontSize: 16, mr: 1 }} />\r\n            <Typography variant=\"caption\">Scheduling Conflict</Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Generate Schedule Dialog */}\r\n      {showGenerateForm && (\r\n        <Dialog open={showGenerateForm} onClose={() => setShowGenerateForm(false)} maxWidth=\"md\" fullWidth>\r\n          <DialogTitle>Generate New Schedule</DialogTitle>\r\n          <DialogContent>\r\n            <GenerateSchedule \r\n              onScheduleGenerated={handleScheduleGenerated} \r\n              onClose={() => setShowGenerateForm(false)}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setShowGenerateForm(false)}>Cancel</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ScheduleView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}