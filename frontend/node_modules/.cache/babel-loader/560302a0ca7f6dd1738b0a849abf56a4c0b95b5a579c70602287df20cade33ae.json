{"ast":null,"code":"var _jsxFileName = \"/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/schedule/ConflictManagement.tsx\",\n  _s = $RefreshSig$();\n// src/components/admin/schedule/ConflictManagement.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, Typography, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Chip, Button, ButtonGroup, CircularProgress, Alert, Snackbar, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, FormControl, InputLabel, MenuItem, Select, FormHelperText } from '@mui/material';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport RestoreIcon from '@mui/icons-material/Restore';\nimport scheduleService from '../../../services/scheduleService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConflictManagement = ({\n  scheduleId,\n  onConflictResolved\n}) => {\n  _s();\n  var _selectedConflict$sch2, _selectedConflict$sch3, _selectedCourseInfo$t, _selectedCourseInfo$t2;\n  const [conflicts, setConflicts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [resolving, setResolving] = useState(null);\n  const [selectedConflict, setSelectedConflict] = useState(null);\n  const [resolutionNotes, setResolutionNotes] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [resolutionType, setResolutionType] = useState('ACCEPT');\n  const [selectedCourseToMove, setSelectedCourseToMove] = useState('');\n  const [selectedNewTimeSlot, setSelectedNewTimeSlot] = useState('');\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n  const [loadingTimeSlots, setLoadingTimeSlots] = useState(false);\n  const [selectedDay, setSelectedDay] = useState('');\n  const DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n\n  // Fetch conflicts when scheduleId changes\n  useEffect(() => {\n    if (conflicts.length > 0) {\n      console.log('First conflict data:', conflicts[0]);\n      console.log('Time slot info:', conflicts[0].timeslot_info);\n      console.log('Direct time slot:', conflicts[0].timeslot);\n      console.log('Scheduled courses:', conflicts[0].scheduled_courses);\n    }\n  }, [conflicts]);\n  useEffect(() => {\n    console.log(\"ConflictManagement received scheduleId:\", scheduleId);\n    const fetchConflicts = async () => {\n      if (!scheduleId) return;\n      try {\n        setLoading(true);\n        console.log(\"Fetching conflicts for schedule ID:\", scheduleId);\n        const data = await scheduleService.getScheduleConflicts(scheduleId);\n        console.log('Fetched conflicts:', data);\n        setConflicts(data);\n      } catch (error) {\n        console.error('Error fetching conflicts:', error);\n        setSnackbar({\n          open: true,\n          message: 'Failed to load conflicts',\n          severity: 'error'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (scheduleId) {\n      fetchConflicts();\n    } else {\n      setConflicts([]);\n      setLoading(false);\n    }\n  }, [scheduleId]);\n  const handleResolveClick = (conflict, type) => {\n    setSelectedConflict(conflict);\n    setResolutionType(type);\n    setSelectedCourseToMove('');\n    setSelectedNewTimeSlot('');\n\n    // Set default resolution notes based on type\n    setResolutionNotes(type === 'ACCEPT' ? 'Conflict accepted as is.' : 'Schedule will be modified to resolve this conflict.');\n\n    // If override, fetch available time slots\n    if (type === 'OVERRIDE') {\n      fetchAvailableTimeSlots();\n    }\n    setDialogOpen(true);\n  };\n  const handleRevertClick = conflict => {\n    setSelectedConflict(conflict);\n    setResolutionType('REVERT');\n    setResolutionNotes('Reverting previously resolved conflict for reconsideration.');\n    setDialogOpen(true);\n  };\n  const handleResolveConflict = async () => {\n    if (!selectedConflict) return;\n    try {\n      setResolving(selectedConflict.conflict_id);\n      if (resolutionType === 'REVERT') {\n        // Reverting a previously resolved conflict\n        await scheduleService.revertConflictResolution(selectedConflict.conflict_id, {\n          is_resolved: false,\n          resolution_notes: resolutionNotes\n        });\n\n        // Update local state\n        setConflicts(conflicts.map(conflict => conflict.conflict_id === selectedConflict.conflict_id ? {\n          ...conflict,\n          is_resolved: false,\n          resolution_notes: resolutionNotes\n        } : conflict));\n        setSnackbar({\n          open: true,\n          message: 'Conflict resolution reverted successfully',\n          severity: 'success'\n        });\n      } else {\n        // Regular resolution (Accept or Override)\n        const resolutionData = {\n          is_resolved: true,\n          resolution_notes: resolutionNotes,\n          action: resolutionType\n        };\n\n        // For override, include course and timeslot info\n        if (resolutionType === 'OVERRIDE' && selectedCourseToMove && selectedNewTimeSlot) {\n          resolutionData.scheduled_course_id = selectedCourseToMove;\n          resolutionData.new_timeslot_id = selectedNewTimeSlot;\n        }\n        await scheduleService.resolveConflict(selectedConflict.conflict_id, resolutionData);\n\n        // Update local state\n        setConflicts(conflicts.map(conflict => conflict.conflict_id === selectedConflict.conflict_id ? {\n          ...conflict,\n          is_resolved: true,\n          resolution_notes: resolutionNotes\n        } : conflict));\n        setSnackbar({\n          open: true,\n          message: `Conflict ${resolutionType === 'ACCEPT' ? 'accepted' : 'overridden'} successfully`,\n          severity: 'success'\n        });\n      }\n      if (onConflictResolved) {\n        onConflictResolved();\n      }\n    } catch (error) {\n      console.error('Error processing conflict:', error);\n      setSnackbar({\n        open: true,\n        message: `Failed to ${resolutionType === 'REVERT' ? 'revert' : 'resolve'} conflict`,\n        severity: 'error'\n      });\n    } finally {\n      setResolving(null);\n      setDialogOpen(false);\n      setSelectedCourseToMove('');\n      setSelectedNewTimeSlot('');\n    }\n  };\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setSelectedConflict(null);\n    setResolutionNotes('');\n    setSelectedCourseToMove('');\n    setSelectedNewTimeSlot('');\n    setSelectedDay(''); // Reset selected day\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar({\n      ...snackbar,\n      open: false\n    });\n  };\n  const getConflictSeverity = type => {\n    switch (type) {\n      case 'TIME_SLOT_CONFLICT':\n        return 'error';\n      case 'PROFESSOR_CONFLICT':\n        return 'error';\n      case 'MANUAL_OVERRIDE_CONFLICT':\n        return 'warning';\n      case 'NO_AVAILABLE_SLOT':\n        return 'warning';\n      default:\n        return 'info';\n    }\n  };\n  const getConflictIcon = (type, isResolved) => {\n    if (isResolved) {\n      return /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n        color: \"success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 14\n      }, this);\n    }\n    const severity = getConflictSeverity(type);\n    return severity === 'error' ? /*#__PURE__*/_jsxDEV(ErrorIcon, {\n      color: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(WarningIcon, {\n      color: \"warning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this);\n  };\n  const getReadableConflictType = type => {\n    switch (type) {\n      case 'TIME_SLOT_CONFLICT':\n        return 'Time Slot Conflict';\n      case 'PROFESSOR_CONFLICT':\n        return 'Professor Conflict';\n      case 'MANUAL_OVERRIDE_CONFLICT':\n        return 'Manual Override Conflict';\n      case 'NO_AVAILABLE_SLOT':\n        return 'No Available Slot';\n      default:\n        return type.replace(/_/g, ' ');\n    }\n  };\n  const fetchAvailableTimeSlots = async () => {\n    try {\n      setLoadingTimeSlots(true);\n      const timeSlots = await scheduleService.getAllTimeSlots();\n      setAvailableTimeSlots(timeSlots);\n    } catch (error) {\n      console.error('Error fetching time slots:', error);\n      setSnackbar({\n        open: true,\n        message: 'Failed to load time slots',\n        severity: 'error'\n      });\n    } finally {\n      setLoadingTimeSlots(false);\n    }\n  };\n  const formatTime = timeString => {\n    if (!timeString) return 'N/A';\n    try {\n      const date = new Date(`1970-01-01T${timeString}`);\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    } catch (error) {\n      console.error('Error formatting time:', error);\n      return timeString.substring(0, 5); // Just return HH:MM as fallback\n    }\n  };\n  const getTimeSlotInfo = conflict => {\n    // Check if we have time_slot (note: this is the property name shown in your data)\n    if (conflict.time_slot) {\n      return {\n        day: conflict.day_of_week || conflict.time_slot.day_of_week || 'Unknown',\n        name: conflict.time_slot.name || 'Unknown Slot',\n        timeRange: `${conflict.time_slot.start_time.substring(0, 5)} - ${conflict.time_slot.end_time.substring(0, 5)}`\n      };\n    }\n\n    // If we at least have a day_of_week in the conflict\n    if (conflict.day_of_week) {\n      return {\n        day: conflict.day_of_week,\n        name: conflict.timeslot_id ? `Time Slot ${conflict.timeslot_id.replace(/[^0-9]/g, '')}` : 'Unknown Slot',\n        timeRange: 'Time not available'\n      };\n    }\n\n    // Fallback for no information\n    return {\n      day: 'Unknown',\n      name: 'Unknown Slot',\n      timeRange: 'Time not available'\n    };\n  };\n\n  // Updated getFilteredTimeSlots function to work with the actual data structure\n  // Function to calculate duration in minutes from start and end times\n  const calculateDuration = (startTime, endTime) => {\n    const start = new Date(`1970-01-01T${startTime}`);\n    const end = new Date(`1970-01-01T${endTime}`);\n    return (end.getTime() - start.getTime()) / (1000 * 60); // Convert ms to minutes\n  };\n\n  // Updated function to filter time slots based on day and calculated duration\n  const getFilteredTimeSlots = (day, courseToMove) => {\n    if (!selectedConflict || !selectedConflict.scheduled_courses || !day) return [];\n\n    // Simple filter by day only - no duration filtering\n    return availableTimeSlots.filter(slot => slot.day_of_week === day);\n  };\n\n  // Prepare filtered time slots based on selections\n  const filteredTimeSlots = selectedDay && selectedCourseToMove ? getFilteredTimeSlots(selectedDay, selectedCourseToMove) : [];\n  const hasNoCompatibleSlots = Boolean(selectedDay && selectedCourseToMove && filteredTimeSlots.length === 0);\n\n  // Updated getSelectedCourseInfo to work with the actual data structure\n  const getSelectedCourseInfo = () => {\n    var _selectedConflict$sch;\n    if (!selectedConflict || !selectedCourseToMove) return null;\n    return (_selectedConflict$sch = selectedConflict.scheduled_courses) === null || _selectedConflict$sch === void 0 ? void 0 : _selectedConflict$sch.find(course => course.scheduled_course_id === selectedCourseToMove);\n  };\n  const selectedCourseInfo = getSelectedCourseInfo();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Conflict Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this) : !scheduleId ? /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"info\",\n        sx: {\n          mt: 2\n        },\n        children: \"Select a schedule to view conflicts.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this) : conflicts.length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mt: 2\n        },\n        children: \"0 conflicts found for this schedule.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [conflicts.filter(c => !c.is_resolved).length, \" unresolved conflicts out of \", conflicts.length, \" total conflicts\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  width: \"3%\",\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  width: \"5%\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  width: \"15%\",\n                  children: \"Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  width: \"15%\",\n                  children: \"Day & Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 403,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  width: \"15%\",\n                  children: \"Resolution\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  width: \"20%\",\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: conflicts.map((conflict, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  bgcolor: conflict.is_resolved ? '#f9f9f9' : 'inherit'\n                },\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: index + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: getConflictIcon(conflict.conflict_type, conflict.is_resolved)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(Chip, {\n                    label: getReadableConflictType(conflict.conflict_type),\n                    color: getConflictSeverity(conflict.conflict_type),\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: (() => {\n                    // Try to get time slot info from multiple places, in order of preference\n                    let timeSlotInfo = conflict.time_slot || conflict.timeslot_info || conflict.timeslot;\n\n                    // If no direct time slot info, check scheduled courses\n                    if (!timeSlotInfo && conflict.scheduled_courses && conflict.scheduled_courses.length > 0) {\n                      const firstCourse = conflict.scheduled_courses[0];\n                      timeSlotInfo = firstCourse.timeslot;\n                    }\n\n                    // Add this debug code right before the main return statement (before the <Card> element)\n                    console.log('Debug Info:');\n                    console.log('Selected course to move:', selectedCourseToMove);\n                    console.log('Selected day:', selectedDay);\n                    console.log('Selected time slot:', selectedNewTimeSlot);\n                    console.log('Available time slots:', availableTimeSlots.length);\n                    if (selectedDay && selectedCourseToMove) {\n                      const filtered = getFilteredTimeSlots(selectedDay, selectedCourseToMove);\n                      console.log('Filtered time slots:', filtered.length, filtered.map(s => s.name));\n\n                      // Check if hasNoCompatibleSlots is calculated correctly\n                      console.log('Has no compatible slots?', filtered.length === 0);\n                    }\n                    if (timeSlotInfo) {\n                      return /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(Typography, {\n                          variant: \"body2\",\n                          fontWeight: \"medium\",\n                          children: conflict.day_of_week || timeSlotInfo.day_of_week || 'Unknown'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 451,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                          variant: \"caption\",\n                          display: \"block\",\n                          children: timeSlotInfo.name || 'Unknown Slot'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 454,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                          variant: \"caption\",\n                          color: \"text.secondary\",\n                          display: \"block\",\n                          children: timeSlotInfo.start_time && timeSlotInfo.end_time ? `${timeSlotInfo.start_time.substring(0, 5)} - ${timeSlotInfo.end_time.substring(0, 5)}` : 'Time not available'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 457,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true);\n                    } else {\n                      // For conflicts with NO_AVAILABLE_SLOT type, show just the day\n                      if (conflict.conflict_type === 'NO_AVAILABLE_SLOT') {\n                        return /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: /*#__PURE__*/_jsxDEV(Typography, {\n                            variant: \"body2\",\n                            fontWeight: \"medium\",\n                            children: conflict.day_of_week || 'Unknown'\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 469,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false);\n                      }\n                      return /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          variant: \"body2\",\n                          fontWeight: \"medium\",\n                          children: conflict.day_of_week || 'Unknown'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 478,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false);\n                    }\n                  })()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: conflict.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 487,\n                    columnNumber: 25\n                  }, this), conflict.scheduled_courses && conflict.scheduled_courses.length > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    display: \"block\",\n                    sx: {\n                      mt: 1\n                    },\n                    children: [\"Involves: \", conflict.scheduled_courses.map(sc => sc.course_name || sc.course_id).join(\", \")]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 491,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: conflict.is_resolved ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(Chip, {\n                      label: \"Resolved\",\n                      color: \"success\",\n                      size: \"small\",\n                      sx: {\n                        mb: 1\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 499,\n                      columnNumber: 29\n                    }, this), conflict.resolution_notes && /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      display: \"block\",\n                      children: conflict.resolution_notes\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 506,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(Chip, {\n                    label: \"Unresolved\",\n                    color: \"default\",\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 512,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: conflict.is_resolved ?\n                  /*#__PURE__*/\n                  // Show Revert button for resolved conflicts\n                  _jsxDEV(Button, {\n                    variant: \"outlined\",\n                    size: \"small\",\n                    color: \"warning\",\n                    onClick: () => handleRevertClick(conflict),\n                    disabled: !!resolving,\n                    startIcon: /*#__PURE__*/_jsxDEV(RestoreIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 528,\n                      columnNumber: 40\n                    }, this),\n                    sx: {\n                      mt: 1\n                    },\n                    children: resolving === conflict.conflict_id && resolutionType === 'REVERT' ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                      size: 16\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 532,\n                      columnNumber: 31\n                    }, this) : 'Undo'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 27\n                  }, this) :\n                  /*#__PURE__*/\n                  // Show Accept/Override buttons for unresolved conflicts\n                  _jsxDEV(ButtonGroup, {\n                    size: \"small\",\n                    variant: \"outlined\",\n                    orientation: \"vertical\",\n                    sx: {\n                      width: '100%'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Button, {\n                      color: \"primary\",\n                      onClick: () => handleResolveClick(conflict, 'ACCEPT'),\n                      disabled: !!resolving,\n                      startIcon: /*#__PURE__*/_jsxDEV(ThumbUpIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 544,\n                        columnNumber: 42\n                      }, this),\n                      sx: {\n                        mb: 1\n                      },\n                      children: resolving === conflict.conflict_id && resolutionType === 'ACCEPT' ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                        size: 16\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 548,\n                        columnNumber: 33\n                      }, this) : 'Accept'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 540,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      color: \"secondary\",\n                      onClick: () => handleResolveClick(conflict, 'OVERRIDE'),\n                      disabled: !!resolving,\n                      startIcon: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 557,\n                        columnNumber: 42\n                      }, this),\n                      children: resolving === conflict.conflict_id && resolutionType === 'OVERRIDE' ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                        size: 16\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 560,\n                        columnNumber: 33\n                      }, this) : 'Override'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 553,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 539,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 519,\n                  columnNumber: 23\n                }, this)]\n              }, conflict.conflict_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: dialogOpen,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: resolutionType === 'ACCEPT' ? 'Accept Conflict' : resolutionType === 'OVERRIDE' ? 'Override Conflict' : 'Revert Resolution'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          sx: {\n            mb: 2\n          },\n          children: selectedConflict === null || selectedConflict === void 0 ? void 0 : selectedConflict.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 11\n        }, this), selectedConflict && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            p: 2,\n            bgcolor: '#f5f5f5',\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            gutterBottom: true,\n            children: \"Conflict Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Day:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 17\n            }, this), \" \", (() => {\n              const timeInfo = selectedConflict ? getTimeSlotInfo(selectedConflict) : {\n                day: 'N/A',\n                name: 'N/A',\n                timeRange: 'N/A'\n              };\n              return timeInfo.day;\n            })()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Time Slot:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 17\n            }, this), \" \", (() => {\n              const timeInfo = selectedConflict ? getTimeSlotInfo(selectedConflict) : {\n                day: 'N/A',\n                name: 'N/A',\n                timeRange: 'N/A'\n              };\n              return `${timeInfo.name} (${timeInfo.timeRange})`;\n            })()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 17\n            }, this), \" \", getReadableConflictType(selectedConflict.conflict_type)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle2\",\n          gutterBottom: true,\n          children: \"Conflicting Courses:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: selectedConflict === null || selectedConflict === void 0 ? void 0 : (_selectedConflict$sch2 = selectedConflict.scheduled_courses) === null || _selectedConflict$sch2 === void 0 ? void 0 : _selectedConflict$sch2.map(course => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 1,\n              p: 1,\n              border: '1px solid #eee',\n              borderRadius: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              fontWeight: \"bold\",\n              children: [course.course_id, \" - \", course.course_name || 'Unknown Course']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              display: \"block\",\n              children: [\"Professor: \", course.professor_name || 'Unknown Professor']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 17\n            }, this), course.timeslot && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              display: \"block\",\n              children: [\"Scheduled: \", course.timeslot.day_of_week || course.day_of_week || 'Unknown Day', \",\", formatTime(course.timeslot.start_time), \" - \", formatTime(course.timeslot.end_time)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 19\n            }, this)]\n          }, course.scheduled_course_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 11\n        }, this), resolutionType === 'OVERRIDE' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mt: 2,\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"course-select-label\",\n              children: \"Select course to move\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"course-select-label\",\n              value: selectedCourseToMove,\n              onChange: e => {\n                setSelectedCourseToMove(e.target.value);\n                setSelectedNewTimeSlot(''); // Reset time slot when course changes\n              },\n              label: \"Select course to move\",\n              children: selectedConflict === null || selectedConflict === void 0 ? void 0 : (_selectedConflict$sch3 = selectedConflict.scheduled_courses) === null || _selectedConflict$sch3 === void 0 ? void 0 : _selectedConflict$sch3.map(course => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: course.scheduled_course_id,\n                children: [course.course_id, \" - \", course.course_name || 'Unknown Course']\n              }, course.scheduled_course_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 652,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mt: 2,\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"day-select-label\",\n              children: \"Select day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"day-select-label\",\n              value: selectedDay,\n              onChange: e => {\n                setSelectedDay(e.target.value);\n                setSelectedNewTimeSlot(''); // Reset time slot when day changes\n              },\n              label: \"Select day\",\n              disabled: loadingTimeSlots || !selectedCourseToMove,\n              children: loadingTimeSlots ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 20,\n                  sx: {\n                    mr: 1\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 675,\n                  columnNumber: 23\n                }, this), \" Loading days...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 21\n              }, this) : DAYS_OF_WEEK.map(day => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: day,\n                children: day\n              }, day, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mt: 2,\n              mb: 2\n            },\n            disabled: !selectedDay || !selectedCourseToMove || loadingTimeSlots,\n            error: hasNoCompatibleSlots,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"timeslot-select-label\",\n              children: \"Select time slot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"timeslot-select-label\",\n              value: selectedNewTimeSlot,\n              onChange: e => setSelectedNewTimeSlot(e.target.value),\n              label: \"Select time slot\",\n              children: loadingTimeSlots ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 20,\n                  sx: {\n                    mr: 1\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 703,\n                  columnNumber: 23\n                }, this), \" Loading time slots...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 21\n              }, this) : hasNoCompatibleSlots ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                disabled: true,\n                children: \"No compatible time slots available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 21\n              }, this) : filteredTimeSlots.map(slot => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: slot.timeslot_id,\n                children: [slot.name, \" (\", slot.start_time.substring(0, 5), \" - \", slot.end_time.substring(0, 5), \")\"]\n              }, slot.timeslot_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 711,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 17\n            }, this), selectedDay && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: hasNoCompatibleSlots ? `No time slots available on ${selectedDay} with compatible duration` : selectedCourseInfo !== null && selectedCourseInfo !== void 0 && (_selectedCourseInfo$t = selectedCourseInfo.timeslot) !== null && _selectedCourseInfo$t !== void 0 && _selectedCourseInfo$t.start_time && selectedCourseInfo !== null && selectedCourseInfo !== void 0 && (_selectedCourseInfo$t2 = selectedCourseInfo.timeslot) !== null && _selectedCourseInfo$t2 !== void 0 && _selectedCourseInfo$t2.end_time ? `Showing time slots with similar duration (${calculateDuration(selectedCourseInfo.timeslot.start_time, selectedCourseInfo.timeslot.end_time)} minutes)` : `Select a time slot for this course`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 3\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(TextField, {\n          autoFocus: true,\n          label: \"Resolution Notes\",\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          value: resolutionNotes,\n          onChange: e => setResolutionNotes(e.target.value),\n          placeholder: resolutionType === 'ACCEPT' ? \"Explain why this conflict is acceptable (e.g., temporary situation, special arrangement)\" : resolutionType === 'OVERRIDE' ? \"Explain how this conflict should be overridden (e.g., move to a different time slot, assign different professor)\" : \"Explain why you're reverting the previous resolution\",\n          sx: {\n            mt: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseDialog,\n          color: \"inherit\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleResolveConflict,\n          color: resolutionType === 'ACCEPT' ? 'primary' : resolutionType === 'OVERRIDE' ? 'secondary' : 'warning',\n          disabled: !resolutionNotes.trim() || resolutionType === 'OVERRIDE' && (!selectedCourseToMove || !selectedNewTimeSlot),\n          startIcon: resolutionType === 'ACCEPT' ? /*#__PURE__*/_jsxDEV(ThumbUpIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 45\n          }, this) : resolutionType === 'OVERRIDE' ? /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 47\n          }, this) : /*#__PURE__*/_jsxDEV(RestoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 15\n          }, this),\n          children: resolving ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 15\n          }, this) : resolutionType === 'ACCEPT' ? 'Accept Conflict' : resolutionType === 'OVERRIDE' ? 'Override Conflict' : 'Undo Resolution'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnackbar,\n        severity: snackbar.severity,\n        sx: {\n          width: '100%'\n        },\n        children: snackbar.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 5\n  }, this);\n};\n_s(ConflictManagement, \"F53lYo9yDrib4x/+YXzyY43fAeA=\");\n_c = ConflictManagement;\nexport default ConflictManagement;\nvar _c;\n$RefreshReg$(_c, \"ConflictManagement\");","map":{"version":3,"names":["React","useState","useEffect","Box","Card","CardContent","Typography","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Chip","Button","ButtonGroup","CircularProgress","Alert","Snackbar","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","TextField","FormControl","InputLabel","MenuItem","Select","FormHelperText","WarningIcon","CheckCircleIcon","ErrorIcon","ThumbUpIcon","SettingsIcon","RestoreIcon","scheduleService","jsxDEV","_jsxDEV","Fragment","_Fragment","ConflictManagement","scheduleId","onConflictResolved","_s","_selectedConflict$sch2","_selectedConflict$sch3","_selectedCourseInfo$t","_selectedCourseInfo$t2","conflicts","setConflicts","loading","setLoading","resolving","setResolving","selectedConflict","setSelectedConflict","resolutionNotes","setResolutionNotes","dialogOpen","setDialogOpen","resolutionType","setResolutionType","selectedCourseToMove","setSelectedCourseToMove","selectedNewTimeSlot","setSelectedNewTimeSlot","availableTimeSlots","setAvailableTimeSlots","loadingTimeSlots","setLoadingTimeSlots","selectedDay","setSelectedDay","DAYS_OF_WEEK","snackbar","setSnackbar","open","message","severity","length","console","log","timeslot_info","timeslot","scheduled_courses","fetchConflicts","data","getScheduleConflicts","error","handleResolveClick","conflict","type","fetchAvailableTimeSlots","handleRevertClick","handleResolveConflict","conflict_id","revertConflictResolution","is_resolved","resolution_notes","map","resolutionData","action","scheduled_course_id","new_timeslot_id","resolveConflict","handleCloseDialog","handleCloseSnackbar","getConflictSeverity","getConflictIcon","isResolved","color","fileName","_jsxFileName","lineNumber","columnNumber","getReadableConflictType","replace","timeSlots","getAllTimeSlots","formatTime","timeString","date","Date","toLocaleTimeString","hour","minute","hour12","substring","getTimeSlotInfo","time_slot","day","day_of_week","name","timeRange","start_time","end_time","timeslot_id","calculateDuration","startTime","endTime","start","end","getTime","getFilteredTimeSlots","courseToMove","filter","slot","filteredTimeSlots","hasNoCompatibleSlots","Boolean","getSelectedCourseInfo","_selectedConflict$sch","find","course","selectedCourseInfo","sx","mt","children","variant","gutterBottom","display","justifyContent","my","mb","c","component","width","index","bgcolor","conflict_type","label","size","timeSlotInfo","firstCourse","filtered","s","fontWeight","description","sc","course_name","course_id","join","onClick","disabled","startIcon","orientation","onClose","p","borderRadius","timeInfo","border","professor_name","fullWidth","id","labelId","value","onChange","e","target","mr","autoFocus","multiline","rows","placeholder","trim","autoHideDuration","anchorOrigin","vertical","horizontal","_c","$RefreshReg$"],"sources":["/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/schedule/ConflictManagement.tsx"],"sourcesContent":["// src/components/admin/schedule/ConflictManagement.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Button,\n  ButtonGroup,\n  CircularProgress,\n  Alert,\n  Snackbar,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  FormHelperText\n} from '@mui/material';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport RestoreIcon from '@mui/icons-material/Restore';\nimport scheduleService, { Conflict } from '../../../services/scheduleService';\n\ninterface ConflictManagementProps {\n  scheduleId?: string;\n  onConflictResolved?: () => void;\n}\n\nconst ConflictManagement: React.FC<ConflictManagementProps> = ({\n  scheduleId, onConflictResolved \n}) => {\n  const [conflicts, setConflicts] = useState<Conflict[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [resolving, setResolving] = useState<string | null>(null);\n  const [selectedConflict, setSelectedConflict] = useState<Conflict | null>(null);\n  const [resolutionNotes, setResolutionNotes] = useState<string>('');\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  type ResolutionType = 'ACCEPT' | 'OVERRIDE' | 'REVERT';\n  const [resolutionType, setResolutionType] = useState<ResolutionType>('ACCEPT');\n  const [selectedCourseToMove, setSelectedCourseToMove] = useState<string>('');\n  const [selectedNewTimeSlot, setSelectedNewTimeSlot] = useState<string>('');\n  const [availableTimeSlots, setAvailableTimeSlots] = useState<any[]>([]);\n  const [loadingTimeSlots, setLoadingTimeSlots] = useState<boolean>(false);\n  const [selectedDay, setSelectedDay] = useState<string>('');\n  const DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n\n  const [snackbar, setSnackbar] = useState<{\n    open: boolean;\n    message: string;\n    severity: 'success' | 'error' | 'info' | 'warning';\n  }>({ open: false, message: '', severity: 'info' });\n\n  // Fetch conflicts when scheduleId changes\n  useEffect(() => {\n    if (conflicts.length > 0) {\n      console.log('First conflict data:', conflicts[0]);\n      console.log('Time slot info:', conflicts[0].timeslot_info);\n      console.log('Direct time slot:', conflicts[0].timeslot);\n      console.log('Scheduled courses:', conflicts[0].scheduled_courses);\n    }\n  }, [conflicts]);\n\n  useEffect(() => {\n    console.log(\"ConflictManagement received scheduleId:\", scheduleId);\n    \n    const fetchConflicts = async () => {\n      if (!scheduleId) return;\n      \n      try {\n        setLoading(true);\n        console.log(\"Fetching conflicts for schedule ID:\", scheduleId);\n        const data = await scheduleService.getScheduleConflicts(scheduleId);\n        console.log('Fetched conflicts:', data);\n        setConflicts(data);\n      } catch (error) {\n        console.error('Error fetching conflicts:', error);\n        setSnackbar({\n          open: true,\n          message: 'Failed to load conflicts',\n          severity: 'error'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (scheduleId) {\n      fetchConflicts();\n    } else {\n      setConflicts([]);\n      setLoading(false);\n    }\n  }, [scheduleId]);\n\n  const handleResolveClick = (conflict: Conflict, type: 'ACCEPT' | 'OVERRIDE') => {\n    setSelectedConflict(conflict);\n    setResolutionType(type);\n    setSelectedCourseToMove('');\n    setSelectedNewTimeSlot('');\n    \n    // Set default resolution notes based on type\n    setResolutionNotes(type === 'ACCEPT'\n      ? 'Conflict accepted as is.'\n      : 'Schedule will be modified to resolve this conflict.');\n    \n    // If override, fetch available time slots\n    if (type === 'OVERRIDE') {\n      fetchAvailableTimeSlots();\n    }\n    \n    setDialogOpen(true);\n  };\n\n  const handleRevertClick = (conflict: Conflict) => {\n    setSelectedConflict(conflict);\n    setResolutionType('REVERT');\n    setResolutionNotes('Reverting previously resolved conflict for reconsideration.');\n    setDialogOpen(true);\n  };\n\n  const handleResolveConflict = async () => {\n    if (!selectedConflict) return;\n    \n    try {\n      setResolving(selectedConflict.conflict_id);\n      \n      if (resolutionType === 'REVERT') {\n        // Reverting a previously resolved conflict\n        await scheduleService.revertConflictResolution(\n          selectedConflict.conflict_id,\n          {\n            is_resolved: false,\n            resolution_notes: resolutionNotes\n          }\n        );\n        \n        // Update local state\n        setConflicts(conflicts.map(conflict =>\n          conflict.conflict_id === selectedConflict.conflict_id\n            ? { ...conflict, is_resolved: false, resolution_notes: resolutionNotes }\n            : conflict\n        ));\n        \n        setSnackbar({\n          open: true,\n          message: 'Conflict resolution reverted successfully',\n          severity: 'success'\n        });\n      } else {\n        // Regular resolution (Accept or Override)\n        const resolutionData: any = {\n          is_resolved: true,\n          resolution_notes: resolutionNotes,\n          action: resolutionType\n        };\n        \n        // For override, include course and timeslot info\n        if (resolutionType === 'OVERRIDE' && selectedCourseToMove && selectedNewTimeSlot) {\n          resolutionData.scheduled_course_id = selectedCourseToMove;\n          resolutionData.new_timeslot_id = selectedNewTimeSlot;\n        }\n        \n        await scheduleService.resolveConflict(\n          selectedConflict.conflict_id,\n          resolutionData\n        );\n        \n        // Update local state\n        setConflicts(conflicts.map(conflict =>\n          conflict.conflict_id === selectedConflict.conflict_id\n            ? { ...conflict, is_resolved: true, resolution_notes: resolutionNotes }\n            : conflict\n        ));\n        \n        setSnackbar({\n          open: true,\n          message: `Conflict ${resolutionType === 'ACCEPT' ? 'accepted' : 'overridden'} successfully`,\n          severity: 'success'\n        });\n      }\n      \n      if (onConflictResolved) {\n        onConflictResolved();\n      }\n    } catch (error) {\n      console.error('Error processing conflict:', error);\n      setSnackbar({\n        open: true,\n        message: `Failed to ${resolutionType === 'REVERT' ? 'revert' : 'resolve'} conflict`,\n        severity: 'error'\n      });\n    } finally {\n      setResolving(null);\n      setDialogOpen(false);\n      setSelectedCourseToMove('');\n      setSelectedNewTimeSlot('');\n    }\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setSelectedConflict(null);\n    setResolutionNotes('');\n    setSelectedCourseToMove('');\n    setSelectedNewTimeSlot('');\n    setSelectedDay(''); // Reset selected day\n  };\n\n  const handleCloseSnackbar = () => {\n    setSnackbar({ ...snackbar, open: false });\n  };\n\n  const getConflictSeverity = (type: string): 'error' | 'warning' | 'info' => {\n    switch (type) {\n      case 'TIME_SLOT_CONFLICT':\n        return 'error';\n      case 'PROFESSOR_CONFLICT':\n        return 'error';\n      case 'MANUAL_OVERRIDE_CONFLICT':\n        return 'warning';\n      case 'NO_AVAILABLE_SLOT':\n        return 'warning';\n      default:\n        return 'info';\n    }\n  };\n\n  const getConflictIcon = (type: string, isResolved: boolean) => {\n    if (isResolved) {\n      return <CheckCircleIcon color=\"success\" />;\n    }\n    \n    const severity = getConflictSeverity(type);\n    return severity === 'error'\n      ? <ErrorIcon color=\"error\" />\n      : <WarningIcon color=\"warning\" />;\n  };\n\n  const getReadableConflictType = (type: string) => {\n    switch (type) {\n      case 'TIME_SLOT_CONFLICT':\n        return 'Time Slot Conflict';\n      case 'PROFESSOR_CONFLICT':\n        return 'Professor Conflict';\n      case 'MANUAL_OVERRIDE_CONFLICT':\n        return 'Manual Override Conflict';\n      case 'NO_AVAILABLE_SLOT':\n        return 'No Available Slot';\n      default:\n        return type.replace(/_/g, ' ');\n    }\n  };\n\n  const fetchAvailableTimeSlots = async () => {\n    try {\n      setLoadingTimeSlots(true);\n      const timeSlots = await scheduleService.getAllTimeSlots();\n      setAvailableTimeSlots(timeSlots);\n    } catch (error) {\n      console.error('Error fetching time slots:', error);\n      setSnackbar({\n        open: true,\n        message: 'Failed to load time slots',\n        severity: 'error'\n      });\n    } finally {\n      setLoadingTimeSlots(false);\n    }\n  };\n\n  const formatTime = (timeString: string | undefined): string => {\n    if (!timeString) return 'N/A';\n    \n    try {\n      const date = new Date(`1970-01-01T${timeString}`);\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    } catch (error) {\n      console.error('Error formatting time:', error);\n      return timeString.substring(0, 5); // Just return HH:MM as fallback\n    }\n  };\n\n  const getTimeSlotInfo = (conflict: Conflict): { day: string, name: string, timeRange: string } => {\n    // Check if we have time_slot (note: this is the property name shown in your data)\n    if (conflict.time_slot) {\n      return {\n        day: conflict.day_of_week || conflict.time_slot.day_of_week || 'Unknown',\n        name: conflict.time_slot.name || 'Unknown Slot',\n        timeRange: `${conflict.time_slot.start_time.substring(0, 5)} - ${conflict.time_slot.end_time.substring(0, 5)}`\n      };\n    }\n    \n    // If we at least have a day_of_week in the conflict\n    if (conflict.day_of_week) {\n      return {\n        day: conflict.day_of_week,\n        name: conflict.timeslot_id ? `Time Slot ${conflict.timeslot_id.replace(/[^0-9]/g, '')}` : 'Unknown Slot',\n        timeRange: 'Time not available'\n      };\n    }\n    \n    // Fallback for no information\n    return {\n      day: 'Unknown',\n      name: 'Unknown Slot',\n      timeRange: 'Time not available'\n    };\n  };\n  \n  // Updated getFilteredTimeSlots function to work with the actual data structure\n  // Function to calculate duration in minutes from start and end times\nconst calculateDuration = (startTime: string, endTime: string): number => {\n  const start = new Date(`1970-01-01T${startTime}`);\n  const end = new Date(`1970-01-01T${endTime}`);\n  return (end.getTime() - start.getTime()) / (1000 * 60); // Convert ms to minutes\n};\n\n// Updated function to filter time slots based on day and calculated duration\nconst getFilteredTimeSlots = (day: string, courseToMove: string) => {\n  if (!selectedConflict || !selectedConflict.scheduled_courses || !day) return [];\n  \n  // Simple filter by day only - no duration filtering\n  return availableTimeSlots.filter(slot => \n    slot.day_of_week === day\n  );\n};\n\n  // Prepare filtered time slots based on selections\n  const filteredTimeSlots = (selectedDay && selectedCourseToMove) \n    ? getFilteredTimeSlots(selectedDay, selectedCourseToMove) \n    : [];\n  \n  const hasNoCompatibleSlots = Boolean(selectedDay && selectedCourseToMove && filteredTimeSlots.length === 0);\n  \n  // Updated getSelectedCourseInfo to work with the actual data structure\n  const getSelectedCourseInfo = () => {\n    if (!selectedConflict || !selectedCourseToMove) return null;\n    \n    return selectedConflict.scheduled_courses?.find(\n      course => course.scheduled_course_id === selectedCourseToMove\n    );\n  };\n    \n  \n  const selectedCourseInfo = getSelectedCourseInfo();\n\n  return (\n    <Card sx={{ mt: 4 }}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Conflict Management\n        </Typography>\n        \n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : !scheduleId ? (\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\n            Select a schedule to view conflicts.\n          </Alert>\n        ) : conflicts.length === 0 ? (\n          <Alert severity=\"success\" sx={{ mt: 2 }}>\n            0 conflicts found for this schedule.\n          </Alert>\n        ) : (\n          <>\n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {conflicts.filter(c => !c.is_resolved).length} unresolved conflicts out of {conflicts.length} total conflicts\n              </Typography>\n            </Box>\n            \n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell width=\"3%\">#</TableCell>\n                    <TableCell width=\"5%\">Status</TableCell>\n                    <TableCell width=\"15%\">Type</TableCell>\n                    <TableCell width=\"15%\">Day & Time</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell width=\"15%\">Resolution</TableCell>\n                    <TableCell width=\"20%\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {conflicts.map((conflict, index) => (\n                    <TableRow key={conflict.conflict_id} sx={{ bgcolor: conflict.is_resolved ? '#f9f9f9' : 'inherit' }}>\n                      <TableCell>{index + 1}</TableCell>\n                      <TableCell>\n                        {getConflictIcon(conflict.conflict_type, conflict.is_resolved)}\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={getReadableConflictType(conflict.conflict_type)}\n                          color={getConflictSeverity(conflict.conflict_type)}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {(() => {\n                          // Try to get time slot info from multiple places, in order of preference\n                          let timeSlotInfo = conflict.time_slot || conflict.timeslot_info || conflict.timeslot;\n                          \n                          // If no direct time slot info, check scheduled courses\n                          if (!timeSlotInfo && conflict.scheduled_courses && conflict.scheduled_courses.length > 0) {\n                            const firstCourse = conflict.scheduled_courses[0];\n                            timeSlotInfo = firstCourse.timeslot;\n                          }\n                          \n// Add this debug code right before the main return statement (before the <Card> element)\nconsole.log('Debug Info:');\nconsole.log('Selected course to move:', selectedCourseToMove);\nconsole.log('Selected day:', selectedDay);\nconsole.log('Selected time slot:', selectedNewTimeSlot);\nconsole.log('Available time slots:', availableTimeSlots.length);\nif (selectedDay && selectedCourseToMove) {\n  const filtered = getFilteredTimeSlots(selectedDay, selectedCourseToMove);\n  console.log('Filtered time slots:', filtered.length, filtered.map(s => s.name));\n  \n  // Check if hasNoCompatibleSlots is calculated correctly\n  console.log('Has no compatible slots?', filtered.length === 0);\n}\n                 \n                          if (timeSlotInfo) {\n                            return (\n                              <>\n                                <Typography variant=\"body2\" fontWeight=\"medium\">\n                                  {conflict.day_of_week || timeSlotInfo.day_of_week || 'Unknown'}\n                                </Typography>\n                                <Typography variant=\"caption\" display=\"block\">\n                                  {timeSlotInfo.name || 'Unknown Slot'}\n                                </Typography>\n                                <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                                  {timeSlotInfo.start_time && timeSlotInfo.end_time ?\n                                    `${timeSlotInfo.start_time.substring(0, 5)} - ${timeSlotInfo.end_time.substring(0, 5)}` :\n                                    'Time not available'}\n                                </Typography>\n                              </>\n                            );\n                          } else {\n                            // For conflicts with NO_AVAILABLE_SLOT type, show just the day\n                            if (conflict.conflict_type === 'NO_AVAILABLE_SLOT') {\n                              return (\n                                <>\n                                  <Typography variant=\"body2\" fontWeight=\"medium\">\n                                    {conflict.day_of_week || 'Unknown'}\n                                  </Typography>\n                                </>\n                              );\n                            }\n                            \n                            return (\n                              <>\n                                <Typography variant=\"body2\" fontWeight=\"medium\">\n                                  {conflict.day_of_week || 'Unknown'}\n                                </Typography>\n                              </>\n                            );\n                          }\n                        })()}\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {conflict.description}\n                        </Typography>\n                        {conflict.scheduled_courses && conflict.scheduled_courses.length > 0 && (\n                          <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\n                            Involves: {conflict.scheduled_courses.map(sc => sc.course_name || sc.course_id).join(\", \")}\n                          </Typography>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {conflict.is_resolved ? (\n                          <>\n                            <Chip\n                              label=\"Resolved\"\n                              color=\"success\"\n                              size=\"small\"\n                              sx={{ mb: 1 }}\n                            />\n                            {conflict.resolution_notes && (\n                              <Typography variant=\"caption\" display=\"block\">\n                                {conflict.resolution_notes}\n                              </Typography>\n                            )}\n                          </>\n                        ) : (\n                          <Chip\n                            label=\"Unresolved\"\n                            color=\"default\"\n                            size=\"small\"\n                          />\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {conflict.is_resolved ? (\n                          // Show Revert button for resolved conflicts\n                          <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            color=\"warning\"\n                            onClick={() => handleRevertClick(conflict)}\n                            disabled={!!resolving}\n                            startIcon={<RestoreIcon />}\n                            sx={{ mt: 1 }}\n                          >\n                            {resolving === conflict.conflict_id && resolutionType === 'REVERT' ? (\n                              <CircularProgress size={16} />\n                            ) : (\n                              'Undo'\n                            )}\n                          </Button>\n                        ) : (\n                          // Show Accept/Override buttons for unresolved conflicts\n                          <ButtonGroup size=\"small\" variant=\"outlined\" orientation=\"vertical\" sx={{ width: '100%' }}>\n                            <Button\n                              color=\"primary\"\n                              onClick={() => handleResolveClick(conflict, 'ACCEPT')}\n                              disabled={!!resolving}\n                              startIcon={<ThumbUpIcon />}\n                              sx={{ mb: 1 }}\n                            >\n                              {resolving === conflict.conflict_id && resolutionType === 'ACCEPT' ? (\n                                <CircularProgress size={16} />\n                              ) : (\n                                'Accept'\n                              )}\n                            </Button>\n                            <Button\n                              color=\"secondary\"\n                              onClick={() => handleResolveClick(conflict, 'OVERRIDE')}\n                              disabled={!!resolving}\n                              startIcon={<SettingsIcon />}\n                            >\n                              {resolving === conflict.conflict_id && resolutionType === 'OVERRIDE' ? (\n                                <CircularProgress size={16} />\n                              ) : (\n                                'Override'\n                              )}\n                            </Button>\n                          </ButtonGroup>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </>\n        )}\n      </CardContent>\n      \n      <Dialog open={dialogOpen} onClose={handleCloseDialog}>\n        <DialogTitle>\n          {resolutionType === 'ACCEPT' ? 'Accept Conflict' :\n           resolutionType === 'OVERRIDE' ? 'Override Conflict' :\n           'Revert Resolution'}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 2 }}>\n            {selectedConflict?.description}\n          </DialogContentText>\n        \n          {/* Display conflict time information */}\n          {selectedConflict && (\n            <Box sx={{ mb: 2, p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Conflict Details:\n              </Typography>\n              <Typography variant=\"body2\">\n                <strong>Day:</strong> {(() => {\n                  const timeInfo = selectedConflict ? getTimeSlotInfo(selectedConflict) : { day: 'N/A', name: 'N/A', timeRange: 'N/A' };\n                  return timeInfo.day;\n                })()}\n              </Typography>\n              <Typography variant=\"body2\">\n                <strong>Time Slot:</strong> {(() => {\n                  const timeInfo = selectedConflict ? getTimeSlotInfo(selectedConflict) : { day: 'N/A', name: 'N/A', timeRange: 'N/A' };\n                  return `${timeInfo.name} (${timeInfo.timeRange})`;\n                })()}\n              </Typography>\n              <Typography variant=\"body2\">\n                <strong>Type:</strong> {getReadableConflictType(selectedConflict.conflict_type)}\n              </Typography>\n            </Box>\n          )}\n        \n          {/* Show conflicting courses */}\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Conflicting Courses:\n          </Typography>\n          <Box sx={{ mb: 2 }}>\n            {selectedConflict?.scheduled_courses?.map(course => (\n              <Box key={course.scheduled_course_id} sx={{ mb: 1, p: 1, border: '1px solid #eee', borderRadius: 1 }}>\n                <Typography variant=\"body2\" fontWeight=\"bold\">\n                  {course.course_id} - {course.course_name || 'Unknown Course'}\n                </Typography>\n                <Typography variant=\"caption\" display=\"block\">\n                  Professor: {course.professor_name || 'Unknown Professor'}\n                </Typography>\n                {course.timeslot && (\n                  <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                    Scheduled: {course.timeslot.day_of_week || course.day_of_week || 'Unknown Day'},\n                    {formatTime(course.timeslot.start_time)} - {formatTime(course.timeslot.end_time)}\n                  </Typography>\n                )}\n                \n                \n              </Box>\n            ))}\n          </Box>\n          \n          {/* Course selection for override */}\n          {resolutionType === 'OVERRIDE' && (\n            <>\n              <FormControl fullWidth sx={{ mt: 2, mb: 2 }}>\n                <InputLabel id=\"course-select-label\">Select course to move</InputLabel>\n                <Select\n                  labelId=\"course-select-label\"\n                  value={selectedCourseToMove}\n                  onChange={(e) => {\n                    setSelectedCourseToMove(e.target.value);\n                    setSelectedNewTimeSlot(''); // Reset time slot when course changes\n                  }}\n                  label=\"Select course to move\"\n                >\n                  {selectedConflict?.scheduled_courses?.map(course => (\n                    <MenuItem key={course.scheduled_course_id} value={course.scheduled_course_id}>\n                      {course.course_id} - {course.course_name || 'Unknown Course'}\n                      \n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              \n              {/* Day selection dropdown */}\n              <FormControl fullWidth sx={{ mt: 2, mb: 2 }}>\n                <InputLabel id=\"day-select-label\">Select day</InputLabel>\n                <Select\n                  labelId=\"day-select-label\"\n                  value={selectedDay}\n                  onChange={(e) => {\n                    setSelectedDay(e.target.value);\n                    setSelectedNewTimeSlot(''); // Reset time slot when day changes\n                  }}\n                  label=\"Select day\"\n                  disabled={loadingTimeSlots || !selectedCourseToMove}\n                >\n                  {loadingTimeSlots ? (\n                    <MenuItem value=\"\">\n                      <CircularProgress size={20} sx={{ mr: 1 }} /> Loading days...\n                    </MenuItem>\n                  ) : (\n                    DAYS_OF_WEEK.map(day => (\n                      <MenuItem key={day} value={day}>\n                        {day}\n                      </MenuItem>\n                    ))\n                  )}\n                </Select>\n              </FormControl>\n              \n              {/* Time slot selection dropdown - now with duration filtering */}\n              <FormControl \n                fullWidth \n                sx={{ mt: 2, mb: 2 }} \n                disabled={!selectedDay || !selectedCourseToMove || loadingTimeSlots}\n                error={hasNoCompatibleSlots}\n              >\n                <InputLabel id=\"timeslot-select-label\">Select time slot</InputLabel>\n                <Select\n                  labelId=\"timeslot-select-label\"\n                  value={selectedNewTimeSlot}\n                  onChange={(e) => setSelectedNewTimeSlot(e.target.value)}\n                  label=\"Select time slot\"\n                >\n                  {loadingTimeSlots ? (\n                    <MenuItem value=\"\">\n                      <CircularProgress size={20} sx={{ mr: 1 }} /> Loading time slots...\n                    </MenuItem>\n                  ) : hasNoCompatibleSlots ? (\n                    <MenuItem value=\"\" disabled>\n                      No compatible time slots available\n                    </MenuItem>\n                  ) : (\n                    filteredTimeSlots.map(slot => (\n                      <MenuItem key={slot.timeslot_id} value={slot.timeslot_id}>\n                        {slot.name} ({slot.start_time.substring(0, 5)} - {slot.end_time.substring(0, 5)})\n                      </MenuItem>\n                    ))\n                  )}\n                </Select>\n                {selectedDay && (\n  <FormHelperText>\n  {hasNoCompatibleSlots\n    ? `No time slots available on ${selectedDay} with compatible duration`\n    : selectedCourseInfo?.timeslot?.start_time && selectedCourseInfo?.timeslot?.end_time\n      ? `Showing time slots with similar duration (${calculateDuration(\n          selectedCourseInfo.timeslot.start_time,\n          selectedCourseInfo.timeslot.end_time\n        )} minutes)`\n      : `Select a time slot for this course`}\n</FormHelperText>\n)}\n              </FormControl>\n            </>\n          )}\n          \n          <TextField\n            autoFocus\n            label=\"Resolution Notes\"\n            fullWidth\n            multiline\n            rows={4}\n            value={resolutionNotes}\n            onChange={(e) => setResolutionNotes(e.target.value)}\n            placeholder={\n              resolutionType === 'ACCEPT' ? \"Explain why this conflict is acceptable (e.g., temporary situation, special arrangement)\" :\n              resolutionType === 'OVERRIDE' ? \"Explain how this conflict should be overridden (e.g., move to a different time slot, assign different professor)\" :\n              \"Explain why you're reverting the previous resolution\"\n            }\n            sx={{ mt: 2 }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog} color=\"inherit\">Cancel</Button>\n          <Button\n            onClick={handleResolveConflict}\n            color={\n              resolutionType === 'ACCEPT' ? 'primary' :\n              resolutionType === 'OVERRIDE' ? 'secondary' :\n              'warning'\n            }\n            disabled={\n              !resolutionNotes.trim() || \n              (resolutionType === 'OVERRIDE' && (!selectedCourseToMove || !selectedNewTimeSlot))\n            }\n            startIcon={\n              resolutionType === 'ACCEPT' ? <ThumbUpIcon /> :\n              resolutionType === 'OVERRIDE' ? <SettingsIcon /> :\n              <RestoreIcon />\n            }\n          >\n            {resolving ?\n              <CircularProgress size={24} /> :\n              (resolutionType === 'ACCEPT' ? 'Accept Conflict' :\n               resolutionType === 'OVERRIDE' ? 'Override Conflict' :\n               'Undo Resolution')\n            }\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={handleCloseSnackbar}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Card>\n  );\n};\n\nexport default ConflictManagement;\n\n\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,GAAG,EACHC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,KAAK,EACLC,SAAS,EACTC,SAAS,EACTC,cAAc,EACdC,SAAS,EACTC,QAAQ,EACRC,IAAI,EACJC,MAAM,EACNC,WAAW,EACXC,gBAAgB,EAChBC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,iBAAiB,EACjBC,aAAa,EACbC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,MAAM,EACNC,cAAc,QACT,eAAe;AACtB,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,eAAe,MAAoB,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAO9E,MAAMC,kBAAqD,GAAGA,CAAC;EAC7DC,UAAU;EAAEC;AACd,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,sBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA;EACJ,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlD,QAAQ,CAAa,EAAE,CAAC;EAC1D,MAAM,CAACmD,OAAO,EAAEC,UAAU,CAAC,GAAGpD,QAAQ,CAAU,KAAK,CAAC;EACtD,MAAM,CAACqD,SAAS,EAAEC,YAAY,CAAC,GAAGtD,QAAQ,CAAgB,IAAI,CAAC;EAC/D,MAAM,CAACuD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxD,QAAQ,CAAkB,IAAI,CAAC;EAC/E,MAAM,CAACyD,eAAe,EAAEC,kBAAkB,CAAC,GAAG1D,QAAQ,CAAS,EAAE,CAAC;EAClE,MAAM,CAAC2D,UAAU,EAAEC,aAAa,CAAC,GAAG5D,QAAQ,CAAU,KAAK,CAAC;EAE5D,MAAM,CAAC6D,cAAc,EAAEC,iBAAiB,CAAC,GAAG9D,QAAQ,CAAiB,QAAQ,CAAC;EAC9E,MAAM,CAAC+D,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhE,QAAQ,CAAS,EAAE,CAAC;EAC5E,MAAM,CAACiE,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGlE,QAAQ,CAAS,EAAE,CAAC;EAC1E,MAAM,CAACmE,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpE,QAAQ,CAAQ,EAAE,CAAC;EACvE,MAAM,CAACqE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtE,QAAQ,CAAU,KAAK,CAAC;EACxE,MAAM,CAACuE,WAAW,EAAEC,cAAc,CAAC,GAAGxE,QAAQ,CAAS,EAAE,CAAC;EAC1D,MAAMyE,YAAY,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC;EAE7E,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG3E,QAAQ,CAIrC;IAAE4E,IAAI,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAO,CAAC,CAAC;;EAElD;EACA7E,SAAS,CAAC,MAAM;IACd,IAAIgD,SAAS,CAAC8B,MAAM,GAAG,CAAC,EAAE;MACxBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEhC,SAAS,CAAC,CAAC,CAAC,CAAC;MACjD+B,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEhC,SAAS,CAAC,CAAC,CAAC,CAACiC,aAAa,CAAC;MAC1DF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEhC,SAAS,CAAC,CAAC,CAAC,CAACkC,QAAQ,CAAC;MACvDH,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEhC,SAAS,CAAC,CAAC,CAAC,CAACmC,iBAAiB,CAAC;IACnE;EACF,CAAC,EAAE,CAACnC,SAAS,CAAC,CAAC;EAEfhD,SAAS,CAAC,MAAM;IACd+E,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEvC,UAAU,CAAC;IAElE,MAAM2C,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI,CAAC3C,UAAU,EAAE;MAEjB,IAAI;QACFU,UAAU,CAAC,IAAI,CAAC;QAChB4B,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEvC,UAAU,CAAC;QAC9D,MAAM4C,IAAI,GAAG,MAAMlD,eAAe,CAACmD,oBAAoB,CAAC7C,UAAU,CAAC;QACnEsC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,IAAI,CAAC;QACvCpC,YAAY,CAACoC,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDb,WAAW,CAAC;UACVC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE,0BAA0B;UACnCC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,SAAS;QACR1B,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIV,UAAU,EAAE;MACd2C,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM;MACLnC,YAAY,CAAC,EAAE,CAAC;MAChBE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACV,UAAU,CAAC,CAAC;EAEhB,MAAM+C,kBAAkB,GAAGA,CAACC,QAAkB,EAAEC,IAA2B,KAAK;IAC9EnC,mBAAmB,CAACkC,QAAQ,CAAC;IAC7B5B,iBAAiB,CAAC6B,IAAI,CAAC;IACvB3B,uBAAuB,CAAC,EAAE,CAAC;IAC3BE,sBAAsB,CAAC,EAAE,CAAC;;IAE1B;IACAR,kBAAkB,CAACiC,IAAI,KAAK,QAAQ,GAChC,0BAA0B,GAC1B,qDAAqD,CAAC;;IAE1D;IACA,IAAIA,IAAI,KAAK,UAAU,EAAE;MACvBC,uBAAuB,CAAC,CAAC;IAC3B;IAEAhC,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMiC,iBAAiB,GAAIH,QAAkB,IAAK;IAChDlC,mBAAmB,CAACkC,QAAQ,CAAC;IAC7B5B,iBAAiB,CAAC,QAAQ,CAAC;IAC3BJ,kBAAkB,CAAC,6DAA6D,CAAC;IACjFE,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMkC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,CAACvC,gBAAgB,EAAE;IAEvB,IAAI;MACFD,YAAY,CAACC,gBAAgB,CAACwC,WAAW,CAAC;MAE1C,IAAIlC,cAAc,KAAK,QAAQ,EAAE;QAC/B;QACA,MAAMzB,eAAe,CAAC4D,wBAAwB,CAC5CzC,gBAAgB,CAACwC,WAAW,EAC5B;UACEE,WAAW,EAAE,KAAK;UAClBC,gBAAgB,EAAEzC;QACpB,CACF,CAAC;;QAED;QACAP,YAAY,CAACD,SAAS,CAACkD,GAAG,CAACT,QAAQ,IACjCA,QAAQ,CAACK,WAAW,KAAKxC,gBAAgB,CAACwC,WAAW,GACjD;UAAE,GAAGL,QAAQ;UAAEO,WAAW,EAAE,KAAK;UAAEC,gBAAgB,EAAEzC;QAAgB,CAAC,GACtEiC,QACN,CAAC,CAAC;QAEFf,WAAW,CAAC;UACVC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE,2CAA2C;UACpDC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACA,MAAMsB,cAAmB,GAAG;UAC1BH,WAAW,EAAE,IAAI;UACjBC,gBAAgB,EAAEzC,eAAe;UACjC4C,MAAM,EAAExC;QACV,CAAC;;QAED;QACA,IAAIA,cAAc,KAAK,UAAU,IAAIE,oBAAoB,IAAIE,mBAAmB,EAAE;UAChFmC,cAAc,CAACE,mBAAmB,GAAGvC,oBAAoB;UACzDqC,cAAc,CAACG,eAAe,GAAGtC,mBAAmB;QACtD;QAEA,MAAM7B,eAAe,CAACoE,eAAe,CACnCjD,gBAAgB,CAACwC,WAAW,EAC5BK,cACF,CAAC;;QAED;QACAlD,YAAY,CAACD,SAAS,CAACkD,GAAG,CAACT,QAAQ,IACjCA,QAAQ,CAACK,WAAW,KAAKxC,gBAAgB,CAACwC,WAAW,GACjD;UAAE,GAAGL,QAAQ;UAAEO,WAAW,EAAE,IAAI;UAAEC,gBAAgB,EAAEzC;QAAgB,CAAC,GACrEiC,QACN,CAAC,CAAC;QAEFf,WAAW,CAAC;UACVC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE,YAAYhB,cAAc,KAAK,QAAQ,GAAG,UAAU,GAAG,YAAY,eAAe;UAC3FiB,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;MAEA,IAAInC,kBAAkB,EAAE;QACtBA,kBAAkB,CAAC,CAAC;MACtB;IACF,CAAC,CAAC,OAAO6C,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDb,WAAW,CAAC;QACVC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,aAAahB,cAAc,KAAK,QAAQ,GAAG,QAAQ,GAAG,SAAS,WAAW;QACnFiB,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,SAAS;MACRxB,YAAY,CAAC,IAAI,CAAC;MAClBM,aAAa,CAAC,KAAK,CAAC;MACpBI,uBAAuB,CAAC,EAAE,CAAC;MAC3BE,sBAAsB,CAAC,EAAE,CAAC;IAC5B;EACF,CAAC;EAED,MAAMuC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B7C,aAAa,CAAC,KAAK,CAAC;IACpBJ,mBAAmB,CAAC,IAAI,CAAC;IACzBE,kBAAkB,CAAC,EAAE,CAAC;IACtBM,uBAAuB,CAAC,EAAE,CAAC;IAC3BE,sBAAsB,CAAC,EAAE,CAAC;IAC1BM,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,MAAMkC,mBAAmB,GAAGA,CAAA,KAAM;IAChC/B,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAEE,IAAI,EAAE;IAAM,CAAC,CAAC;EAC3C,CAAC;EAED,MAAM+B,mBAAmB,GAAIhB,IAAY,IAAmC;IAC1E,QAAQA,IAAI;MACV,KAAK,oBAAoB;QACvB,OAAO,OAAO;MAChB,KAAK,oBAAoB;QACvB,OAAO,OAAO;MAChB,KAAK,0BAA0B;QAC7B,OAAO,SAAS;MAClB,KAAK,mBAAmB;QACtB,OAAO,SAAS;MAClB;QACE,OAAO,MAAM;IACjB;EACF,CAAC;EAED,MAAMiB,eAAe,GAAGA,CAACjB,IAAY,EAAEkB,UAAmB,KAAK;IAC7D,IAAIA,UAAU,EAAE;MACd,oBAAOvE,OAAA,CAACP,eAAe;QAAC+E,KAAK,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC5C;IAEA,MAAMpC,QAAQ,GAAG6B,mBAAmB,CAAChB,IAAI,CAAC;IAC1C,OAAOb,QAAQ,KAAK,OAAO,gBACvBxC,OAAA,CAACN,SAAS;MAAC8E,KAAK,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAC3B5E,OAAA,CAACR,WAAW;MAACgF,KAAK,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrC,CAAC;EAED,MAAMC,uBAAuB,GAAIxB,IAAY,IAAK;IAChD,QAAQA,IAAI;MACV,KAAK,oBAAoB;QACvB,OAAO,oBAAoB;MAC7B,KAAK,oBAAoB;QACvB,OAAO,oBAAoB;MAC7B,KAAK,0BAA0B;QAC7B,OAAO,0BAA0B;MACnC,KAAK,mBAAmB;QACtB,OAAO,mBAAmB;MAC5B;QACE,OAAOA,IAAI,CAACyB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAClC;EACF,CAAC;EAED,MAAMxB,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI;MACFtB,mBAAmB,CAAC,IAAI,CAAC;MACzB,MAAM+C,SAAS,GAAG,MAAMjF,eAAe,CAACkF,eAAe,CAAC,CAAC;MACzDlD,qBAAqB,CAACiD,SAAS,CAAC;IAClC,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDb,WAAW,CAAC;QACVC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,2BAA2B;QACpCC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,SAAS;MACRR,mBAAmB,CAAC,KAAK,CAAC;IAC5B;EACF,CAAC;EAED,MAAMiD,UAAU,GAAIC,UAA8B,IAAa;IAC7D,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;IAE7B,IAAI;MACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,cAAcF,UAAU,EAAE,CAAC;MACjD,OAAOC,IAAI,CAACE,kBAAkB,CAAC,EAAE,EAAE;QACjCC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOtC,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAOgC,UAAU,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACrC;EACF,CAAC;EAED,MAAMC,eAAe,GAAItC,QAAkB,IAAuD;IAChG;IACA,IAAIA,QAAQ,CAACuC,SAAS,EAAE;MACtB,OAAO;QACLC,GAAG,EAAExC,QAAQ,CAACyC,WAAW,IAAIzC,QAAQ,CAACuC,SAAS,CAACE,WAAW,IAAI,SAAS;QACxEC,IAAI,EAAE1C,QAAQ,CAACuC,SAAS,CAACG,IAAI,IAAI,cAAc;QAC/CC,SAAS,EAAE,GAAG3C,QAAQ,CAACuC,SAAS,CAACK,UAAU,CAACP,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAMrC,QAAQ,CAACuC,SAAS,CAACM,QAAQ,CAACR,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MAC9G,CAAC;IACH;;IAEA;IACA,IAAIrC,QAAQ,CAACyC,WAAW,EAAE;MACxB,OAAO;QACLD,GAAG,EAAExC,QAAQ,CAACyC,WAAW;QACzBC,IAAI,EAAE1C,QAAQ,CAAC8C,WAAW,GAAG,aAAa9C,QAAQ,CAAC8C,WAAW,CAACpB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,GAAG,cAAc;QACxGiB,SAAS,EAAE;MACb,CAAC;IACH;;IAEA;IACA,OAAO;MACLH,GAAG,EAAE,SAAS;MACdE,IAAI,EAAE,cAAc;MACpBC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;;EAED;EACA;EACF,MAAMI,iBAAiB,GAAGA,CAACC,SAAiB,EAAEC,OAAe,KAAa;IACxE,MAAMC,KAAK,GAAG,IAAIlB,IAAI,CAAC,cAAcgB,SAAS,EAAE,CAAC;IACjD,MAAMG,GAAG,GAAG,IAAInB,IAAI,CAAC,cAAciB,OAAO,EAAE,CAAC;IAC7C,OAAO,CAACE,GAAG,CAACC,OAAO,CAAC,CAAC,GAAGF,KAAK,CAACE,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;EAC1D,CAAC;;EAED;EACA,MAAMC,oBAAoB,GAAGA,CAACb,GAAW,EAAEc,YAAoB,KAAK;IAClE,IAAI,CAACzF,gBAAgB,IAAI,CAACA,gBAAgB,CAAC6B,iBAAiB,IAAI,CAAC8C,GAAG,EAAE,OAAO,EAAE;;IAE/E;IACA,OAAO/D,kBAAkB,CAAC8E,MAAM,CAACC,IAAI,IACnCA,IAAI,CAACf,WAAW,KAAKD,GACvB,CAAC;EACH,CAAC;;EAEC;EACA,MAAMiB,iBAAiB,GAAI5E,WAAW,IAAIR,oBAAoB,GAC1DgF,oBAAoB,CAACxE,WAAW,EAAER,oBAAoB,CAAC,GACvD,EAAE;EAEN,MAAMqF,oBAAoB,GAAGC,OAAO,CAAC9E,WAAW,IAAIR,oBAAoB,IAAIoF,iBAAiB,CAACpE,MAAM,KAAK,CAAC,CAAC;;EAE3G;EACA,MAAMuE,qBAAqB,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IAClC,IAAI,CAAChG,gBAAgB,IAAI,CAACQ,oBAAoB,EAAE,OAAO,IAAI;IAE3D,QAAAwF,qBAAA,GAAOhG,gBAAgB,CAAC6B,iBAAiB,cAAAmE,qBAAA,uBAAlCA,qBAAA,CAAoCC,IAAI,CAC7CC,MAAM,IAAIA,MAAM,CAACnD,mBAAmB,KAAKvC,oBAC3C,CAAC;EACH,CAAC;EAGD,MAAM2F,kBAAkB,GAAGJ,qBAAqB,CAAC,CAAC;EAElD,oBACEhH,OAAA,CAACnC,IAAI;IAACwJ,EAAE,EAAE;MAAEC,EAAE,EAAE;IAAE,CAAE;IAAAC,QAAA,gBAClBvH,OAAA,CAAClC,WAAW;MAAAyJ,QAAA,gBACVvH,OAAA,CAACjC,UAAU;QAACyJ,OAAO,EAAC,IAAI;QAACC,YAAY;QAAAF,QAAA,EAAC;MAEtC;QAAA9C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,EAEZ/D,OAAO,gBACNb,OAAA,CAACpC,GAAG;QAACyJ,EAAE,EAAE;UAAEK,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE,QAAQ;UAAEC,EAAE,EAAE;QAAE,CAAE;QAAAL,QAAA,eAC5DvH,OAAA,CAACtB,gBAAgB;UAAA+F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC,GACJ,CAACxE,UAAU,gBACbJ,OAAA,CAACrB,KAAK;QAAC6D,QAAQ,EAAC,MAAM;QAAC6E,EAAE,EAAE;UAAEC,EAAE,EAAE;QAAE,CAAE;QAAAC,QAAA,EAAC;MAEtC;QAAA9C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,GACNjE,SAAS,CAAC8B,MAAM,KAAK,CAAC,gBACxBzC,OAAA,CAACrB,KAAK;QAAC6D,QAAQ,EAAC,SAAS;QAAC6E,EAAE,EAAE;UAAEC,EAAE,EAAE;QAAE,CAAE;QAAAC,QAAA,EAAC;MAEzC;QAAA9C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,gBAER5E,OAAA,CAAAE,SAAA;QAAAqH,QAAA,gBACEvH,OAAA,CAACpC,GAAG;UAACyJ,EAAE,EAAE;YAAEQ,EAAE,EAAE;UAAE,CAAE;UAAAN,QAAA,eACjBvH,OAAA,CAACjC,UAAU;YAACyJ,OAAO,EAAC,OAAO;YAAChD,KAAK,EAAC,gBAAgB;YAAA+C,QAAA,GAC/C5G,SAAS,CAACgG,MAAM,CAACmB,CAAC,IAAI,CAACA,CAAC,CAACnE,WAAW,CAAC,CAAClB,MAAM,EAAC,+BAA6B,EAAC9B,SAAS,CAAC8B,MAAM,EAAC,kBAC/F;UAAA;YAAAgC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC,eAEN5E,OAAA,CAAC5B,cAAc;UAAC2J,SAAS,EAAE/J,KAAM;UAAAuJ,QAAA,eAC/BvH,OAAA,CAAC/B,KAAK;YAAAsJ,QAAA,gBACJvH,OAAA,CAAC3B,SAAS;cAAAkJ,QAAA,eACRvH,OAAA,CAAC1B,QAAQ;gBAAAiJ,QAAA,gBACPvH,OAAA,CAAC7B,SAAS;kBAAC6J,KAAK,EAAC,IAAI;kBAAAT,QAAA,EAAC;gBAAC;kBAAA9C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eACnC5E,OAAA,CAAC7B,SAAS;kBAAC6J,KAAK,EAAC,IAAI;kBAAAT,QAAA,EAAC;gBAAM;kBAAA9C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eACxC5E,OAAA,CAAC7B,SAAS;kBAAC6J,KAAK,EAAC,KAAK;kBAAAT,QAAA,EAAC;gBAAI;kBAAA9C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eACvC5E,OAAA,CAAC7B,SAAS;kBAAC6J,KAAK,EAAC,KAAK;kBAAAT,QAAA,EAAC;gBAAU;kBAAA9C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC7C5E,OAAA,CAAC7B,SAAS;kBAAAoJ,QAAA,EAAC;gBAAW;kBAAA9C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAClC5E,OAAA,CAAC7B,SAAS;kBAAC6J,KAAK,EAAC,KAAK;kBAAAT,QAAA,EAAC;gBAAU;kBAAA9C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC,eAC7C5E,OAAA,CAAC7B,SAAS;kBAAC6J,KAAK,EAAC,KAAK;kBAAAT,QAAA,EAAC;gBAAO;kBAAA9C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,eACZ5E,OAAA,CAAC9B,SAAS;cAAAqJ,QAAA,EACP5G,SAAS,CAACkD,GAAG,CAAC,CAACT,QAAQ,EAAE6E,KAAK,kBAC7BjI,OAAA,CAAC1B,QAAQ;gBAA4B+I,EAAE,EAAE;kBAAEa,OAAO,EAAE9E,QAAQ,CAACO,WAAW,GAAG,SAAS,GAAG;gBAAU,CAAE;gBAAA4D,QAAA,gBACjGvH,OAAA,CAAC7B,SAAS;kBAAAoJ,QAAA,EAAEU,KAAK,GAAG;gBAAC;kBAAAxD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,eAClC5E,OAAA,CAAC7B,SAAS;kBAAAoJ,QAAA,EACPjD,eAAe,CAAClB,QAAQ,CAAC+E,aAAa,EAAE/E,QAAQ,CAACO,WAAW;gBAAC;kBAAAc,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrD,CAAC,eACZ5E,OAAA,CAAC7B,SAAS;kBAAAoJ,QAAA,eACRvH,OAAA,CAACzB,IAAI;oBACH6J,KAAK,EAAEvD,uBAAuB,CAACzB,QAAQ,CAAC+E,aAAa,CAAE;oBACvD3D,KAAK,EAAEH,mBAAmB,CAACjB,QAAQ,CAAC+E,aAAa,CAAE;oBACnDE,IAAI,EAAC;kBAAO;oBAAA5D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACb;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACO,CAAC,eACZ5E,OAAA,CAAC7B,SAAS;kBAAAoJ,QAAA,EACP,CAAC,MAAM;oBACN;oBACA,IAAIe,YAAY,GAAGlF,QAAQ,CAACuC,SAAS,IAAIvC,QAAQ,CAACR,aAAa,IAAIQ,QAAQ,CAACP,QAAQ;;oBAEpF;oBACA,IAAI,CAACyF,YAAY,IAAIlF,QAAQ,CAACN,iBAAiB,IAAIM,QAAQ,CAACN,iBAAiB,CAACL,MAAM,GAAG,CAAC,EAAE;sBACxF,MAAM8F,WAAW,GAAGnF,QAAQ,CAACN,iBAAiB,CAAC,CAAC,CAAC;sBACjDwF,YAAY,GAAGC,WAAW,CAAC1F,QAAQ;oBACrC;;oBAE1B;oBACAH,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;oBAC1BD,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAElB,oBAAoB,CAAC;oBAC7DiB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEV,WAAW,CAAC;oBACzCS,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEhB,mBAAmB,CAAC;oBACvDe,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEd,kBAAkB,CAACY,MAAM,CAAC;oBAC/D,IAAIR,WAAW,IAAIR,oBAAoB,EAAE;sBACvC,MAAM+G,QAAQ,GAAG/B,oBAAoB,CAACxE,WAAW,EAAER,oBAAoB,CAAC;sBACxEiB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE6F,QAAQ,CAAC/F,MAAM,EAAE+F,QAAQ,CAAC3E,GAAG,CAAC4E,CAAC,IAAIA,CAAC,CAAC3C,IAAI,CAAC,CAAC;;sBAE/E;sBACApD,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE6F,QAAQ,CAAC/F,MAAM,KAAK,CAAC,CAAC;oBAChE;oBAE0B,IAAI6F,YAAY,EAAE;sBAChB,oBACEtI,OAAA,CAAAE,SAAA;wBAAAqH,QAAA,gBACEvH,OAAA,CAACjC,UAAU;0BAACyJ,OAAO,EAAC,OAAO;0BAACkB,UAAU,EAAC,QAAQ;0BAAAnB,QAAA,EAC5CnE,QAAQ,CAACyC,WAAW,IAAIyC,YAAY,CAACzC,WAAW,IAAI;wBAAS;0BAAApB,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACpD,CAAC,eACb5E,OAAA,CAACjC,UAAU;0BAACyJ,OAAO,EAAC,SAAS;0BAACE,OAAO,EAAC,OAAO;0BAAAH,QAAA,EAC1Ce,YAAY,CAACxC,IAAI,IAAI;wBAAc;0BAAArB,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAC1B,CAAC,eACb5E,OAAA,CAACjC,UAAU;0BAACyJ,OAAO,EAAC,SAAS;0BAAChD,KAAK,EAAC,gBAAgB;0BAACkD,OAAO,EAAC,OAAO;0BAAAH,QAAA,EACjEe,YAAY,CAACtC,UAAU,IAAIsC,YAAY,CAACrC,QAAQ,GAC/C,GAAGqC,YAAY,CAACtC,UAAU,CAACP,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM6C,YAAY,CAACrC,QAAQ,CAACR,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GACvF;wBAAoB;0BAAAhB,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACZ,CAAC;sBAAA,eACb,CAAC;oBAEP,CAAC,MAAM;sBACL;sBACA,IAAIxB,QAAQ,CAAC+E,aAAa,KAAK,mBAAmB,EAAE;wBAClD,oBACEnI,OAAA,CAAAE,SAAA;0BAAAqH,QAAA,eACEvH,OAAA,CAACjC,UAAU;4BAACyJ,OAAO,EAAC,OAAO;4BAACkB,UAAU,EAAC,QAAQ;4BAAAnB,QAAA,EAC5CnE,QAAQ,CAACyC,WAAW,IAAI;0BAAS;4BAAApB,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OACxB;wBAAC,gBACb,CAAC;sBAEP;sBAEA,oBACE5E,OAAA,CAAAE,SAAA;wBAAAqH,QAAA,eACEvH,OAAA,CAACjC,UAAU;0BAACyJ,OAAO,EAAC,OAAO;0BAACkB,UAAU,EAAC,QAAQ;0BAAAnB,QAAA,EAC5CnE,QAAQ,CAACyC,WAAW,IAAI;wBAAS;0BAAApB,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACxB;sBAAC,gBACb,CAAC;oBAEP;kBACF,CAAC,EAAE;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACK,CAAC,eACZ5E,OAAA,CAAC7B,SAAS;kBAAAoJ,QAAA,gBACRvH,OAAA,CAACjC,UAAU;oBAACyJ,OAAO,EAAC,OAAO;oBAAAD,QAAA,EACxBnE,QAAQ,CAACuF;kBAAW;oBAAAlE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACX,CAAC,EACZxB,QAAQ,CAACN,iBAAiB,IAAIM,QAAQ,CAACN,iBAAiB,CAACL,MAAM,GAAG,CAAC,iBAClEzC,OAAA,CAACjC,UAAU;oBAACyJ,OAAO,EAAC,SAAS;oBAACE,OAAO,EAAC,OAAO;oBAACL,EAAE,EAAE;sBAAEC,EAAE,EAAE;oBAAE,CAAE;oBAAAC,QAAA,GAAC,YACjD,EAACnE,QAAQ,CAACN,iBAAiB,CAACe,GAAG,CAAC+E,EAAE,IAAIA,EAAE,CAACC,WAAW,IAAID,EAAE,CAACE,SAAS,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;kBAAA;oBAAAtE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChF,CACb;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACQ,CAAC,eACZ5E,OAAA,CAAC7B,SAAS;kBAAAoJ,QAAA,EACPnE,QAAQ,CAACO,WAAW,gBACnB3D,OAAA,CAAAE,SAAA;oBAAAqH,QAAA,gBACEvH,OAAA,CAACzB,IAAI;sBACH6J,KAAK,EAAC,UAAU;sBAChB5D,KAAK,EAAC,SAAS;sBACf6D,IAAI,EAAC,OAAO;sBACZhB,EAAE,EAAE;wBAAEQ,EAAE,EAAE;sBAAE;oBAAE;sBAAApD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACf,CAAC,EACDxB,QAAQ,CAACQ,gBAAgB,iBACxB5D,OAAA,CAACjC,UAAU;sBAACyJ,OAAO,EAAC,SAAS;sBAACE,OAAO,EAAC,OAAO;sBAAAH,QAAA,EAC1CnE,QAAQ,CAACQ;oBAAgB;sBAAAa,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAChB,CACb;kBAAA,eACD,CAAC,gBAEH5E,OAAA,CAACzB,IAAI;oBACH6J,KAAK,EAAC,YAAY;oBAClB5D,KAAK,EAAC,SAAS;oBACf6D,IAAI,EAAC;kBAAO;oBAAA5D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACb;gBACF;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACQ,CAAC,eACZ5E,OAAA,CAAC7B,SAAS;kBAAAoJ,QAAA,EACPnE,QAAQ,CAACO,WAAW;kBAAA;kBACnB;kBACA3D,OAAA,CAACxB,MAAM;oBACLgJ,OAAO,EAAC,UAAU;oBAClBa,IAAI,EAAC,OAAO;oBACZ7D,KAAK,EAAC,SAAS;oBACfwE,OAAO,EAAEA,CAAA,KAAMzF,iBAAiB,CAACH,QAAQ,CAAE;oBAC3C6F,QAAQ,EAAE,CAAC,CAAClI,SAAU;oBACtBmI,SAAS,eAAElJ,OAAA,CAACH,WAAW;sBAAA4E,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAE;oBAC3ByC,EAAE,EAAE;sBAAEC,EAAE,EAAE;oBAAE,CAAE;oBAAAC,QAAA,EAEbxG,SAAS,KAAKqC,QAAQ,CAACK,WAAW,IAAIlC,cAAc,KAAK,QAAQ,gBAChEvB,OAAA,CAACtB,gBAAgB;sBAAC2J,IAAI,EAAE;oBAAG;sBAAA5D,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAC,GAE9B;kBACD;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACK,CAAC;kBAAA;kBAET;kBACA5E,OAAA,CAACvB,WAAW;oBAAC4J,IAAI,EAAC,OAAO;oBAACb,OAAO,EAAC,UAAU;oBAAC2B,WAAW,EAAC,UAAU;oBAAC9B,EAAE,EAAE;sBAAEW,KAAK,EAAE;oBAAO,CAAE;oBAAAT,QAAA,gBACxFvH,OAAA,CAACxB,MAAM;sBACLgG,KAAK,EAAC,SAAS;sBACfwE,OAAO,EAAEA,CAAA,KAAM7F,kBAAkB,CAACC,QAAQ,EAAE,QAAQ,CAAE;sBACtD6F,QAAQ,EAAE,CAAC,CAAClI,SAAU;sBACtBmI,SAAS,eAAElJ,OAAA,CAACL,WAAW;wBAAA8E,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE,CAAE;sBAC3ByC,EAAE,EAAE;wBAAEQ,EAAE,EAAE;sBAAE,CAAE;sBAAAN,QAAA,EAEbxG,SAAS,KAAKqC,QAAQ,CAACK,WAAW,IAAIlC,cAAc,KAAK,QAAQ,gBAChEvB,OAAA,CAACtB,gBAAgB;wBAAC2J,IAAI,EAAE;sBAAG;wBAAA5D,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE,CAAC,GAE9B;oBACD;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACK,CAAC,eACT5E,OAAA,CAACxB,MAAM;sBACLgG,KAAK,EAAC,WAAW;sBACjBwE,OAAO,EAAEA,CAAA,KAAM7F,kBAAkB,CAACC,QAAQ,EAAE,UAAU,CAAE;sBACxD6F,QAAQ,EAAE,CAAC,CAAClI,SAAU;sBACtBmI,SAAS,eAAElJ,OAAA,CAACJ,YAAY;wBAAA6E,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE,CAAE;sBAAA2C,QAAA,EAE3BxG,SAAS,KAAKqC,QAAQ,CAACK,WAAW,IAAIlC,cAAc,KAAK,UAAU,gBAClEvB,OAAA,CAACtB,gBAAgB;wBAAC2J,IAAI,EAAE;sBAAG;wBAAA5D,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE,CAAC,GAE9B;oBACD;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACK,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACE;gBACd;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACQ,CAAC;cAAA,GA5JCxB,QAAQ,CAACK,WAAW;gBAAAgB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OA6JzB,CACX;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM,CAAC;MAAA,eACjB,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACU,CAAC,eAEd5E,OAAA,CAACnB,MAAM;MAACyD,IAAI,EAAEjB,UAAW;MAAC+H,OAAO,EAAEjF,iBAAkB;MAAAoD,QAAA,gBACnDvH,OAAA,CAAClB,WAAW;QAAAyI,QAAA,EACThG,cAAc,KAAK,QAAQ,GAAG,iBAAiB,GAC/CA,cAAc,KAAK,UAAU,GAAG,mBAAmB,GACnD;MAAmB;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACd5E,OAAA,CAACjB,aAAa;QAAAwI,QAAA,gBACZvH,OAAA,CAAChB,iBAAiB;UAACqI,EAAE,EAAE;YAAEQ,EAAE,EAAE;UAAE,CAAE;UAAAN,QAAA,EAC9BtG,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAE0H;QAAW;UAAAlE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CAAC,EAGnB3D,gBAAgB,iBACfjB,OAAA,CAACpC,GAAG;UAACyJ,EAAE,EAAE;YAAEQ,EAAE,EAAE,CAAC;YAAEwB,CAAC,EAAE,CAAC;YAAEnB,OAAO,EAAE,SAAS;YAAEoB,YAAY,EAAE;UAAE,CAAE;UAAA/B,QAAA,gBAC5DvH,OAAA,CAACjC,UAAU;YAACyJ,OAAO,EAAC,WAAW;YAACC,YAAY;YAAAF,QAAA,EAAC;UAE7C;YAAA9C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACb5E,OAAA,CAACjC,UAAU;YAACyJ,OAAO,EAAC,OAAO;YAAAD,QAAA,gBACzBvH,OAAA;cAAAuH,QAAA,EAAQ;YAAI;cAAA9C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC,CAAC,MAAM;cAC5B,MAAM2E,QAAQ,GAAGtI,gBAAgB,GAAGyE,eAAe,CAACzE,gBAAgB,CAAC,GAAG;gBAAE2E,GAAG,EAAE,KAAK;gBAAEE,IAAI,EAAE,KAAK;gBAAEC,SAAS,EAAE;cAAM,CAAC;cACrH,OAAOwD,QAAQ,CAAC3D,GAAG;YACrB,CAAC,EAAE,CAAC;UAAA;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACb5E,OAAA,CAACjC,UAAU;YAACyJ,OAAO,EAAC,OAAO;YAAAD,QAAA,gBACzBvH,OAAA;cAAAuH,QAAA,EAAQ;YAAU;cAAA9C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC,CAAC,MAAM;cAClC,MAAM2E,QAAQ,GAAGtI,gBAAgB,GAAGyE,eAAe,CAACzE,gBAAgB,CAAC,GAAG;gBAAE2E,GAAG,EAAE,KAAK;gBAAEE,IAAI,EAAE,KAAK;gBAAEC,SAAS,EAAE;cAAM,CAAC;cACrH,OAAO,GAAGwD,QAAQ,CAACzD,IAAI,KAAKyD,QAAQ,CAACxD,SAAS,GAAG;YACnD,CAAC,EAAE,CAAC;UAAA;YAAAtB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACb5E,OAAA,CAACjC,UAAU;YAACyJ,OAAO,EAAC,OAAO;YAAAD,QAAA,gBACzBvH,OAAA;cAAAuH,QAAA,EAAQ;YAAK;cAAA9C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACC,uBAAuB,CAAC5D,gBAAgB,CAACkH,aAAa,CAAC;UAAA;YAAA1D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CACN,eAGD5E,OAAA,CAACjC,UAAU;UAACyJ,OAAO,EAAC,WAAW;UAACC,YAAY;UAAAF,QAAA,EAAC;QAE7C;UAAA9C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb5E,OAAA,CAACpC,GAAG;UAACyJ,EAAE,EAAE;YAAEQ,EAAE,EAAE;UAAE,CAAE;UAAAN,QAAA,EAChBtG,gBAAgB,aAAhBA,gBAAgB,wBAAAV,sBAAA,GAAhBU,gBAAgB,CAAE6B,iBAAiB,cAAAvC,sBAAA,uBAAnCA,sBAAA,CAAqCsD,GAAG,CAACsD,MAAM,iBAC9CnH,OAAA,CAACpC,GAAG;YAAkCyJ,EAAE,EAAE;cAAEQ,EAAE,EAAE,CAAC;cAAEwB,CAAC,EAAE,CAAC;cAAEG,MAAM,EAAE,gBAAgB;cAAEF,YAAY,EAAE;YAAE,CAAE;YAAA/B,QAAA,gBACnGvH,OAAA,CAACjC,UAAU;cAACyJ,OAAO,EAAC,OAAO;cAACkB,UAAU,EAAC,MAAM;cAAAnB,QAAA,GAC1CJ,MAAM,CAAC2B,SAAS,EAAC,KAAG,EAAC3B,MAAM,CAAC0B,WAAW,IAAI,gBAAgB;YAAA;cAAApE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClD,CAAC,eACb5E,OAAA,CAACjC,UAAU;cAACyJ,OAAO,EAAC,SAAS;cAACE,OAAO,EAAC,OAAO;cAAAH,QAAA,GAAC,aACjC,EAACJ,MAAM,CAACsC,cAAc,IAAI,mBAAmB;YAAA;cAAAhF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9C,CAAC,EACZuC,MAAM,CAACtE,QAAQ,iBACd7C,OAAA,CAACjC,UAAU;cAACyJ,OAAO,EAAC,SAAS;cAAChD,KAAK,EAAC,gBAAgB;cAACkD,OAAO,EAAC,OAAO;cAAAH,QAAA,GAAC,aACxD,EAACJ,MAAM,CAACtE,QAAQ,CAACgD,WAAW,IAAIsB,MAAM,CAACtB,WAAW,IAAI,aAAa,EAAC,GAC/E,EAACZ,UAAU,CAACkC,MAAM,CAACtE,QAAQ,CAACmD,UAAU,CAAC,EAAC,KAAG,EAACf,UAAU,CAACkC,MAAM,CAACtE,QAAQ,CAACoD,QAAQ,CAAC;YAAA;cAAAxB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtE,CACb;UAAA,GAZOuC,MAAM,CAACnD,mBAAmB;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAe/B,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,EAGLrD,cAAc,KAAK,UAAU,iBAC5BvB,OAAA,CAAAE,SAAA;UAAAqH,QAAA,gBACEvH,OAAA,CAACb,WAAW;YAACuK,SAAS;YAACrC,EAAE,EAAE;cAAEC,EAAE,EAAE,CAAC;cAAEO,EAAE,EAAE;YAAE,CAAE;YAAAN,QAAA,gBAC1CvH,OAAA,CAACZ,UAAU;cAACuK,EAAE,EAAC,qBAAqB;cAAApC,QAAA,EAAC;YAAqB;cAAA9C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACvE5E,OAAA,CAACV,MAAM;cACLsK,OAAO,EAAC,qBAAqB;cAC7BC,KAAK,EAAEpI,oBAAqB;cAC5BqI,QAAQ,EAAGC,CAAC,IAAK;gBACfrI,uBAAuB,CAACqI,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;gBACvCjI,sBAAsB,CAAC,EAAE,CAAC,CAAC,CAAC;cAC9B,CAAE;cACFwG,KAAK,EAAC,uBAAuB;cAAAb,QAAA,EAE5BtG,gBAAgB,aAAhBA,gBAAgB,wBAAAT,sBAAA,GAAhBS,gBAAgB,CAAE6B,iBAAiB,cAAAtC,sBAAA,uBAAnCA,sBAAA,CAAqCqD,GAAG,CAACsD,MAAM,iBAC9CnH,OAAA,CAACX,QAAQ;gBAAkCwK,KAAK,EAAE1C,MAAM,CAACnD,mBAAoB;gBAAAuD,QAAA,GAC1EJ,MAAM,CAAC2B,SAAS,EAAC,KAAG,EAAC3B,MAAM,CAAC0B,WAAW,IAAI,gBAAgB;cAAA,GAD/C1B,MAAM,CAACnD,mBAAmB;gBAAAS,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAG/B,CACX;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAGd5E,OAAA,CAACb,WAAW;YAACuK,SAAS;YAACrC,EAAE,EAAE;cAAEC,EAAE,EAAE,CAAC;cAAEO,EAAE,EAAE;YAAE,CAAE;YAAAN,QAAA,gBAC1CvH,OAAA,CAACZ,UAAU;cAACuK,EAAE,EAAC,kBAAkB;cAAApC,QAAA,EAAC;YAAU;cAAA9C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACzD5E,OAAA,CAACV,MAAM;cACLsK,OAAO,EAAC,kBAAkB;cAC1BC,KAAK,EAAE5H,WAAY;cACnB6H,QAAQ,EAAGC,CAAC,IAAK;gBACf7H,cAAc,CAAC6H,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;gBAC9BjI,sBAAsB,CAAC,EAAE,CAAC,CAAC,CAAC;cAC9B,CAAE;cACFwG,KAAK,EAAC,YAAY;cAClBa,QAAQ,EAAElH,gBAAgB,IAAI,CAACN,oBAAqB;cAAA8F,QAAA,EAEnDxF,gBAAgB,gBACf/B,OAAA,CAACX,QAAQ;gBAACwK,KAAK,EAAC,EAAE;gBAAAtC,QAAA,gBAChBvH,OAAA,CAACtB,gBAAgB;kBAAC2J,IAAI,EAAE,EAAG;kBAAChB,EAAE,EAAE;oBAAE4C,EAAE,EAAE;kBAAE;gBAAE;kBAAAxF,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC,oBAC/C;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAU,CAAC,GAEXzC,YAAY,CAAC0B,GAAG,CAAC+B,GAAG,iBAClB5F,OAAA,CAACX,QAAQ;gBAAWwK,KAAK,EAAEjE,GAAI;gBAAA2B,QAAA,EAC5B3B;cAAG,GADSA,GAAG;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAER,CACX;YACF;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAGd5E,OAAA,CAACb,WAAW;YACVuK,SAAS;YACTrC,EAAE,EAAE;cAAEC,EAAE,EAAE,CAAC;cAAEO,EAAE,EAAE;YAAE,CAAE;YACrBoB,QAAQ,EAAE,CAAChH,WAAW,IAAI,CAACR,oBAAoB,IAAIM,gBAAiB;YACpEmB,KAAK,EAAE4D,oBAAqB;YAAAS,QAAA,gBAE5BvH,OAAA,CAACZ,UAAU;cAACuK,EAAE,EAAC,uBAAuB;cAAApC,QAAA,EAAC;YAAgB;cAAA9C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACpE5E,OAAA,CAACV,MAAM;cACLsK,OAAO,EAAC,uBAAuB;cAC/BC,KAAK,EAAElI,mBAAoB;cAC3BmI,QAAQ,EAAGC,CAAC,IAAKnI,sBAAsB,CAACmI,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;cACxDzB,KAAK,EAAC,kBAAkB;cAAAb,QAAA,EAEvBxF,gBAAgB,gBACf/B,OAAA,CAACX,QAAQ;gBAACwK,KAAK,EAAC,EAAE;gBAAAtC,QAAA,gBAChBvH,OAAA,CAACtB,gBAAgB;kBAAC2J,IAAI,EAAE,EAAG;kBAAChB,EAAE,EAAE;oBAAE4C,EAAE,EAAE;kBAAE;gBAAE;kBAAAxF,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC,0BAC/C;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAU,CAAC,GACTkC,oBAAoB,gBACtB9G,OAAA,CAACX,QAAQ;gBAACwK,KAAK,EAAC,EAAE;gBAACZ,QAAQ;gBAAA1B,QAAA,EAAC;cAE5B;gBAAA9C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAU,CAAC,GAEXiC,iBAAiB,CAAChD,GAAG,CAAC+C,IAAI,iBACxB5G,OAAA,CAACX,QAAQ;gBAAwBwK,KAAK,EAAEjD,IAAI,CAACV,WAAY;gBAAAqB,QAAA,GACtDX,IAAI,CAACd,IAAI,EAAC,IAAE,EAACc,IAAI,CAACZ,UAAU,CAACP,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,KAAG,EAACmB,IAAI,CAACX,QAAQ,CAACR,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,GAClF;cAAA,GAFemB,IAAI,CAACV,WAAW;gBAAAzB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAErB,CACX;YACF;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACK,CAAC,EACR3C,WAAW,iBAC1BjC,OAAA,CAACT,cAAc;cAAAgI,QAAA,EACdT,oBAAoB,GACjB,8BAA8B7E,WAAW,2BAA2B,GACpEmF,kBAAkB,aAAlBA,kBAAkB,gBAAA3G,qBAAA,GAAlB2G,kBAAkB,CAAEvE,QAAQ,cAAApC,qBAAA,eAA5BA,qBAAA,CAA8BuF,UAAU,IAAIoB,kBAAkB,aAAlBA,kBAAkB,gBAAA1G,sBAAA,GAAlB0G,kBAAkB,CAAEvE,QAAQ,cAAAnC,sBAAA,eAA5BA,sBAAA,CAA8BuF,QAAQ,GAChF,6CAA6CE,iBAAiB,CAC5DiB,kBAAkB,CAACvE,QAAQ,CAACmD,UAAU,EACtCoB,kBAAkB,CAACvE,QAAQ,CAACoD,QAC9B,CAAC,WAAW,GACZ;YAAoC;cAAAxB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B,CACf;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC0B,CAAC;QAAA,eACd,CACH,eAED5E,OAAA,CAACd,SAAS;UACRgL,SAAS;UACT9B,KAAK,EAAC,kBAAkB;UACxBsB,SAAS;UACTS,SAAS;UACTC,IAAI,EAAE,CAAE;UACRP,KAAK,EAAE1I,eAAgB;UACvB2I,QAAQ,EAAGC,CAAC,IAAK3I,kBAAkB,CAAC2I,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UACpDQ,WAAW,EACT9I,cAAc,KAAK,QAAQ,GAAG,0FAA0F,GACxHA,cAAc,KAAK,UAAU,GAAG,kHAAkH,GAClJ,sDACD;UACD8F,EAAE,EAAE;YAAEC,EAAE,EAAE;UAAE;QAAE;UAAA7C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAAC,eAChB5E,OAAA,CAACf,aAAa;QAAAsI,QAAA,gBACZvH,OAAA,CAACxB,MAAM;UAACwK,OAAO,EAAE7E,iBAAkB;UAACK,KAAK,EAAC,SAAS;UAAA+C,QAAA,EAAC;QAAM;UAAA9C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnE5E,OAAA,CAACxB,MAAM;UACLwK,OAAO,EAAExF,qBAAsB;UAC/BgB,KAAK,EACHjD,cAAc,KAAK,QAAQ,GAAG,SAAS,GACvCA,cAAc,KAAK,UAAU,GAAG,WAAW,GAC3C,SACD;UACD0H,QAAQ,EACN,CAAC9H,eAAe,CAACmJ,IAAI,CAAC,CAAC,IACtB/I,cAAc,KAAK,UAAU,KAAK,CAACE,oBAAoB,IAAI,CAACE,mBAAmB,CACjF;UACDuH,SAAS,EACP3H,cAAc,KAAK,QAAQ,gBAAGvB,OAAA,CAACL,WAAW;YAAA8E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAC7CrD,cAAc,KAAK,UAAU,gBAAGvB,OAAA,CAACJ,YAAY;YAAA6E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAChD5E,OAAA,CAACH,WAAW;YAAA4E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CACf;UAAA2C,QAAA,EAEAxG,SAAS,gBACRf,OAAA,CAACtB,gBAAgB;YAAC2J,IAAI,EAAE;UAAG;YAAA5D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAC7BrD,cAAc,KAAK,QAAQ,GAAG,iBAAiB,GAC/CA,cAAc,KAAK,UAAU,GAAG,mBAAmB,GACnD;QAAkB;UAAAkD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEf,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eAET5E,OAAA,CAACpB,QAAQ;MACP0D,IAAI,EAAEF,QAAQ,CAACE,IAAK;MACpBiI,gBAAgB,EAAE,IAAK;MACvBnB,OAAO,EAAEhF,mBAAoB;MAC7BoG,YAAY,EAAE;QAAEC,QAAQ,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAS,CAAE;MAAAnD,QAAA,eAExDvH,OAAA,CAACrB,KAAK;QAACyK,OAAO,EAAEhF,mBAAoB;QAAC5B,QAAQ,EAAEJ,QAAQ,CAACI,QAAS;QAAC6E,EAAE,EAAE;UAAEW,KAAK,EAAE;QAAO,CAAE;QAAAT,QAAA,EACrFnF,QAAQ,CAACG;MAAO;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEX,CAAC;AAACtE,EAAA,CAvuBIH,kBAAqD;AAAAwK,EAAA,GAArDxK,kBAAqD;AAyuB3D,eAAeA,kBAAkB;AAAC,IAAAwK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}