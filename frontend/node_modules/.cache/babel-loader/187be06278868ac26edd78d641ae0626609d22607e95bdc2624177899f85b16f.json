{"ast":null,"code":"var _jsxFileName = \"/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/schedule/ScheduleTab.tsx\",\n  _s = $RefreshSig$();\n// src/components/admin/schedule/ScheduleTab.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Box } from '@mui/material';\nimport ScheduleGenerator from './ScheduleGenerator';\nimport ScheduleList from './ScheduleList';\nimport ConflictManagement from './ConflictManagement';\nimport departmentService from '../../../services/departmentService';\nimport programService from '../../../services/programService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScheduleTab = () => {\n  _s();\n  const [selectedScheduleId, setSelectedScheduleId] = useState(undefined);\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const [departments, setDepartments] = useState([]);\n  const [programs, setPrograms] = useState([]);\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedProgram, setSelectedProgram] = useState('');\n  const [loadingDepartments, setLoadingDepartments] = useState(true);\n  const [loadingPrograms, setLoadingPrograms] = useState(false);\n  console.log(\"ScheduleTab rendering with selectedScheduleId:\", selectedScheduleId);\n\n  // Fetch departments on component mount\n  useEffect(() => {\n    const fetchDepartments = async () => {\n      try {\n        setLoadingDepartments(true);\n        const data = await departmentService.getAllDepartments();\n        setDepartments(data);\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n      } finally {\n        setLoadingDepartments(false);\n      }\n    };\n    fetchDepartments();\n  }, []);\n\n  // Fetch programs when department changes\n  useEffect(() => {\n    if (!selectedDepartment) {\n      setPrograms([]);\n      setSelectedProgram('');\n      return;\n    }\n    const fetchPrograms = async () => {\n      try {\n        setLoadingPrograms(true);\n        const data = await programService.getProgramsByDepartment(selectedDepartment);\n        setPrograms(data);\n      } catch (error) {\n        console.error('Error fetching programs:', error);\n      } finally {\n        setLoadingPrograms(false);\n      }\n    };\n    fetchPrograms();\n  }, [selectedDepartment]);\n  const handleDepartmentChange = event => {\n    setSelectedDepartment(event.target.value);\n    setSelectedProgram(''); // Reset program selection when department changes\n  };\n  const handleProgramChange = event => {\n    setSelectedProgram(event.target.value);\n  };\n  const handleScheduleGenerated = scheduleId => {\n    console.log(\"Schedule generated with ID:\", scheduleId);\n    // Update selectedScheduleId when a new schedule is generated\n    setSelectedScheduleId(scheduleId);\n    // Force refresh the schedule list\n    setRefreshCounter(prev => prev + 1);\n  };\n  const handleScheduleSelected = scheduleId => {\n    console.log(\"Schedule selected with ID:\", scheduleId);\n    // Update the selected schedule when user selects from the list\n    setSelectedScheduleId(scheduleId);\n  };\n  const handleConflictResolved = () => {\n    console.log(\"Conflict resolved, refreshing data\");\n    // Refresh schedule list when a conflict is resolved\n    // (we keep the same selectedScheduleId)\n    setRefreshCounter(prev => prev + 1);\n  };\n  const handleScheduleDeleted = () => {\n    console.log(\"Schedule deleted, clearing selection\");\n    // When a schedule is deleted, clear the selected schedule ID\n    setSelectedScheduleId(undefined);\n    // Force refresh the schedule list\n    setRefreshCounter(prev => prev + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(ScheduleGenerator, {\n      onScheduleGenerated: handleScheduleGenerated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ScheduleList, {\n      selectedScheduleId: selectedScheduleId,\n      forceRefresh: refreshCounter,\n      onScheduleDeleted: handleScheduleDeleted,\n      onScheduleSelected: handleScheduleSelected,\n      departments: departments,\n      programs: programs,\n      selectedDepartment: selectedDepartment,\n      selectedProgram: selectedProgram,\n      loadingDepartments: loadingDepartments,\n      loadingPrograms: loadingPrograms,\n      onDepartmentChange: handleDepartmentChange,\n      onProgramChange: handleProgramChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ConflictManagement, {\n      scheduleId: selectedScheduleId,\n      onConflictResolved: handleConflictResolved\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 1\n  }, this);\n};\n_s(ScheduleTab, \"zBJ70w+XrG/nyFcYqbS/7BxHuLA=\");\n_c = ScheduleTab;\nexport default ScheduleTab;\nvar _c;\n$RefreshReg$(_c, \"ScheduleTab\");","map":{"version":3,"names":["React","useState","useEffect","Box","ScheduleGenerator","ScheduleList","ConflictManagement","departmentService","programService","jsxDEV","_jsxDEV","ScheduleTab","_s","selectedScheduleId","setSelectedScheduleId","undefined","refreshCounter","setRefreshCounter","departments","setDepartments","programs","setPrograms","selectedDepartment","setSelectedDepartment","selectedProgram","setSelectedProgram","loadingDepartments","setLoadingDepartments","loadingPrograms","setLoadingPrograms","console","log","fetchDepartments","data","getAllDepartments","error","fetchPrograms","getProgramsByDepartment","handleDepartmentChange","event","target","value","handleProgramChange","handleScheduleGenerated","scheduleId","prev","handleScheduleSelected","handleConflictResolved","handleScheduleDeleted","children","onScheduleGenerated","fileName","_jsxFileName","lineNumber","columnNumber","forceRefresh","onScheduleDeleted","onScheduleSelected","onDepartmentChange","onProgramChange","onConflictResolved","_c","$RefreshReg$"],"sources":["/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/components/admin/schedule/ScheduleTab.tsx"],"sourcesContent":["// src/components/admin/schedule/ScheduleTab.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Box, SelectChangeEvent } from '@mui/material';\nimport ScheduleGenerator from './ScheduleGenerator';\nimport ScheduleList from './ScheduleList';\nimport ConflictManagement from './ConflictManagement';\nimport departmentService from '../../../services/departmentService';\nimport programService from '../../../services/programService';\n\ninterface Department {\ndepartment_id: string;\nname: string;\n}\n\ninterface Program {\nprogram_id: string;\nname: string;\ndepartment_id: string;\n}\n\nconst ScheduleTab: React.FC = () => {\nconst [selectedScheduleId, setSelectedScheduleId] = useState<string | undefined>(undefined);\nconst [refreshCounter, setRefreshCounter] = useState<number>(0);\nconst [departments, setDepartments] = useState<Department[]>([]);\nconst [programs, setPrograms] = useState<Program[]>([]);\nconst [selectedDepartment, setSelectedDepartment] = useState<string>('');\nconst [selectedProgram, setSelectedProgram] = useState<string>('');\nconst [loadingDepartments, setLoadingDepartments] = useState<boolean>(true);\nconst [loadingPrograms, setLoadingPrograms] = useState<boolean>(false);\n\nconsole.log(\"ScheduleTab rendering with selectedScheduleId:\", selectedScheduleId);\n\n// Fetch departments on component mount\nuseEffect(() => {\nconst fetchDepartments = async () => {\ntry {\nsetLoadingDepartments(true);\nconst data = await departmentService.getAllDepartments();\nsetDepartments(data);\n} catch (error) {\nconsole.error('Error fetching departments:', error);\n} finally {\nsetLoadingDepartments(false);\n}\n};\n\nfetchDepartments();\n}, []);\n\n// Fetch programs when department changes\nuseEffect(() => {\nif (!selectedDepartment) {\nsetPrograms([]);\nsetSelectedProgram('');\nreturn;\n}\n\nconst fetchPrograms = async () => {\ntry {\nsetLoadingPrograms(true);\nconst data = await programService.getProgramsByDepartment(selectedDepartment);\nsetPrograms(data);\n} catch (error) {\nconsole.error('Error fetching programs:', error);\n} finally {\nsetLoadingPrograms(false);\n}\n};\n\nfetchPrograms();\n}, [selectedDepartment]);\n\nconst handleDepartmentChange = (event: SelectChangeEvent) => {\nsetSelectedDepartment(event.target.value);\nsetSelectedProgram(''); // Reset program selection when department changes\n};\n\nconst handleProgramChange = (event: SelectChangeEvent) => {\nsetSelectedProgram(event.target.value);\n};\n\nconst handleScheduleGenerated = (scheduleId: string) => {\nconsole.log(\"Schedule generated with ID:\", scheduleId);\n// Update selectedScheduleId when a new schedule is generated\nsetSelectedScheduleId(scheduleId);\n// Force refresh the schedule list\nsetRefreshCounter(prev => prev + 1);\n};\n\nconst handleScheduleSelected = (scheduleId: string) => {\nconsole.log(\"Schedule selected with ID:\", scheduleId);\n// Update the selected schedule when user selects from the list\nsetSelectedScheduleId(scheduleId);\n};\n\nconst handleConflictResolved = () => {\nconsole.log(\"Conflict resolved, refreshing data\");\n// Refresh schedule list when a conflict is resolved\n// (we keep the same selectedScheduleId)\nsetRefreshCounter(prev => prev + 1);\n};\n\nconst handleScheduleDeleted = () => {\nconsole.log(\"Schedule deleted, clearing selection\");\n// When a schedule is deleted, clear the selected schedule ID\nsetSelectedScheduleId(undefined);\n// Force refresh the schedule list\nsetRefreshCounter(prev => prev + 1);\n};\n\nreturn (\n<Box>\n<ScheduleGenerator onScheduleGenerated={handleScheduleGenerated} />\n<ScheduleList\nselectedScheduleId={selectedScheduleId}\nforceRefresh={refreshCounter}\nonScheduleDeleted={handleScheduleDeleted}\nonScheduleSelected={handleScheduleSelected}\ndepartments={departments}\nprograms={programs}\nselectedDepartment={selectedDepartment}\nselectedProgram={selectedProgram}\nloadingDepartments={loadingDepartments}\nloadingPrograms={loadingPrograms}\nonDepartmentChange={handleDepartmentChange}\nonProgramChange={handleProgramChange}\n/>\n<ConflictManagement\nscheduleId={selectedScheduleId}\nonConflictResolved={handleConflictResolved}\n/>\n</Box>\n);\n};\n\nexport default ScheduleTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}