{"ast":null,"code":"// src/services/scheduleService.ts\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define the base API URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Types\n\n// Get active schedule for a semester\nexport const getActiveSchedule = async semesterId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}/active`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch active schedule');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getActiveSchedule for semester ${semesterId}:`, error);\n\n    // Return mock data for development - remove in production\n    return {\n      schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\n      semester_id: semesterId,\n      semester_name: \"Spring 2025\",\n      name: \"Active Schedule\",\n      is_final: true,\n      courses: [{\n        scheduled_course_id: `SC-${uuidv4().substring(0, 8)}`,\n        schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\n        course_id: \"COURSE-001\",\n        course_name: \"Introduction to Programming\",\n        professor_id: \"PROF-001\",\n        professor_name: \"John Smith\",\n        timeslot_id: \"TS1-MON\",\n        day_of_week: \"Monday\",\n        time_slot_id: \"TS1-MON\",\n        room: \"MEM 201\",\n        is_core: true,\n        is_override: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        department_id: \"DEPT-001\",\n        program_ids: [\"PROG-001\", \"PROG-002\"]\n      }, {\n        scheduled_course_id: `SC-${uuidv4().substring(0, 8)}`,\n        schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\n        course_id: \"COURSE-002\",\n        course_name: \"Database Systems\",\n        professor_id: \"PROF-002\",\n        professor_name: \"Jane Doe\",\n        timeslot_id: \"TS2-TUE\",\n        day_of_week: \"Tuesday\",\n        time_slot_id: \"TS2-TUE\",\n        room: \"PRN 105\",\n        is_core: false,\n        is_override: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        department_id: \"DEPT-001\",\n        program_ids: [\"PROG-001\"]\n      }],\n      conflicts: [],\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n  }\n};\n\n// Get all schedules for a semester\nexport const getSchedulesBySemester = async semesterId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedules by semester');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getSchedulesBySemester for semester ${semesterId}:`, error);\n    throw error;\n  }\n};\n\n// Get schedule by ID with courses\nexport const getScheduleById = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedule');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getScheduleById for ID ${id}:`, error);\n\n    // Return mock data for development - can be removed in production\n    return {\n      schedule_id: \"SCH-001\",\n      semester_id: \"SEM-001\",\n      semester_name: \"Fall 2023\",\n      name: \"Fall 2023 Schedule\",\n      is_final: false,\n      courses: [{\n        scheduled_course_id: \"SC-001\",\n        schedule_id: \"SCH-001\",\n        course_id: \"COURSE-001\",\n        course_name: \"Introduction to Programming\",\n        professor_id: \"PROF-001\",\n        professor_name: \"John Doe\",\n        timeslot_id: \"TS1-MON\",\n        day_of_week: \"Monday\",\n        time_slot_id: \"TS1-MON\",\n        is_core: true,\n        is_override: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        department_id: \"DEPT-001\",\n        program_ids: [\"PROG-001\", \"PROG-002\"]\n      }, {\n        scheduled_course_id: \"SC-002\",\n        schedule_id: \"SCH-001\",\n        course_id: \"COURSE-002\",\n        course_name: \"Data Structures\",\n        professor_id: \"PROF-002\",\n        professor_name: \"Jane Smith\",\n        timeslot_id: \"TS2-MON\",\n        day_of_week: \"Monday\",\n        time_slot_id: \"TS2-MON\",\n        is_core: true,\n        is_override: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        department_id: \"DEPT-001\",\n        program_ids: [\"PROG-001\"]\n      }, {\n        scheduled_course_id: \"SC-003\",\n        schedule_id: \"SCH-001\",\n        course_id: \"COURSE-003\",\n        course_name: \"Algorithms\",\n        professor_id: \"PROF-001\",\n        professor_name: \"John Doe\",\n        timeslot_id: \"TS3-TUE\",\n        day_of_week: \"Tuesday\",\n        time_slot_id: \"TS3-TUE\",\n        is_core: true,\n        is_override: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        department_id: \"DEPT-001\",\n        program_ids: [\"PROG-001\"]\n      }],\n      conflicts: [],\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n  }\n};\n\n// Get conflicts for a schedule\nexport const getScheduleConflicts = async scheduleId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/conflicts`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch schedule conflicts');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching conflicts for schedule ${scheduleId}:`, error);\n\n    // Return mock data for development - can be removed in production\n    return [{\n      conflict_id: \"CONF-001\",\n      schedule_id: \"SCH-001\",\n      timeslot_id: \"TS3-MON\",\n      day_of_week: \"Monday\",\n      conflict_type: \"TIME_SLOT_CONFLICT\",\n      description: \"Multiple core courses scheduled in the same time slot\",\n      is_resolved: false,\n      resolution_notes: null,\n      time_slot: {\n        name: \"Time Slot 3\",\n        start_time: \"11:30\",\n        end_time: \"12:25\"\n      },\n      courses: [{\n        scheduled_course_id: \"SC-001\",\n        course_id: \"COURSE-001\",\n        course_name: \"Introduction to Programming\",\n        professor_id: \"PROF-001\",\n        professor_name: \"John Doe\"\n      }, {\n        scheduled_course_id: \"SC-007\",\n        course_id: \"COURSE-007\",\n        course_name: \"Software Engineering\",\n        professor_id: \"PROF-004\",\n        professor_name: \"Emily Davis\"\n      }]\n    }, {\n      conflict_id: \"CONF-002\",\n      schedule_id: \"SCH-001\",\n      timeslot_id: \"TS1-FRI\",\n      day_of_week: \"Friday\",\n      conflict_type: \"PROFESSOR_AVAILABILITY\",\n      description: \"Professor is not available at this time slot\",\n      is_resolved: true,\n      resolution_notes: \"Conflict manually overridden by administrator\",\n      time_slot: {\n        name: \"Time Slot 1\",\n        start_time: \"09:10\",\n        end_time: \"10:05\"\n      },\n      courses: [{\n        scheduled_course_id: \"SC-006\",\n        course_id: \"COURSE-006\",\n        course_name: \"Operating Systems\",\n        professor_id: \"PROF-003\",\n        professor_name: \"Robert Johnson\"\n      }]\n    }];\n  }\n};\n\n// Resolve a conflict\nexport const resolveConflict = async (conflictId, resolution) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/conflicts/${conflictId}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(resolution)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to resolve conflict');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error resolving conflict ${conflictId}:`, error);\n\n    // For development, return a mock success response\n    return {\n      success: true,\n      message: 'Conflict resolved successfully'\n    };\n  }\n};\n\n// Override a scheduled course\nexport const overrideScheduledCourse = async (scheduleId, overrideData) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/override`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(overrideData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to override scheduled course');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error overriding course in schedule ${scheduleId}:`, error);\n\n    // For development, return a mock success response\n    return {\n      success: true,\n      message: 'Course successfully overridden'\n    };\n  }\n};\n\n// Generate a new schedule\nexport const generateSchedule = async (semesterId, name) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/schedules/generate`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        semesterId,\n        name\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to generate schedule');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error generating schedule:', error);\n    throw error;\n  }\n};\nconst scheduleService = {\n  getActiveSchedule,\n  getSchedulesBySemester,\n  getScheduleById,\n  getScheduleConflicts,\n  resolveConflict,\n  overrideScheduledCourse,\n  generateSchedule\n};\nexport default scheduleService;","map":{"version":3,"names":["v4","uuidv4","API_URL","process","env","REACT_APP_API_URL","getActiveSchedule","semesterId","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","error","console","schedule_id","substring","semester_id","semester_name","name","is_final","courses","scheduled_course_id","course_id","course_name","professor_id","professor_name","timeslot_id","day_of_week","time_slot_id","room","is_core","is_override","created_at","Date","toISOString","updated_at","department_id","program_ids","conflicts","getSchedulesBySemester","getScheduleById","id","getScheduleConflicts","scheduleId","conflict_id","conflict_type","description","is_resolved","resolution_notes","time_slot","start_time","end_time","resolveConflict","conflictId","resolution","method","body","JSON","stringify","success","message","overrideScheduledCourse","overrideData","generateSchedule","scheduleService"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/scheduleService.ts"],"sourcesContent":["// src/services/scheduleService.ts\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Define the base API URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Types\r\nexport interface ScheduledCourse {\r\n  scheduled_course_id: string;\r\n  schedule_id: string;\r\n  course_id: string;\r\n  course_name: string;\r\n  professor_id: string;\r\n  professor_name: string;\r\n  timeslot_id: string;\r\n  day_of_week: string;\r\n  time_slot_id: string;\r\n  room?: string;\r\n  is_core: boolean;\r\n  is_override: boolean;\r\n  override_reason?: string;\r\n  conflicts?: any[];\r\n  created_at: string;\r\n  updated_at: string;\r\n  department_id?: string;\r\n  program_ids?: string[];\r\n}\r\n\r\nexport interface Schedule {\r\n  schedule_id: string;\r\n  semester_id: string;\r\n  semester_name: string;\r\n  name: string;\r\n  is_final: boolean;\r\n  courses: ScheduledCourse[];\r\n  conflicts: any[];\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Conflict {\r\n  conflict_id: string;\r\n  schedule_id: string;\r\n  timeslot_id: string;\r\n  day_of_week: string;\r\n  conflict_type: string;\r\n  description: string;\r\n  is_resolved: boolean;\r\n  resolution_notes: string | null;\r\n  time_slot?: {\r\n    name: string;\r\n    start_time: string;\r\n    end_time: string;\r\n  };\r\n  courses: {\r\n    scheduled_course_id: string;\r\n    course_id: string;\r\n    course_name: string;\r\n    professor_id: string;\r\n    professor_name: string;\r\n  }[];\r\n}\r\n\r\nexport interface ConflictResolution {\r\n  action: 'ACCEPT' | 'OVERRIDE';\r\n  notes: string;\r\n}\r\n\r\nexport interface ScheduleOverride {\r\n  conflictId: string;\r\n  professorId: string;\r\n  timeSlotId: string;\r\n  dayOfWeek: string;\r\n  reason: string;\r\n}\r\n\r\n// Get active schedule for a semester\r\nexport const getActiveSchedule = async (semesterId: string): Promise<Schedule> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}/active`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch active schedule');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getActiveSchedule for semester ${semesterId}:`, error);\r\n    \r\n    // Return mock data for development - remove in production\r\n    return {\r\n      schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\r\n      semester_id: semesterId,\r\n      semester_name: \"Spring 2025\",\r\n      name: \"Active Schedule\",\r\n      is_final: true,\r\n      courses: [\r\n        {\r\n          scheduled_course_id: `SC-${uuidv4().substring(0, 8)}`,\r\n          schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\r\n          course_id: \"COURSE-001\",\r\n          course_name: \"Introduction to Programming\",\r\n          professor_id: \"PROF-001\",\r\n          professor_name: \"John Smith\",\r\n          timeslot_id: \"TS1-MON\",\r\n          day_of_week: \"Monday\",\r\n          time_slot_id: \"TS1-MON\",\r\n          room: \"MEM 201\",\r\n          is_core: true,\r\n          is_override: false,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          department_id: \"DEPT-001\",\r\n          program_ids: [\"PROG-001\", \"PROG-002\"]\r\n        },\r\n        {\r\n          scheduled_course_id: `SC-${uuidv4().substring(0, 8)}`,\r\n          schedule_id: `SCH-${uuidv4().substring(0, 8)}`,\r\n          course_id: \"COURSE-002\",\r\n          course_name: \"Database Systems\",\r\n          professor_id: \"PROF-002\",\r\n          professor_name: \"Jane Doe\",\r\n          timeslot_id: \"TS2-TUE\",\r\n          day_of_week: \"Tuesday\",\r\n          time_slot_id: \"TS2-TUE\",\r\n          room: \"PRN 105\",\r\n          is_core: false,\r\n          is_override: false,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          department_id: \"DEPT-001\",\r\n          program_ids: [\"PROG-001\"]\r\n        }\r\n      ],\r\n      conflicts: [],\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n  }\r\n};\r\n\r\n// Get all schedules for a semester\r\nexport const getSchedulesBySemester = async (semesterId: string): Promise<Schedule[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/semester/${semesterId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedules by semester');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getSchedulesBySemester for semester ${semesterId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get schedule by ID with courses\r\nexport const getScheduleById = async (id: string): Promise<Schedule> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/${id}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedule');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getScheduleById for ID ${id}:`, error);\r\n    \r\n    // Return mock data for development - can be removed in production\r\n    return {\r\n      schedule_id: \"SCH-001\",\r\n      semester_id: \"SEM-001\",\r\n      semester_name: \"Fall 2023\",\r\n      name: \"Fall 2023 Schedule\",\r\n      is_final: false,\r\n      courses: [\r\n        {\r\n          scheduled_course_id: \"SC-001\",\r\n          schedule_id: \"SCH-001\",\r\n          course_id: \"COURSE-001\",\r\n          course_name: \"Introduction to Programming\",\r\n          professor_id: \"PROF-001\",\r\n          professor_name: \"John Doe\",\r\n          timeslot_id: \"TS1-MON\",\r\n          day_of_week: \"Monday\",\r\n          time_slot_id: \"TS1-MON\",\r\n          is_core: true,\r\n          is_override: false,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          department_id: \"DEPT-001\",\r\n          program_ids: [\"PROG-001\", \"PROG-002\"]\r\n        },\r\n        {\r\n          scheduled_course_id: \"SC-002\",\r\n          schedule_id: \"SCH-001\",\r\n          course_id: \"COURSE-002\",\r\n          course_name: \"Data Structures\",\r\n          professor_id: \"PROF-002\",\r\n          professor_name: \"Jane Smith\",\r\n          timeslot_id: \"TS2-MON\",\r\n          day_of_week: \"Monday\",\r\n          time_slot_id: \"TS2-MON\",\r\n          is_core: true,\r\n          is_override: false,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          department_id: \"DEPT-001\",\r\n          program_ids: [\"PROG-001\"]\r\n        },\r\n        {\r\n          scheduled_course_id: \"SC-003\",\r\n          schedule_id: \"SCH-001\",\r\n          course_id: \"COURSE-003\",\r\n          course_name: \"Algorithms\",\r\n          professor_id: \"PROF-001\",\r\n          professor_name: \"John Doe\",\r\n          timeslot_id: \"TS3-TUE\",\r\n          day_of_week: \"Tuesday\",\r\n          time_slot_id: \"TS3-TUE\",\r\n          is_core: true,\r\n          is_override: false,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          department_id: \"DEPT-001\",\r\n          program_ids: [\"PROG-001\"]\r\n        }\r\n      ],\r\n      conflicts: [],\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n  }\r\n};\r\n\r\n// Get conflicts for a schedule\r\nexport const getScheduleConflicts = async (scheduleId: string): Promise<Conflict[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/conflicts`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch schedule conflicts');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error fetching conflicts for schedule ${scheduleId}:`, error);\r\n    \r\n    // Return mock data for development - can be removed in production\r\n    return [\r\n      {\r\n        conflict_id: \"CONF-001\",\r\n        schedule_id: \"SCH-001\",\r\n        timeslot_id: \"TS3-MON\",\r\n        day_of_week: \"Monday\",\r\n        conflict_type: \"TIME_SLOT_CONFLICT\",\r\n        description: \"Multiple core courses scheduled in the same time slot\",\r\n        is_resolved: false,\r\n        resolution_notes: null,\r\n        time_slot: {\r\n          name: \"Time Slot 3\",\r\n          start_time: \"11:30\",\r\n          end_time: \"12:25\"\r\n        },\r\n        courses: [\r\n          {\r\n            scheduled_course_id: \"SC-001\",\r\n            course_id: \"COURSE-001\",\r\n            course_name: \"Introduction to Programming\",\r\n            professor_id: \"PROF-001\",\r\n            professor_name: \"John Doe\"\r\n          },\r\n          {\r\n            scheduled_course_id: \"SC-007\",\r\n            course_id: \"COURSE-007\",\r\n            course_name: \"Software Engineering\",\r\n            professor_id: \"PROF-004\",\r\n            professor_name: \"Emily Davis\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        conflict_id: \"CONF-002\",\r\n        schedule_id: \"SCH-001\",\r\n        timeslot_id: \"TS1-FRI\",\r\n        day_of_week: \"Friday\",\r\n        conflict_type: \"PROFESSOR_AVAILABILITY\",\r\n        description: \"Professor is not available at this time slot\",\r\n        is_resolved: true,\r\n        resolution_notes: \"Conflict manually overridden by administrator\",\r\n        time_slot: {\r\n          name: \"Time Slot 1\",\r\n          start_time: \"09:10\",\r\n          end_time: \"10:05\"\r\n        },\r\n        courses: [\r\n          {\r\n            scheduled_course_id: \"SC-006\",\r\n            course_id: \"COURSE-006\",\r\n            course_name: \"Operating Systems\",\r\n            professor_id: \"PROF-003\",\r\n            professor_name: \"Robert Johnson\"\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\n// Resolve a conflict\r\nexport const resolveConflict = async (conflictId: string, resolution: ConflictResolution): Promise<any> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/conflicts/${conflictId}/resolve`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(resolution)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to resolve conflict');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error resolving conflict ${conflictId}:`, error);\r\n    \r\n    // For development, return a mock success response\r\n    return {\r\n      success: true,\r\n      message: 'Conflict resolved successfully'\r\n    };\r\n  }\r\n};\r\n\r\n// Override a scheduled course\r\nexport const overrideScheduledCourse = async (\r\n  scheduleId: string, \r\n  overrideData: ScheduleOverride\r\n): Promise<any> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/${scheduleId}/override`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(overrideData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to override scheduled course');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error overriding course in schedule ${scheduleId}:`, error);\r\n    \r\n    // For development, return a mock success response\r\n    return {\r\n      success: true,\r\n      message: 'Course successfully overridden'\r\n    };\r\n  }\r\n};\r\n\r\n// Generate a new schedule\r\nexport const generateSchedule = async (semesterId: string, name: string): Promise<Schedule> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/schedules/generate`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ semesterId, name })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to generate schedule');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error generating schedule:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst scheduleService = {\r\n  getActiveSchedule,\r\n  getSchedulesBySemester,\r\n  getScheduleById,\r\n  getScheduleConflicts,\r\n  resolveConflict,\r\n  overrideScheduledCourse,\r\n  generateSchedule\r\n};\r\n\r\nexport default scheduleService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}