{"ast":null,"code":"// src/services/semesterService.ts\nimport authService from './authService';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Type definitions\n\n// Get all semesters\nexport const getAllSemesters = async () => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/semesters`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch semesters');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching semesters:', error);\n    return [];\n  }\n};\n\n// Get semester by ID\nexport const getSemesterById = async semesterId => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/semesters/${semesterId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch semester');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching semester ${semesterId}:`, error);\n    return null;\n  }\n};\n\n// Get current semester\nexport const getCurrentSemester = async () => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/semesters/current`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch current semester');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching current semester:', error);\n    return null;\n  }\n};\n\n// Create a new semester\nexport const createSemester = async semesterData => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/semesters`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(semesterData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create semester');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating semester:', error);\n    throw error;\n  }\n};\n\n// Update a semester\nexport const updateSemester = async (semesterId, semesterData) => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/semesters/${semesterId}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(semesterData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update semester');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error updating semester ${semesterId}:`, error);\n    throw error;\n  }\n};\n\n// Delete a semester\nexport const deleteSemester = async semesterId => {\n  try {\n    const token = authService.getToken();\n    const response = await fetch(`${API_URL}/semesters/${semesterId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete semester');\n    }\n    return true;\n  } catch (error) {\n    console.error(`Error deleting semester ${semesterId}:`, error);\n    throw error;\n  }\n};\nconst semesterService = {\n  getAllSemesters,\n  getSemesterById,\n  getCurrentSemester,\n  createSemester,\n  updateSemester,\n  deleteSemester\n};\nexport default semesterService;","map":{"version":3,"names":["authService","API_URL","process","env","REACT_APP_API_URL","getAllSemesters","token","getToken","response","fetch","headers","ok","Error","json","error","console","getSemesterById","semesterId","getCurrentSemester","createSemester","semesterData","method","body","JSON","stringify","errorData","message","updateSemester","deleteSemester","semesterService"],"sources":["/Users/tanvinaraynagowda/University-Scheduler--1/frontend/src/services/semesterService.ts"],"sourcesContent":["// src/services/semesterService.ts\nimport authService from './authService';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Type definitions\nexport interface Semester {\n  semester_id: string;\n  name: string;\n  start_date: string;\n  end_date: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Get all semesters\nexport const getAllSemesters = async (): Promise<Semester[]> => {\n  try {\n    const token = authService.getToken();\n    \n    const response = await fetch(`${API_URL}/semesters`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch semesters');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching semesters:', error);\n    return [];\n  }\n};\n\n// Get semester by ID\nexport const getSemesterById = async (semesterId: string): Promise<Semester | null> => {\n  try {\n    const token = authService.getToken();\n    \n    const response = await fetch(`${API_URL}/semesters/${semesterId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch semester');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching semester ${semesterId}:`, error);\n    return null;\n  }\n};\n\n// Get current semester\nexport const getCurrentSemester = async (): Promise<Semester | null> => {\n  try {\n    const token = authService.getToken();\n    \n    const response = await fetch(`${API_URL}/semesters/current`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch current semester');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching current semester:', error);\n    return null;\n  }\n};\n\n// Create a new semester\nexport const createSemester = async (semesterData: Partial<Semester>): Promise<Semester> => {\n  try {\n    const token = authService.getToken();\n    \n    const response = await fetch(`${API_URL}/semesters`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(semesterData)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create semester');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error creating semester:', error);\n    throw error;\n  }\n};\n\n// Update a semester\nexport const updateSemester = async (semesterId: string, semesterData: Partial<Semester>): Promise<Semester> => {\n  try {\n    const token = authService.getToken();\n    \n    const response = await fetch(`${API_URL}/semesters/${semesterId}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(semesterData)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update semester');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`Error updating semester ${semesterId}:`, error);\n    throw error;\n  }\n};\n\n// Delete a semester\nexport const deleteSemester = async (semesterId: string): Promise<boolean> => {\n  try {\n    const token = authService.getToken();\n    \n    const response = await fetch(`${API_URL}/semesters/${semesterId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete semester');\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Error deleting semester ${semesterId}:`, error);\n    throw error;\n  }\n};\n\nconst semesterService = {\n  getAllSemesters,\n  getSemesterById,\n  getCurrentSemester,\n  createSemester,\n  updateSemester,\n  deleteSemester\n};\n\nexport default semesterService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}