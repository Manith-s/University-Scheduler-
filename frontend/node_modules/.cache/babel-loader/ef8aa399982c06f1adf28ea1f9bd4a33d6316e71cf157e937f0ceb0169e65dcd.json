{"ast":null,"code":"// src/services/departmentService.ts\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define the base API URL\n//const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Types\n\n/*\r\n// Fetch all departments\r\nexport const getAllDepartments = async (): Promise<Department[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/departments`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch departments');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in getAllDepartments:', error);\r\n    throw error;\r\n  }\r\n};\r\n*/\n\n// src/services/departmentService.ts\n\n// Update getAllDepartments for better error handling\nexport const getAllDepartments = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication token not found');\n    }\n    const response = await fetch(`${API_URL}/departments`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || `Error ${response.status}: Failed to fetch departments`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in getAllDepartments:', error);\n    throw error; // Re-throw to allow the component to handle it\n  }\n};\n\n// Fetch a single department by ID\nexport const getDepartmentById = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/departments/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch department');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in getDepartmentById for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Create a new department\nexport const createDepartment = async department => {\n  try {\n    const token = localStorage.getItem('token');\n\n    // If no ID is provided, generate one\n    if (!department.department_id) {\n      department.department_id = `DEPT-${uuidv4().substring(0, 8)}`;\n    }\n    const response = await fetch(`${API_URL}/departments`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(department)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create department');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in createDepartment:', error);\n    throw error;\n  }\n};\n\n// Update an existing department\nexport const updateDepartment = async (id, department) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/departments/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(department)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update department');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error in updateDepartment for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a department\nexport const deleteDepartment = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/departments/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete department');\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      message: data.message || 'Department deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Error in deleteDepartment for ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple departments\nexport const deleteDepartments = async ids => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/departments/batch-delete`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ids\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete departments');\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      message: data.message || 'Departments deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Error in deleteDepartments:`, error);\n    throw error;\n  }\n};\nconst departmentService = {\n  getAllDepartments,\n  getDepartmentById,\n  createDepartment,\n  updateDepartment,\n  deleteDepartment,\n  deleteDepartments\n};\nexport default departmentService;","map":{"version":3,"names":["v4","uuidv4","API_URL","process","env","REACT_APP_API_URL","getAllDepartments","token","localStorage","getItem","Error","response","fetch","headers","ok","errorData","json","catch","message","status","error","console","getDepartmentById","id","data","createDepartment","department","department_id","substring","method","body","JSON","stringify","updateDepartment","deleteDepartment","success","deleteDepartments","ids","departmentService"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/departmentService.ts"],"sourcesContent":["// src/services/departmentService.ts\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Define the base API URL\r\n//const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Types\r\nexport interface Department {\r\n  department_id: string;\r\n  name: string;\r\n  description: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface DepartmentDetail extends Department {\r\n  programs?: any[];\r\n  courses?: any[];\r\n  professors?: any[];\r\n}\r\n\r\n/*\r\n// Fetch all departments\r\nexport const getAllDepartments = async (): Promise<Department[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/departments`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch departments');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in getAllDepartments:', error);\r\n    throw error;\r\n  }\r\n};\r\n*/\r\n\r\n// src/services/departmentService.ts\r\n\r\n// Update getAllDepartments for better error handling\r\nexport const getAllDepartments = async (): Promise<Department[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication token not found');\r\n    }\r\n    \r\n    const response = await fetch(`${API_URL}/departments`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(errorData.message || `Error ${response.status}: Failed to fetch departments`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in getAllDepartments:', error);\r\n    throw error; // Re-throw to allow the component to handle it\r\n  }\r\n};\r\n\r\n\r\n// Fetch a single department by ID\r\nexport const getDepartmentById = async (id: string): Promise<DepartmentDetail> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/departments/${id}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch department');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in getDepartmentById for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new department\r\nexport const createDepartment = async (department: Partial<Department>): Promise<Department> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // If no ID is provided, generate one\r\n    if (!department.department_id) {\r\n      department.department_id = `DEPT-${uuidv4().substring(0, 8)}`;\r\n    }\r\n    \r\n    const response = await fetch(`${API_URL}/departments`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(department)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to create department');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in createDepartment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing department\r\nexport const updateDepartment = async (id: string, department: Partial<Department>): Promise<Department> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/departments/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(department)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update department');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error in updateDepartment for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a department\r\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/departments/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete department');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return { success: true, message: data.message || 'Department deleted successfully' };\r\n  } catch (error) {\r\n    console.error(`Error in deleteDepartment for ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete multiple departments\r\nexport const deleteDepartments = async (ids: string[]): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/departments/batch-delete`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ ids })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete departments');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return { success: true, message: data.message || 'Departments deleted successfully' };\r\n  } catch (error) {\r\n    console.error(`Error in deleteDepartments:`, error);\r\n    throw error;\r\n  }\r\n};\r\nconst departmentService = {\r\n  getAllDepartments,\r\n  getDepartmentById,\r\n  createDepartment,\r\n  updateDepartment,\r\n  deleteDepartment,\r\n  deleteDepartments\r\n};\r\nexport default departmentService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}