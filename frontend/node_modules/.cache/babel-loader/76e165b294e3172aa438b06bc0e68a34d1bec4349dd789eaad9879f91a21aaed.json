{"ast":null,"code":"// src/services/courseService.ts\n\n// Updated Course interface with correct fields and optional properties\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Get courses by program - simplified and robust\nexport const getCoursesByProgram = async programId => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Fetching courses for program ${programId}`);\n    const response = await fetch(`${API_URL}/courses/program/${programId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch courses by program: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log(`Received raw data for program ${programId}:`, data);\n\n    // Ensure we return an array\n    if (!Array.isArray(data)) {\n      console.warn('API did not return an array, received:', typeof data);\n      return [];\n    }\n\n    // Normalize the data to ensure consistent structure\n    const normalizedCourses = data.map(course => ({\n      course_id: course.course_id,\n      program_id: programId,\n      course_name: course.course_name || '',\n      name: course.name || course.course_name || '',\n      description: course.description || '',\n      department_id: course.department_id || '',\n      duration_minutes: course.duration_minutes || 0,\n      is_core: Boolean(course.is_core)\n    }));\n    console.log(`Normalized ${normalizedCourses.length} courses for program ${programId}`);\n    return normalizedCourses;\n  } catch (error) {\n    console.error(`Error fetching courses for program ${programId}:`, error);\n    return [];\n  }\n};\n\n// Create a new course\nexport const createCourse = async course => {\n  try {\n    const token = localStorage.getItem('token');\n\n    // Map the frontend course model to match what the backend expects\n    const backendCourse = {\n      course_id: course.course_id,\n      department_id: course.department_id,\n      course_name: course.name || course.course_name,\n      // Handle both name fields\n      duration_minutes: course.duration_minutes,\n      is_core: course.is_core,\n      program_ids: course.program_id ? [course.program_id] : [] // Backend expects an array of program IDs\n    };\n    console.log('Creating course with data:', backendCourse);\n    const response = await fetch(`${API_URL}/courses`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(backendCourse)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create course');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating course:', error);\n    throw error;\n  }\n};\n\n// Update a course\nexport const updateCourse = async (id, course) => {\n  try {\n    const token = localStorage.getItem('token');\n\n    // Map the frontend course model to match what the backend expects\n    const backendCourse = {\n      course_name: course.name || course.course_name,\n      // Handle both name fields\n      department_id: course.department_id,\n      duration_minutes: course.duration_minutes,\n      is_core: course.is_core,\n      program_ids: course.program_id ? [course.program_id] : undefined // Backend expects an array of program IDs\n    };\n    console.log(`Updating course ${id} with data:`, backendCourse);\n    const response = await fetch(`${API_URL}/courses/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(backendCourse)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update course');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error updating course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a course\nexport const deleteCourse = async id => {\n  try {\n    const token = localStorage.getItem('token');\n    console.log(`Attempting to delete course with ID: ${id}`);\n    const response = await fetch(`${API_URL}/courses/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete course');\n    }\n\n    // Handle 204 No Content or empty responses\n    if (response.status === 204 || response.headers.get('content-length') === '0') {\n      return {\n        success: true,\n        message: 'Course deleted successfully'\n      };\n    }\n    try {\n      const data = await response.json();\n      return {\n        success: true,\n        message: data.message || 'Course deleted successfully'\n      };\n    } catch (parseError) {\n      // If JSON parsing fails but request was successful\n      return {\n        success: true,\n        message: 'Course deleted successfully'\n      };\n    }\n  } catch (error) {\n    console.error(`Error deleting course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete multiple courses\nexport const deleteCourses = async ids => {\n  try {\n    // For backend compatibility, handle batch deletes as individual deletes if endpoint not available\n    const token = localStorage.getItem('token');\n    console.log(`Attempting to delete multiple courses: ${ids.join(', ')}`);\n\n    // For single course, use the single delete endpoint\n    if (ids.length === 1) {\n      return await deleteCourse(ids[0]);\n    }\n\n    // Try using the batch-delete endpoint first\n    try {\n      const response = await fetch(`${API_URL}/courses/batch-delete`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          success: true,\n          message: data.message || 'Courses deleted successfully'\n        };\n      }\n\n      // If batch endpoint fails, fall back to individual deletes\n      console.log('Batch delete endpoint failed, falling back to individual deletes');\n    } catch (batchError) {\n      console.log('Error with batch delete, falling back to individual deletes:', batchError);\n    }\n\n    // Individual delete fallback\n    const deletePromises = ids.map(id => deleteCourse(id));\n    const results = await Promise.all(deletePromises);\n\n    // Check if all deletions were successful\n    const allSuccessful = results.every(result => result.success);\n    return {\n      success: allSuccessful,\n      message: allSuccessful ? 'All courses deleted successfully' : 'Some courses could not be deleted'\n    };\n  } catch (error) {\n    console.error(`Error deleting courses:`, error);\n    throw error;\n  }\n};\nconst courseService = {\n  getAllCourses: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/courses`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch courses');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching courses:', error);\n      return [];\n    }\n  },\n  getCourseById: async id => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/courses/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch course');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching course ${id}:`, error);\n      return null;\n    }\n  },\n  getCoursesByProfessor: async professorId => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/courses/professor/${professorId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch courses by professor');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching courses for professor ${professorId}:`, error);\n      return [];\n    }\n  },\n  // Including the updated methods in the courseService object\n  getCoursesByProgram,\n  createCourse,\n  updateCourse,\n  deleteCourse,\n  deleteCourses\n};\nexport default courseService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getCoursesByProgram","programId","token","localStorage","getItem","console","log","response","fetch","headers","ok","Error","status","statusText","data","json","Array","isArray","warn","normalizedCourses","map","course","course_id","program_id","course_name","name","description","department_id","duration_minutes","is_core","Boolean","length","error","createCourse","backendCourse","program_ids","method","body","JSON","stringify","errorData","message","updateCourse","id","undefined","deleteCourse","get","success","parseError","deleteCourses","ids","join","batchError","deletePromises","results","Promise","all","allSuccessful","every","result","courseService","getAllCourses","getCourseById","getCoursesByProfessor","professorId"],"sources":["C:/Users/shash/Documents/Master's Colleges/UNIVERSITY OF DELAWARE/COURSES/Project/university-scheduler/frontend/src/services/courseService.ts"],"sourcesContent":["// src/services/courseService.ts\r\n\r\n// Updated Course interface with correct fields and optional properties\r\nexport interface Course {\r\n  course_id: string;\r\n  program_id?: string;  // Make optional to handle different backend responses\r\n  department_id?: string; // Make optional\r\n  name?: string; \r\n  course_name?: string; // For backend compatibility\r\n  description?: string;\r\n  duration_minutes: number;\r\n  is_core: boolean;\r\n  semesters?: string[];  // Optional array of semesters\r\n  semester?: string;     // Optional single semester\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  program?: any;\r\n  prerequisites?: any[];\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Get courses by program - simplified and robust\r\nexport const getCoursesByProgram = async (programId: string): Promise<Course[]> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    console.log(`Fetching courses for program ${programId}`);\r\n    \r\n    const response = await fetch(`${API_URL}/courses/program/${programId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch courses by program: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(`Received raw data for program ${programId}:`, data);\r\n    \r\n    // Ensure we return an array\r\n    if (!Array.isArray(data)) {\r\n      console.warn('API did not return an array, received:', typeof data);\r\n      return [];\r\n    }\r\n    \r\n    // Normalize the data to ensure consistent structure\r\n    const normalizedCourses = data.map(course => ({\r\n      course_id: course.course_id,\r\n      program_id: programId,\r\n      course_name: course.course_name || '',\r\n      name: course.name || course.course_name || '',\r\n      description: course.description || '',\r\n      department_id: course.department_id || '',\r\n      duration_minutes: course.duration_minutes || 0,\r\n      is_core: Boolean(course.is_core)\r\n    }));\r\n    \r\n    console.log(`Normalized ${normalizedCourses.length} courses for program ${programId}`);\r\n    return normalizedCourses;\r\n  } catch (error) {\r\n    console.error(`Error fetching courses for program ${programId}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Create a new course\r\nexport const createCourse = async (course: Partial<Course>): Promise<Course> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Map the frontend course model to match what the backend expects\r\n    const backendCourse = {\r\n      course_id: course.course_id,\r\n      department_id: course.department_id,\r\n      course_name: course.name || course.course_name, // Handle both name fields\r\n      duration_minutes: course.duration_minutes,\r\n      is_core: course.is_core,\r\n      program_ids: course.program_id ? [course.program_id] : [] // Backend expects an array of program IDs\r\n    };\r\n    \r\n    console.log('Creating course with data:', backendCourse);\r\n    \r\n    const response = await fetch(`${API_URL}/courses`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(backendCourse)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to create course');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating course:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a course\r\nexport const updateCourse = async (id: string, course: Partial<Course>): Promise<Course> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Map the frontend course model to match what the backend expects\r\n    const backendCourse = {\r\n      course_name: course.name || course.course_name, // Handle both name fields\r\n      department_id: course.department_id,\r\n      duration_minutes: course.duration_minutes,\r\n      is_core: course.is_core,\r\n      program_ids: course.program_id ? [course.program_id] : undefined // Backend expects an array of program IDs\r\n    };\r\n    \r\n    console.log(`Updating course ${id} with data:`, backendCourse);\r\n    \r\n    const response = await fetch(`${API_URL}/courses/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(backendCourse)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update course');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`Error updating course ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a course\r\nexport const deleteCourse = async (id: string): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    console.log(`Attempting to delete course with ID: ${id}`);\r\n    \r\n    const response = await fetch(`${API_URL}/courses/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete course');\r\n    }\r\n\r\n    // Handle 204 No Content or empty responses\r\n    if (response.status === 204 || response.headers.get('content-length') === '0') {\r\n      return {\r\n        success: true,\r\n        message: 'Course deleted successfully'\r\n      };\r\n    }\r\n\r\n    try {\r\n      const data = await response.json();\r\n      return {\r\n        success: true,\r\n        message: data.message || 'Course deleted successfully'\r\n      };\r\n    } catch (parseError) {\r\n      // If JSON parsing fails but request was successful\r\n      return {\r\n        success: true,\r\n        message: 'Course deleted successfully'\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error deleting course ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete multiple courses\r\nexport const deleteCourses = async (ids: string[]): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    // For backend compatibility, handle batch deletes as individual deletes if endpoint not available\r\n    const token = localStorage.getItem('token');\r\n    console.log(`Attempting to delete multiple courses: ${ids.join(', ')}`);\r\n    \r\n    // For single course, use the single delete endpoint\r\n    if (ids.length === 1) {\r\n      return await deleteCourse(ids[0]);\r\n    }\r\n    \r\n    // Try using the batch-delete endpoint first\r\n    try {\r\n      const response = await fetch(`${API_URL}/courses/batch-delete`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ ids })\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return {\r\n          success: true,\r\n          message: data.message || 'Courses deleted successfully'\r\n        };\r\n      }\r\n      \r\n      // If batch endpoint fails, fall back to individual deletes\r\n      console.log('Batch delete endpoint failed, falling back to individual deletes');\r\n    } catch (batchError) {\r\n      console.log('Error with batch delete, falling back to individual deletes:', batchError);\r\n    }\r\n    \r\n    // Individual delete fallback\r\n    const deletePromises = ids.map(id => deleteCourse(id));\r\n    const results = await Promise.all(deletePromises);\r\n    \r\n    // Check if all deletions were successful\r\n    const allSuccessful = results.every(result => result.success);\r\n    \r\n    return {\r\n      success: allSuccessful,\r\n      message: allSuccessful \r\n        ? 'All courses deleted successfully' \r\n        : 'Some courses could not be deleted'\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error deleting courses:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst courseService = {\r\n  getAllCourses: async (): Promise<Course[]> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`${API_URL}/courses`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch courses');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  getCourseById: async (id: string): Promise<Course | null> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`${API_URL}/courses/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch course');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching course ${id}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  getCoursesByProfessor: async (professorId: string): Promise<Course[]> => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`${API_URL}/courses/professor/${professorId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch courses by professor');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching courses for professor ${professorId}:`, error);\r\n      return [];\r\n    }\r\n  },\r\n  \r\n  // Including the updated methods in the courseService object\r\n  getCoursesByProgram,\r\n  createCourse,\r\n  updateCourse,\r\n  deleteCourse,\r\n  deleteCourses\r\n};\r\n\r\nexport default courseService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}